import C from "styled-components";
import { TYPE as b, STATE as i } from "../../constants/index.js";
import h from "../../node_modules/antd/es/input/index.js";
const w = ({ colors: r, borderRadius: e, components: t }, o, u, a, x) => {
  const s = ((n, f, d) => {
    const g = { color: n.inputs.onsurface.active, borderColor: n[b.secondary].active.borderColor, ringColor: n[f].focussed.ringColor }, $ = { color: n.status.success.default, borderColor: n.status.success.default, ringColor: n.status.success.ringColor };
    var c;
    return { filled: g, error: { color: n.status.error.default, borderColor: n.status.error.default, ringColor: n.status.error.ringColor }, success: $, themeState: d !== i.error && d !== i.success && d !== i.filled ? { color: n.inputs.onsurface.active, backgroundColor: n.inputs.surface.active, borderColor: n.inputs.surface.border, ringColor: n[f][d].ringColor } : null }[c = d, [i.filled, i.error, i.success].includes(c) ? c : "themeState"];
  })(r, o, u);
  return `
    &.ant-input {
        font-family: 'Inter', sans-serif;
        color: ${s.color};
        border-color: ${s.borderColor};
    }

    &.ant-input-outlined {
      border: 1px solid ${s.borderColor};

      &:hover {
        border-color: ${s.borderColor};
      }

      &:focus {
        border-color: black;
        box-shadow: none;
      }
    }

    .ant-input-group & {
      &:focus-within {
        outline: none;
        color: ${s.color};
        box-shadow: none;
        border-color: ${r[o].focussed.borderColor};
      }
    }

    .ant-input-group:focus-within {
      outline: none;
      box-shadow: 0 0 0 1px #fff, 0 0 0 3px ${r[o].focussed.ringColor};
      border-radius: ${e.BorderRadiusMd}px;
      transition: box-shadow 0.2s ease-in-out;

      /* Hide focus styles on inner input when parent is focused */
      .ant-input:focus-within {
        box-shadow: none;
        border-radius: 0;
        border-radius: ${l = a, p = x, p && !l ? `${e.BorderRadiusMd}px 0px 0px ${e.BorderRadiusMd}px` : l && !p ? `0px ${e.BorderRadiusMd}px ${e.BorderRadiusMd}px 0px` : "0px"};
        border-color: #ddd;
      }
    }

    /* Remove inner input focus styles when in a group */
    .ant-input-group .ant-input:focus,
    .ant-input-group .ant-input:focus-visible,
    .ant-input-group .ant-input:focus-within {
      outline: none;
      box-shadow: none;
      border-color: ${r[o].focussed.borderColor};
    }

    /* Single focus ring on group */
    .ant-input-group:focus-within {
      outline: none;
      box-shadow: 0 0 0 1px #fff, 0 0 0 3px ${r[o].focussed.ringColor};
      border-radius: ${e.BorderRadiusMd}px;
      transition: box-shadow 0.2s ease-in-out;
    }

    /* Remove focus styles for standalone inputs */
    &:not(.ant-input-group):focus-visible {
      outline: none;
      color: ${s.color};
      box-shadow: 0 0 0 1px #fff, 0 0 0 3px ${r[o].focussed.ringColor};
      border-radius: ${e.BorderRadiusMd}px;
      border-color: ${r[o].focussed.borderColor};
      transition: box-shadow 0.2s ease-in-out;
    }

    &:not(.ant-input-group .ant-input):focus-visible {
      outline: none;
      color: ${s.color};
      box-shadow: 0 0 0 1px #fff, 0 0 0 3px ${r[o].focussed.ringColor};
      border-radius: ${e.BorderRadiusMd}px;
      border-color: ${r[o].focussed.borderColor};
      transition: box-shadow 0.2s ease-in-out;
    }

    &.ant-input-group-wrapper {
      .ant-input-group-addon {
        padding-left: ${t.input.suffixPrefixHorPadding};
        padding-right: ${t.input.suffixPrefixHorPadding};
        padding-top: ${t.input.suffixPrefixVerPadding};
        padding-bottom: ${t.input.suffixPrefixVerPadding};
      }
    }
  `;
  var l, p;
}, B = C(h)`
  ${({ theme: r, state: e, type: t = b.primary, ...o }) => {
  const u = !!o.addonBefore, a = !!o.addonAfter;
  return w(r, t, e, u, a);
}}
`;
export {
  B as Input
};
