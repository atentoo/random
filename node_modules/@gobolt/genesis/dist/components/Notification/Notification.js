import { jsxs as u, jsx as r } from "react/jsx-runtime";
import { SIZE as h, TYPOGRAPHY_VARIANT as n, STATE as t } from "../../constants/index.js";
import b from "./NotificationBadge/NotificationBadge.js";
import { useTheme as k } from "../../utils/styled.js";
import { NotificationRow as x, NotificationUnread as z, NotificationContent as D, ChevronButton as N } from "./styles.js";
import A from "./NotificationRightChevron.js";
import { formatDate as g } from "../../node_modules/date-fns/format.js";
import { formatDistanceToNow as E } from "../../node_modules/date-fns/formatDistanceToNow.js";
import l from "../Typography/Typography.js";
import M from "../Button/Button.js";
const H = ({ message: p, state: e = t.info, date: a, action: c, onArrowClick: d, size: i = h.standard, isUnread: f = !0, hasFormattedDate: y = !1 }) => {
  const o = k();
  ((C, s) => {
    switch (C) {
      case t.warning:
        return s.colors.status.warning.onsurface;
      case t.error:
        return s.colors.status.error.onsurface;
      case t.success:
        return s.colors.status.success.onsurface;
      case t.generic:
        return s.colors.status.generic.onsurface;
      case t.info:
      default:
        s.colors.status.info.onsurface;
    }
  })(e, o), o.colors.interactive.utility.border, o.colors.interactive.utility.onsurface;
  const v = a ? g(new Date(a), "MMM d, h:mma") : "", m = a ? E(new Date(a), { addSuffix: !0 }) : "", w = y ? `${m} â€¢ ${v}` : m, T = i === h.small ? n.body1 : n.body2;
  return u(x, { state: e, size: i, $isUnread: f, children: [f ? r(z, { state: e, size: i }) : r("div", { style: { width: 8 } }), r(b, { state: e }), r(D, { size: i, children: u("div", { children: [r(l, { variant: n.body3, color: o.colors.onsurface["copy-dark"], isText: !0, children: p }), r("div", { style: { marginTop: 8 }, children: r(l, { variant: T, color: o.colors.onsurface["copy-light"], isText: !0, children: w }) })] }) }), c ? r(M, { themeType: "utility", onClick: c.onClick, size: "small", style: { pointerEvents: "all" }, children: r(l, { variant: n.body1, isText: !0, children: c.label }) }) : null, d ? r(N, { onClick: d, children: r(A, {}) }) : null] });
};
export {
  H as default
};
