import { compareAsc as x } from "./compareAsc.js";
import { minutesInDay as h, minutesInMonth as c } from "./constants.js";
import { differenceInMonths as S } from "./differenceInMonths.js";
import { differenceInSeconds as I } from "./differenceInSeconds.js";
import { toDate as m } from "./toDate.js";
import { getDefaultOptions as T } from "./_lib/defaultOptions.js";
import { getTimezoneOffsetInMilliseconds as M } from "./_lib/getTimezoneOffsetInMilliseconds.js";
import { enUS as b } from "./locale/en-US.js";
function H(D, d, e) {
  const p = T(), t = (e == null ? void 0 : e.locale) ?? p.locale ?? b, l = x(D, d);
  if (isNaN(l)) throw new RangeError("Invalid time value");
  const a = Object.assign({}, e, { addSuffix: e == null ? void 0 : e.addSuffix, comparison: l });
  let i, f;
  l > 0 ? (i = m(d), f = m(D)) : (i = m(D), f = m(d));
  const o = I(f, i), X = (M(f) - M(i)) / 1e3, n = Math.round((o - X) / 60);
  let r;
  if (n < 2) return e != null && e.includeSeconds ? o < 5 ? t.formatDistance("lessThanXSeconds", 5, a) : o < 10 ? t.formatDistance("lessThanXSeconds", 10, a) : o < 20 ? t.formatDistance("lessThanXSeconds", 20, a) : o < 40 ? t.formatDistance("halfAMinute", 0, a) : o < 60 ? t.formatDistance("lessThanXMinutes", 1, a) : t.formatDistance("xMinutes", 1, a) : n === 0 ? t.formatDistance("lessThanXMinutes", 1, a) : t.formatDistance("xMinutes", n, a);
  if (n < 45) return t.formatDistance("xMinutes", n, a);
  if (n < 90) return t.formatDistance("aboutXHours", 1, a);
  if (n < h) {
    const s = Math.round(n / 60);
    return t.formatDistance("aboutXHours", s, a);
  }
  if (n < 2520) return t.formatDistance("xDays", 1, a);
  if (n < c) {
    const s = Math.round(n / h);
    return t.formatDistance("xDays", s, a);
  }
  if (n < 2 * c) return r = Math.round(n / c), t.formatDistance("aboutXMonths", r, a);
  if (r = S(f, i), r < 12) {
    const s = Math.round(n / c);
    return t.formatDistance("xMonths", s, a);
  }
  {
    const s = r % 12, u = Math.trunc(r / 12);
    return s < 3 ? t.formatDistance("aboutXYears", u, a) : s < 9 ? t.formatDistance("overXYears", u, a) : t.formatDistance("almostXYears", u + 1, a);
  }
}
export {
  H as default,
  H as formatDistance
};
