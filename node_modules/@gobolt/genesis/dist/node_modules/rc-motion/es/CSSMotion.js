import x from "../../@babel/runtime/helpers/esm/defineProperty.js";
import t from "../../@babel/runtime/helpers/esm/objectSpread2.js";
import H from "../../@babel/runtime/helpers/esm/slicedToArray.js";
import V from "../../@babel/runtime/helpers/esm/typeof.js";
import q from "../../../_virtual/index.js";
import z from "../../rc-util/es/Dom/findDOMNode.js";
import { fillRef as D, supportRef as Q, getNodeRef as U } from "../../rc-util/es/ref.js";
import * as o from "react";
import { useRef as y } from "react";
import { Context as W } from "./context.js";
import G from "./DomWrapper.js";
import I from "./hooks/useStatus.js";
import { isActive as J } from "./hooks/useStepQueue.js";
import { STATUS_NONE as K, STEP_PREPARE as X, STEP_START as Y } from "./interface.js";
import { getTransitionName as M, supportTransition as Z } from "./util/motion.js";
function $(c) {
  var R = c;
  V(c) === "object" && (R = c.transitionSupport);
  var S = o.forwardRef(function(r, E) {
    var T = r.visible, C = T === void 0 || T, P = r.removeOnLeave, b = P === void 0 || P, _ = r.forceRender, n = r.children, s = r.motionName, p = r.leavedClassName, L = r.eventProps, O = function(m, w) {
      return !(!m.motionName || !R || w === !1);
    }(r, o.useContext(W).motion), u = y(), g = y(), j = I(O, C, function() {
      try {
        return u.current instanceof HTMLElement ? u.current : z(g.current);
      } catch {
        return null;
      }
    }, r), f = H(j, 4), v = f[0], d = f[1], k = f[2], N = f[3], A = o.useRef(N);
    N && (A.current = !0);
    var e, a = o.useCallback(function(m) {
      u.current = m, D(E, m);
    }, [E]), l = t(t({}, L), {}, { visible: C });
    if (n) if (v === K) e = N ? n(t({}, l), a) : !b && A.current && p ? n(t(t({}, l), {}, { className: p }), a) : _ || !b && !p ? n(t(t({}, l), {}, { style: { display: "none" } }), a) : null;
    else {
      var i;
      d === X ? i = "prepare" : J(d) ? i = "active" : d === Y && (i = "start");
      var h = M(s, "".concat(v, "-").concat(i));
      e = n(t(t({}, l), {}, { className: q(M(s, v), x(x({}, h, h && i), s, typeof s == "string")), style: k }), a);
    }
    else e = null;
    return o.isValidElement(e) && Q(e) && (U(e) || (e = o.cloneElement(e, { ref: a }))), o.createElement(G, { ref: g }, e);
  });
  return S.displayName = "CSSMotion", S;
}
const pr = $(Z);
export {
  pr as default,
  $ as genCSSMotion
};
