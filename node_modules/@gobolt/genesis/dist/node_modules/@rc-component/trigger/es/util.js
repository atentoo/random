import q from "../../../@babel/runtime/helpers/esm/objectSpread2.js";
function D() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return arguments.length > 2 && arguments[2] ? e[0] === o[0] : e[0] === o[0] && e[1] === o[1];
}
function O(e, o, t, n) {
  for (var r = t.points, i = Object.keys(e), u = 0; u < i.length; u += 1) {
    var l, g = i[u];
    if (D((l = e[g]) === null || l === void 0 ? void 0 : l.points, r, n)) return "".concat(o, "-placement-").concat(g);
  }
  return "";
}
function X(e, o, t, n) {
  return o || (t ? { motionName: "".concat(e, "-").concat(t) } : n ? { motionName: n } : null);
}
function B(e) {
  return e.ownerDocument.defaultView;
}
function Y(e) {
  for (var o = [], t = e == null ? void 0 : e.parentElement, n = ["hidden", "scroll", "clip", "auto"]; t; ) {
    var r = B(t).getComputedStyle(t);
    [r.overflowX, r.overflowY, r.overflow].some(function(i) {
      return n.includes(i);
    }) && o.push(t), t = t.parentElement;
  }
  return o;
}
function s(e) {
  var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  return Number.isNaN(e) ? o : e;
}
function m(e) {
  return s(parseFloat(e), 0);
}
function z(e, o) {
  var t = q({}, e);
  return (o || []).forEach(function(n) {
    if (!(n instanceof HTMLBodyElement || n instanceof HTMLHtmlElement)) {
      var r = B(n).getComputedStyle(n), i = r.overflow, u = r.overflowClipMargin, l = r.borderTopWidth, g = r.borderBottomWidth, C = r.borderLeftWidth, L = r.borderRightWidth, a = n.getBoundingClientRect(), v = n.offsetHeight, T = n.clientHeight, p = n.offsetWidth, V = n.clientWidth, M = m(l), w = m(g), W = m(C), b = m(L), f = s(Math.round(a.width / p * 1e3) / 1e3), h = s(Math.round(a.height / v * 1e3) / 1e3), A = (p - V - W - b) * f, P = (v - T - M - w) * h, x = M * h, R = w * h, y = W * f, S = b * f, c = 0, d = 0;
      if (i === "clip") {
        var E = m(u);
        c = E * f, d = E * h;
      }
      var H = a.x + y - c, N = a.y + x - d, j = H + a.width + 2 * c - y - S - A, k = N + a.height + 2 * d - x - R - P;
      t.left = Math.max(t.left, H), t.top = Math.max(t.top, N), t.right = Math.min(t.right, j), t.bottom = Math.min(t.bottom, k);
    }
  }), t;
}
export {
  Y as collectScroller,
  O as getAlignPopupClassName,
  X as getMotion,
  z as getVisibleArea,
  B as getWin,
  s as toNum
};
