import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as g } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { FastColor as m } from "../../../../@ant-design/fast-color/es/FastColor.js";
import { resetComponent as u, genFocusStyle as $ } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as S } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as p } from "../../theme/util/genStyleUtils.js";
const I = (n) => {
  const { componentCls: e, trackHeightSM: a, trackPadding: r, trackMinWidthSM: s, innerMinMarginSM: l, innerMaxMarginSM: c, handleSizeSM: t, calc: i } = n, o = `${e}-inner`, d = g(i(t).add(i(r).mul(2)).equal()), h = g(i(c).mul(2).equal());
  return { [e]: { [`&${e}-small`]: { minWidth: s, height: a, lineHeight: g(a), [`${e}-inner`]: { paddingInlineStart: c, paddingInlineEnd: l, [`${o}-checked, ${o}-unchecked`]: { minHeight: a }, [`${o}-checked`]: { marginInlineStart: `calc(-100% + ${d} - ${h})`, marginInlineEnd: `calc(100% - ${d} + ${h})` }, [`${o}-unchecked`]: { marginTop: i(a).mul(-1).equal(), marginInlineStart: 0, marginInlineEnd: 0 } }, [`${e}-handle`]: { width: t, height: t }, [`${e}-loading-icon`]: { top: i(i(t).sub(n.switchLoadingIconSize)).div(2).equal(), fontSize: n.switchLoadingIconSize }, [`&${e}-checked`]: { [`${e}-inner`]: { paddingInlineStart: l, paddingInlineEnd: c, [`${o}-checked`]: { marginInlineStart: 0, marginInlineEnd: 0 }, [`${o}-unchecked`]: { marginInlineStart: `calc(100% - ${d} + ${h})`, marginInlineEnd: `calc(-100% + ${d} - ${h})` } }, [`${e}-handle`]: { insetInlineStart: `calc(100% - ${g(i(t).add(r).equal())})` } }, [`&:not(${e}-disabled):active`]: { [`&:not(${e}-checked) ${o}`]: { [`${o}-unchecked`]: { marginInlineStart: i(n.marginXXS).div(2).equal(), marginInlineEnd: i(n.marginXXS).mul(-1).div(2).equal() } }, [`&${e}-checked ${o}`]: { [`${o}-checked`]: { marginInlineStart: i(n.marginXXS).mul(-1).div(2).equal(), marginInlineEnd: i(n.marginXXS).div(2).equal() } } } } } };
}, k = (n) => {
  const { componentCls: e, handleSize: a, calc: r } = n;
  return { [e]: { [`${e}-loading-icon${n.iconCls}`]: { position: "relative", top: r(r(a).sub(n.fontSize)).div(2).equal(), color: n.switchLoadingIconColor, verticalAlign: "top" }, [`&${e}-checked ${e}-loading-icon`]: { color: n.switchColor } } };
}, b = (n) => {
  const { componentCls: e, trackPadding: a, handleBg: r, handleShadow: s, handleSize: l, calc: c } = n, t = `${e}-handle`;
  return { [e]: { [t]: { position: "absolute", top: a, insetInlineStart: a, width: l, height: l, transition: `all ${n.switchDuration} ease-in-out`, "&::before": { position: "absolute", top: 0, insetInlineEnd: 0, bottom: 0, insetInlineStart: 0, backgroundColor: r, borderRadius: c(l).div(2).equal(), boxShadow: s, transition: `all ${n.switchDuration} ease-in-out`, content: '""' } }, [`&${e}-checked ${t}`]: { insetInlineStart: `calc(100% - ${g(c(l).add(a).equal())})` }, [`&:not(${e}-disabled):active`]: { [`${t}::before`]: { insetInlineEnd: n.switchHandleActiveInset, insetInlineStart: 0 }, [`&${e}-checked ${t}::before`]: { insetInlineEnd: 0, insetInlineStart: n.switchHandleActiveInset } } } };
}, w = (n) => {
  const { componentCls: e, trackHeight: a, trackPadding: r, innerMinMargin: s, innerMaxMargin: l, handleSize: c, calc: t } = n, i = `${e}-inner`, o = g(t(c).add(t(r).mul(2)).equal()), d = g(t(l).mul(2).equal());
  return { [e]: { [i]: { display: "block", overflow: "hidden", borderRadius: 100, height: "100%", paddingInlineStart: l, paddingInlineEnd: s, transition: `padding-inline-start ${n.switchDuration} ease-in-out, padding-inline-end ${n.switchDuration} ease-in-out`, [`${i}-checked, ${i}-unchecked`]: { display: "block", color: n.colorTextLightSolid, fontSize: n.fontSizeSM, transition: `margin-inline-start ${n.switchDuration} ease-in-out, margin-inline-end ${n.switchDuration} ease-in-out`, pointerEvents: "none", minHeight: a }, [`${i}-checked`]: { marginInlineStart: `calc(-100% + ${o} - ${d})`, marginInlineEnd: `calc(100% - ${o} + ${d})` }, [`${i}-unchecked`]: { marginTop: t(a).mul(-1).equal(), marginInlineStart: 0, marginInlineEnd: 0 } }, [`&${e}-checked ${i}`]: { paddingInlineStart: s, paddingInlineEnd: l, [`${i}-checked`]: { marginInlineStart: 0, marginInlineEnd: 0 }, [`${i}-unchecked`]: { marginInlineStart: `calc(100% - ${o} + ${d})`, marginInlineEnd: `calc(-100% + ${o} - ${d})` } }, [`&:not(${e}-disabled):active`]: { [`&:not(${e}-checked) ${i}`]: { [`${i}-unchecked`]: { marginInlineStart: t(r).mul(2).equal(), marginInlineEnd: t(r).mul(-1).mul(2).equal() } }, [`&${e}-checked ${i}`]: { [`${i}-checked`]: { marginInlineStart: t(r).mul(-1).mul(2).equal(), marginInlineEnd: t(r).mul(2).equal() } } } } };
}, M = (n) => {
  const { componentCls: e, trackHeight: a, trackMinWidth: r } = n;
  return { [e]: Object.assign(Object.assign(Object.assign(Object.assign({}, u(n)), { position: "relative", display: "inline-block", boxSizing: "border-box", minWidth: r, height: a, lineHeight: g(a), verticalAlign: "middle", background: n.colorTextQuaternary, border: "0", borderRadius: 100, cursor: "pointer", transition: `all ${n.motionDurationMid}`, userSelect: "none", [`&:hover:not(${e}-disabled)`]: { background: n.colorTextTertiary } }), $(n)), { [`&${e}-checked`]: { background: n.switchColor, [`&:hover:not(${e}-disabled)`]: { background: n.colorPrimaryHover } }, [`&${e}-loading, &${e}-disabled`]: { cursor: "not-allowed", opacity: n.switchDisabledOpacity, "*": { boxShadow: "none", cursor: "not-allowed" } }, [`&${e}-rtl`]: { direction: "rtl" } }) };
}, v = (n) => {
  const { fontSize: e, lineHeight: a, controlHeight: r, colorWhite: s } = n, l = e * a, c = r / 2, t = l - 4, i = c - 4;
  return { trackHeight: l, trackHeightSM: c, trackMinWidth: 2 * t + 8, trackMinWidthSM: 2 * i + 4, trackPadding: 2, handleBg: s, handleSize: t, handleSizeSM: i, handleShadow: `0 2px 4px 0 ${new m("#00230b").setA(0.2).toRgbString()}`, innerMinMargin: t / 2, innerMaxMargin: t + 2 + 4, innerMinMarginSM: i / 2, innerMaxMarginSM: i + 2 + 4 };
}, F = p("Switch", (n) => {
  const e = S(n, { switchDuration: n.motionDurationMid, switchColor: n.colorPrimary, switchDisabledOpacity: n.opacityLoading, switchLoadingIconSize: n.calc(n.fontSizeIcon).mul(0.75).equal(), switchLoadingIconColor: `rgba(0, 0, 0, ${n.opacityLoading})`, switchHandleActiveInset: "-30%" });
  return [M(e), w(e), b(e), k(e), I(e)];
}, v);
export {
  F as default,
  v as prepareComponentToken
};
