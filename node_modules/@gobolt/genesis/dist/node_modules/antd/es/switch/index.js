import * as r from "react";
import V from "../../../@ant-design/icons/es/icons/LoadingOutlined.js";
import I from "../../../../_virtual/index.js";
import z from "../../../rc-switch/es/index.js";
import T from "../../../rc-util/es/hooks/useMergedState.js";
import A from "../_util/wave/index.js";
import "../config-provider/index.js";
import D from "../config-provider/DisabledContext.js";
import H from "../config-provider/hooks/useSize.js";
import L from "./style/index.js";
import { ConfigContext as R } from "../config-provider/context.js";
var W = function(t, n) {
  var l = {};
  for (var e in t) Object.prototype.hasOwnProperty.call(t, e) && n.indexOf(e) < 0 && (l[e] = t[e]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function") {
    var o = 0;
    for (e = Object.getOwnPropertySymbols(t); o < e.length; o++) n.indexOf(e[o]) < 0 && Object.prototype.propertyIsEnumerable.call(t, e[o]) && (l[e[o]] = t[e[o]]);
  }
  return l;
};
const f = r.forwardRef((t, n) => {
  const { prefixCls: l, size: e, disabled: o, loading: i, className: p, rootClassName: u, style: g, checked: c, value: h, defaultChecked: m, defaultValue: C, onChange: d } = t, y = W(t, ["prefixCls", "size", "disabled", "loading", "className", "rootClassName", "style", "checked", "value", "defaultChecked", "defaultValue", "onChange"]), [b, v] = T(!1, { value: c ?? h, defaultValue: m ?? C }), { getPrefixCls: O, direction: N, switch: s } = r.useContext(R), x = r.useContext(D), w = (o ?? x) || i, a = O("switch", l), j = r.createElement("div", { className: `${a}-handle` }, i && r.createElement(V, { className: `${a}-loading-icon` })), [E, _, k] = L(a), S = H(e), $ = I(s == null ? void 0 : s.className, { [`${a}-small`]: S === "small", [`${a}-loading`]: i, [`${a}-rtl`]: N === "rtl" }, p, u, _, k), P = Object.assign(Object.assign({}, s == null ? void 0 : s.style), g);
  return E(r.createElement(A, { component: "Switch" }, r.createElement(z, Object.assign({}, y, { checked: b, onChange: function() {
    v(arguments.length <= 0 ? void 0 : arguments[0]), d == null || d.apply(void 0, arguments);
  }, prefixCls: a, className: $, style: P, disabled: w, ref: n, loadingIcon: j }))));
});
f.__ANT_SWITCH = !0, process.env.NODE_ENV !== "production" && (f.displayName = "Switch");
export {
  f as default
};
