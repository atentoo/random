import * as n from "react";
import w from "../../../@ant-design/icons/es/icons/EnterOutlined.js";
import L from "../../../../_virtual/index.js";
import E from "../../../rc-util/es/KeyCode.js";
import { cloneElement as j } from "../_util/reactNode.js";
import B from "../input/TextArea.js";
import D from "./style/index.js";
const J = (y) => {
  const { prefixCls: r, "aria-label": v, className: C, style: g, direction: x, maxLength: S, autoSize: h = !0, value: a, onSave: K, onCancel: b, onEnd: i, component: u, enterIcon: m = n.createElement(w, null) } = y, c = n.useRef(null), o = n.useRef(!1), s = n.useRef(null), [f, p] = n.useState(a);
  n.useEffect(() => {
    p(a);
  }, [a]), n.useEffect(() => {
    var t;
    if (!((t = c.current) === null || t === void 0) && t.resizableTextArea) {
      const { textArea: e } = c.current.resizableTextArea;
      e.focus();
      const { length: l } = e.value;
      e.setSelectionRange(l, l);
    }
  }, []);
  const d = () => {
    K(f.trim());
  }, [R, $, z] = D(r), N = L(r, `${r}-edit-content`, { [`${r}-rtl`]: x === "rtl", [`${r}-${u}`]: !!u }, C, $, z);
  return R(n.createElement("div", { className: N, style: g }, n.createElement(B, { ref: c, maxLength: S, value: f, onChange: (t) => {
    let { target: e } = t;
    p(e.value.replace(/[\n\r]/g, ""));
  }, onKeyDown: (t) => {
    let { keyCode: e } = t;
    o.current || (s.current = e);
  }, onKeyUp: (t) => {
    let { keyCode: e, ctrlKey: l, altKey: A, metaKey: T, shiftKey: k } = t;
    s.current !== e || o.current || l || A || T || k || (e === E.ENTER ? (d(), i == null || i()) : e === E.ESC && b());
  }, onCompositionStart: () => {
    o.current = !0;
  }, onCompositionEnd: () => {
    o.current = !1;
  }, onBlur: () => {
    d();
  }, "aria-label": v, rows: 1, autoSize: h }), m !== null ? j(m, { className: `${r}-edit-content-confirm` }) : null));
};
export {
  J as default
};
