import c from "../../../@babel/runtime/helpers/esm/classCallCheck.js";
import a from "../../../@babel/runtime/helpers/esm/createClass.js";
import "../../../@rc-component/color-picker/es/ColorPicker.js";
import { Color as i } from "../../../@rc-component/color-picker/es/color.js";
import "../../../../_virtual/index.js";
import "react";
const u = (t, o) => (t == null ? void 0 : t.replace(/[^\w/]/g, "").slice(0, o ? 8 : 6)) || "", h = (t, o) => t ? u(t, o) : "";
let d = function() {
  return a(function t(o) {
    var e;
    if (c(this, t), this.cleared = !1, o instanceof t) return this.metaColor = o.metaColor.clone(), this.colors = (e = o.colors) === null || e === void 0 ? void 0 : e.map((n) => ({ color: new t(n.color), percent: n.percent })), void (this.cleared = o.cleared);
    const r = Array.isArray(o);
    r && o.length ? (this.colors = o.map((n) => {
      let { color: l, percent: s } = n;
      return { color: new t(l), percent: s };
    }), this.metaColor = new i(this.colors[0].color.metaColor)) : this.metaColor = new i(r ? "" : o), (!o || r && !this.colors) && (this.metaColor = this.metaColor.setA(0), this.cleared = !0);
  }, [{ key: "toHsb", value: function() {
    return this.metaColor.toHsb();
  } }, { key: "toHsbString", value: function() {
    return this.metaColor.toHsbString();
  } }, { key: "toHex", value: function() {
    return h(this.toHexString(), this.metaColor.a < 1);
  } }, { key: "toHexString", value: function() {
    return this.metaColor.toHexString();
  } }, { key: "toRgb", value: function() {
    return this.metaColor.toRgb();
  } }, { key: "toRgbString", value: function() {
    return this.metaColor.toRgbString();
  } }, { key: "isGradient", value: function() {
    return !!this.colors && !this.cleared;
  } }, { key: "getColors", value: function() {
    return this.colors || [{ color: this, percent: 0 }];
  } }, { key: "toCssString", value: function() {
    const { colors: t } = this;
    return t ? `linear-gradient(90deg, ${t.map((o) => `${o.color.toRgbString()} ${o.percent}%`).join(", ")})` : this.metaColor.toRgbString();
  } }, { key: "equals", value: function(t) {
    return !(!t || this.isGradient() !== t.isGradient()) && (this.isGradient() ? this.colors.length === t.colors.length && this.colors.every((o, e) => {
      const r = t.colors[e];
      return o.percent === r.percent && o.color.equals(r.color);
    }) : this.toHexString() === t.toHexString());
  } }]);
}();
export {
  d as AggregationColor,
  h as getHex,
  u as toHexFormat
};
