import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as i } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import r from "../../../../@ant-design/cssinjs/es/Keyframes.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as l } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as a } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as c } from "../../theme/util/genStyleUtils.js";
const s = "--progress-line-stroke-color", m = "--progress-percent", n = (o) => {
  const t = o ? "100%" : "-100%";
  return new r(`antProgress${o ? "RTL" : "LTR"}Active`, { "0%": { transform: `translateX(${t}) scaleX(0)`, opacity: 0.1 }, "20%": { transform: `translateX(${t}) scaleX(0)`, opacity: 0.5 }, to: { transform: "translateX(0) scaleX(1)", opacity: 0 } });
}, g = (o) => {
  const { componentCls: t, iconCls: e } = o;
  return { [t]: Object.assign(Object.assign({}, l(o)), { display: "inline-block", "&-rtl": { direction: "rtl" }, "&-line": { position: "relative", width: "100%", fontSize: o.fontSize }, [`${t}-outer`]: { display: "inline-flex", alignItems: "center", width: "100%" }, [`${t}-inner`]: { position: "relative", display: "inline-block", width: "100%", flex: 1, overflow: "hidden", verticalAlign: "middle", backgroundColor: o.remainingColor, borderRadius: o.lineBorderRadius }, [`${t}-inner:not(${t}-circle-gradient)`]: { [`${t}-circle-path`]: { stroke: o.defaultColor } }, [`${t}-success-bg, ${t}-bg`]: { position: "relative", background: o.defaultColor, borderRadius: o.lineBorderRadius, transition: `all ${o.motionDurationSlow} ${o.motionEaseInOutCirc}` }, [`${t}-layout-bottom`]: { display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", [`${t}-text`]: { width: "max-content", marginInlineStart: 0, marginTop: o.marginXXS } }, [`${t}-bg`]: { overflow: "hidden", "&::after": { content: '""', background: { _multi_value_: !0, value: ["inherit", `var(${s})`] }, height: "100%", width: `calc(1 / var(${m}) * 100%)`, display: "block" }, [`&${t}-bg-inner`]: { minWidth: "max-content", "&::after": { content: "none" }, [`${t}-text-inner`]: { color: o.colorWhite, [`&${t}-text-bright`]: { color: "rgba(0, 0, 0, 0.45)" } } } }, [`${t}-success-bg`]: { position: "absolute", insetBlockStart: 0, insetInlineStart: 0, backgroundColor: o.colorSuccess }, [`${t}-text`]: { display: "inline-block", marginInlineStart: o.marginXS, color: o.colorText, lineHeight: 1, width: "2em", whiteSpace: "nowrap", textAlign: "start", verticalAlign: "middle", wordBreak: "normal", [e]: { fontSize: o.fontSize }, [`&${t}-text-outer`]: { width: "max-content" }, [`&${t}-text-outer${t}-text-start`]: { width: "max-content", marginInlineStart: 0, marginInlineEnd: o.marginXS } }, [`${t}-text-inner`]: { display: "flex", justifyContent: "center", alignItems: "center", width: "100%", height: "100%", marginInlineStart: 0, padding: `0 ${i(o.paddingXXS)}`, [`&${t}-text-start`]: { justifyContent: "start" }, [`&${t}-text-end`]: { justifyContent: "end" } }, [`&${t}-status-active`]: { [`${t}-bg::before`]: { position: "absolute", inset: 0, backgroundColor: o.colorBgContainer, borderRadius: o.lineBorderRadius, opacity: 0, animationName: n(), animationDuration: o.progressActiveMotionDuration, animationTimingFunction: o.motionEaseOutQuint, animationIterationCount: "infinite", content: '""' } }, [`&${t}-rtl${t}-status-active`]: { [`${t}-bg::before`]: { animationName: n(!0) } }, [`&${t}-status-exception`]: { [`${t}-bg`]: { backgroundColor: o.colorError }, [`${t}-text`]: { color: o.colorError } }, [`&${t}-status-exception ${t}-inner:not(${t}-circle-gradient)`]: { [`${t}-circle-path`]: { stroke: o.colorError } }, [`&${t}-status-success`]: { [`${t}-bg`]: { backgroundColor: o.colorSuccess }, [`${t}-text`]: { color: o.colorSuccess } }, [`&${t}-status-success ${t}-inner:not(${t}-circle-gradient)`]: { [`${t}-circle-path`]: { stroke: o.colorSuccess } } }) };
}, d = (o) => {
  const { componentCls: t, iconCls: e } = o;
  return { [t]: { [`${t}-circle-trail`]: { stroke: o.remainingColor }, [`&${t}-circle ${t}-inner`]: { position: "relative", lineHeight: 1, backgroundColor: "transparent" }, [`&${t}-circle ${t}-text`]: { position: "absolute", insetBlockStart: "50%", insetInlineStart: 0, width: "100%", margin: 0, padding: 0, color: o.circleTextColor, fontSize: o.circleTextFontSize, lineHeight: 1, whiteSpace: "normal", textAlign: "center", transform: "translateY(-50%)", [e]: { fontSize: o.circleIconFontSize } }, [`${t}-circle&-status-exception`]: { [`${t}-text`]: { color: o.colorError } }, [`${t}-circle&-status-success`]: { [`${t}-text`]: { color: o.colorSuccess } } }, [`${t}-inline-circle`]: { lineHeight: 1, [`${t}-inner`]: { verticalAlign: "bottom" } } };
}, p = (o) => {
  const { componentCls: t } = o;
  return { [t]: { [`${t}-steps`]: { display: "inline-block", "&-outer": { display: "flex", flexDirection: "row", alignItems: "center" }, "&-item": { flexShrink: 0, minWidth: o.progressStepMinWidth, marginInlineEnd: o.progressStepMarginInlineEnd, backgroundColor: o.remainingColor, transition: `all ${o.motionDurationSlow}`, "&-active": { backgroundColor: o.defaultColor } } } } };
}, u = (o) => {
  const { componentCls: t, iconCls: e } = o;
  return { [t]: { [`${t}-small&-line, ${t}-small&-line ${t}-text ${e}`]: { fontSize: o.fontSizeSM } } };
}, $ = (o) => ({ circleTextColor: o.colorText, defaultColor: o.colorInfo, remainingColor: o.colorFillSecondary, lineBorderRadius: 100, circleTextFontSize: "1em", circleIconFontSize: o.fontSize / o.fontSizeSM + "em" }), D = c("Progress", (o) => {
  const t = o.calc(o.marginXXS).div(2).equal(), e = a(o, { progressStepMarginInlineEnd: t, progressStepMinWidth: t, progressActiveMotionDuration: "2.4s" });
  return [g(e), d(e), p(e), u(e)];
}, $);
export {
  s as LineStrokeColorVar,
  m as Percent,
  D as default,
  $ as prepareComponentToken
};
