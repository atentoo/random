import * as l from "react";
import { supportNodeRef as p, useComposeRef as i, getNodeRef as m } from "../../../rc-util/es/ref.js";
import u from "../_util/ContextIsolator.js";
var d = function(r, s) {
  var o = {};
  for (var e in r) Object.prototype.hasOwnProperty.call(r, e) && s.indexOf(e) < 0 && (o[e] = r[e]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function") {
    var t = 0;
    for (e = Object.getOwnPropertySymbols(r); t < e.length; t++) s.indexOf(e[t]) < 0 && Object.prototype.propertyIsEnumerable.call(r, e[t]) && (o[e[t]] = r[e[t]]);
  }
  return o;
};
const n = l.createContext(null), y = l.forwardRef((r, s) => {
  const { children: o } = r, e = d(r, ["children"]), t = l.useContext(n), c = l.useMemo(() => Object.assign(Object.assign({}, t), e), [t, e.prefixCls, e.mode, e.selectable, e.rootClassName]), a = p(o), f = i(s, a ? m(o) : null);
  return l.createElement(n.Provider, { value: c }, l.createElement(u, { space: !0 }, a ? l.cloneElement(o, { ref: f }) : o));
});
export {
  y as OverrideProvider,
  n as default
};
