import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as e } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { prepareToken as i, prepareComponentToken as l } from "./index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genSubStyleComponent as t } from "../../theme/util/genStyleUtils.js";
const n = (o) => {
  const { componentCls: r } = o;
  return { [`${r}${r}-bordered${r}-disabled:not(${r}-mini)`]: { "&, &:hover": { [`${r}-item-link`]: { borderColor: o.colorBorder } }, "&:focus-visible": { [`${r}-item-link`]: { borderColor: o.colorBorder } }, [`${r}-item, ${r}-item-link`]: { backgroundColor: o.colorBgContainerDisabled, borderColor: o.colorBorder, [`&:hover:not(${r}-item-active)`]: { backgroundColor: o.colorBgContainerDisabled, borderColor: o.colorBorder, a: { color: o.colorTextDisabled } }, [`&${r}-item-active`]: { backgroundColor: o.itemActiveBgDisabled } }, [`${r}-prev, ${r}-next`]: { "&:hover button": { backgroundColor: o.colorBgContainerDisabled, borderColor: o.colorBorder, color: o.colorTextDisabled }, [`${r}-item-link`]: { backgroundColor: o.colorBgContainerDisabled, borderColor: o.colorBorder } } }, [`${r}${r}-bordered:not(${r}-mini)`]: { [`${r}-prev, ${r}-next`]: { "&:hover button": { borderColor: o.colorPrimaryHover, backgroundColor: o.itemBg }, [`${r}-item-link`]: { backgroundColor: o.itemLinkBg, borderColor: o.colorBorder }, [`&:hover ${r}-item-link`]: { borderColor: o.colorPrimary, backgroundColor: o.itemBg, color: o.colorPrimary }, [`&${r}-disabled`]: { [`${r}-item-link`]: { borderColor: o.colorBorder, color: o.colorTextDisabled } } }, [`${r}-item`]: { backgroundColor: o.itemBg, border: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}`, [`&:hover:not(${r}-item-active)`]: { borderColor: o.colorPrimary, backgroundColor: o.itemBg, a: { color: o.colorPrimary } }, "&-active": { borderColor: o.colorPrimary } } } };
}, x = t(["Pagination", "bordered"], (o) => {
  const r = i(o);
  return [n(r)];
}, l);
export {
  x as default
};
