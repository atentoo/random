import V from "../../../../rc-util/es/hooks/useMemo.js";
import j from "../../../../rc-util/es/isEqual.js";
import { devUseWarning as v } from "../../_util/warning.js";
import m from "./useThemeKey.js";
import { defaultConfig as b } from "../../theme/context.js";
function E(c, o, p) {
  var i, t;
  const u = v("ConfigProvider"), s = c || {}, e = s.inherit !== !1 && o ? o : Object.assign(Object.assign({}, b), { hashed: (i = o == null ? void 0 : o.hashed) !== null && i !== void 0 ? i : b.hashed, cssVar: o == null ? void 0 : o.cssVar }), f = m();
  if (process.env.NODE_ENV !== "production") {
    const n = s.cssVar || e.cssVar, r = !!(typeof s.cssVar == "object" && (!((t = s.cssVar) === null || t === void 0) && t.key) || f);
    process.env.NODE_ENV !== "production" && u(!n || r, "breaking", "Missing key in `cssVar` config. Please upgrade to React 18 or set `cssVar.key` manually in each ConfigProvider inside `cssVar` enabled ConfigProvider.");
  }
  return V(() => {
    var n, r;
    if (!c) return o;
    const a = Object.assign({}, e.components);
    Object.keys(c.components || {}).forEach((l) => {
      a[l] = Object.assign(Object.assign({}, a[l]), c.components[l]);
    });
    const g = `css-var-${f.replace(/:/g, "")}`, d = ((n = s.cssVar) !== null && n !== void 0 ? n : e.cssVar) && Object.assign(Object.assign(Object.assign({ prefix: p == null ? void 0 : p.prefixCls }, typeof e.cssVar == "object" ? e.cssVar : {}), typeof s.cssVar == "object" ? s.cssVar : {}), { key: typeof s.cssVar == "object" && ((r = s.cssVar) === null || r === void 0 ? void 0 : r.key) || g });
    return Object.assign(Object.assign(Object.assign({}, e), s), { token: Object.assign(Object.assign({}, e.token), s.token), components: a, cssVar: d });
  }, [s, e], (n, r) => n.some((a, g) => {
    const d = r[g];
    return !j(a, d, !0);
  }));
}
export {
  E as default
};
