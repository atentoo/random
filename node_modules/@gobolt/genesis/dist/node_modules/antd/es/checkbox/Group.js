import C from "../../../@babel/runtime/helpers/esm/toConsumableArray.js";
import * as o from "react";
import _ from "../../../../_virtual/index.js";
import A from "../../../rc-util/es/omit.js";
import "../config-provider/index.js";
import R from "../config-provider/hooks/useCSSVarCls.js";
import z from "./Checkbox.js";
import B from "./GroupContext.js";
import D from "./style/index.js";
import { ConfigContext as F } from "../config-provider/context.js";
var H = function(r, u) {
  var s = {};
  for (var t in r) Object.prototype.hasOwnProperty.call(r, t) && u.indexOf(t) < 0 && (s[t] = r[t]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function") {
    var a = 0;
    for (t = Object.getOwnPropertySymbols(r); a < t.length; a++) u.indexOf(t[a]) < 0 && Object.prototype.propertyIsEnumerable.call(r, t[a]) && (s[t[a]] = r[t[a]]);
  }
  return s;
};
const Z = o.forwardRef((r, u) => {
  const { defaultValue: s, children: t, options: a = [], prefixCls: h, className: O, rootClassName: N, style: j, onChange: b } = r, l = H(r, ["defaultValue", "children", "options", "prefixCls", "className", "rootClassName", "style", "onChange"]), { getPrefixCls: E, direction: P } = o.useContext(F), [m, g] = o.useState(l.value || s || []), [S, y] = o.useState([]);
  o.useEffect(() => {
    "value" in l && g(l.value || []);
  }, [l.value]);
  const d = o.useMemo(() => a.map((e) => typeof e == "string" || typeof e == "number" ? { label: e, value: e } : e), [a]), f = E("checkbox", h), c = `${f}-group`, x = R(f), [w, V, k] = D(f, x), I = A(l, ["value", "disabled"]), $ = a.length ? d.map((e) => o.createElement(z, { prefixCls: f, key: e.value.toString(), disabled: "disabled" in e ? e.disabled : l.disabled, value: e.value, checked: m.includes(e.value), onChange: e.onChange, className: `${c}-item`, style: e.style, title: e.title, id: e.id, required: e.required }, e.label)) : t, q = { toggleOption: (e) => {
    const n = m.indexOf(e.value), i = C(m);
    n === -1 ? i.push(e.value) : i.splice(n, 1), "value" in l || g(i), b == null || b(i.filter((p) => S.includes(p)).sort((p, M) => d.findIndex((v) => v.value === p) - d.findIndex((v) => v.value === M)));
  }, value: m, disabled: l.disabled, name: l.name, registerValue: (e) => {
    y((n) => [].concat(C(n), [e]));
  }, cancelValue: (e) => {
    y((n) => n.filter((i) => i !== e));
  } }, G = _(c, { [`${c}-rtl`]: P === "rtl" }, O, N, k, x, V);
  return w(o.createElement("div", Object.assign({ className: G, style: j }, I, { ref: u }), o.createElement(B.Provider, { value: q }, $)));
});
export {
  B as GroupContext,
  Z as default
};
