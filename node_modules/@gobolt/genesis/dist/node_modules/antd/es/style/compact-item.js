function d(e, t, o) {
  const { focusElCls: n, focus: r, borderElCls: i } = o, s = i ? "> *" : "", a = ["hover", r ? "focus" : null, "active"].filter(Boolean).map((m) => `&:${m} ${s}`).join(",");
  return { [`&-item:not(${t}-last-item)`]: { marginInlineEnd: e.calc(e.lineWidth).mul(-1).equal() }, "&-item": Object.assign(Object.assign({ [a]: { zIndex: 2 } }, n ? { [`&${n}`]: { zIndex: 2 } } : {}), { [`&[disabled] ${s}`]: { zIndex: 0 } }) };
}
function l(e, t, o) {
  const { borderElCls: n } = o, r = n ? `> ${n}` : "";
  return { [`&-item:not(${t}-first-item):not(${t}-last-item) ${r}`]: { borderRadius: 0 }, [`&-item:not(${t}-last-item)${t}-first-item`]: { [`& ${r}, &${e}-sm ${r}, &${e}-lg ${r}`]: { borderStartEndRadius: 0, borderEndEndRadius: 0 } }, [`&-item:not(${t}-first-item)${t}-last-item`]: { [`& ${r}, &${e}-sm ${r}, &${e}-lg ${r}`]: { borderStartStartRadius: 0, borderEndStartRadius: 0 } } };
}
function c(e) {
  let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { focus: !0 };
  const { componentCls: o } = e, n = `${o}-compact`;
  return { [n]: Object.assign(Object.assign({}, d(e, n, t)), l(o, n, t)) };
}
export {
  c as genCompactItemStyle
};
