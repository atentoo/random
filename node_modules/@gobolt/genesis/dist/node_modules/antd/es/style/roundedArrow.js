import "../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as b } from "../../../@ant-design/cssinjs/es/util/index.js";
import "../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../rc-util/es/warning.js";
import "../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
function z(p) {
  const { sizePopupArrow: s, borderRadiusXS: o, borderRadiusOuter: t } = p, r = s / 2, i = r, a = 1 * t / Math.sqrt(2), e = r - t * (1 - 1 / Math.sqrt(2)), n = r - o * (1 / Math.sqrt(2)), d = t * (Math.sqrt(2) - 1) + o * (1 / Math.sqrt(2)), u = 2 * r - n, $ = d, m = 2 * r - a, l = e, w = 2 * r - 0, c = i, g = r * Math.sqrt(2) + t * (Math.sqrt(2) - 2), h = t * (Math.sqrt(2) - 1);
  return { arrowShadowWidth: g, arrowPath: `path('M 0 ${i} A ${t} ${t} 0 0 0 ${a} ${e} L ${n} ${d} A ${o} ${o} 0 0 1 ${u} ${$} L ${m} ${l} A ${t} ${t} 0 0 0 ${w} ${c} Z')`, arrowPolygon: `polygon(${h}px 100%, 50% ${h}px, ${2 * r - h}px 100%, ${h}px 100%)` };
}
const I = (p, s, o) => {
  const { sizePopupArrow: t, arrowPolygon: r, arrowPath: i, arrowShadowWidth: a, borderRadiusXS: e, calc: n } = p;
  return { pointerEvents: "none", width: t, height: t, overflow: "hidden", "&::before": { position: "absolute", bottom: 0, insetInlineStart: 0, width: t, height: n(t).div(2).equal(), background: s, clipPath: { _multi_value_: !0, value: [r, i] }, content: '""' }, "&::after": { content: '""', position: "absolute", width: a, height: a, bottom: 0, insetInline: 0, margin: "auto", borderRadius: { _skip_check_: !0, value: `0 0 ${b(e)} 0` }, transform: "translateY(50%) rotate(-135deg)", boxShadow: o, zIndex: 0, background: "transparent" } };
};
export {
  I as genRoundedArrow,
  z as getArrowToken
};
