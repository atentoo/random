import * as o from "react";
import S from "../../../../@ant-design/icons/es/icons/CheckCircleFilled.js";
import $ from "../../../../@ant-design/icons/es/icons/CloseCircleFilled.js";
import E from "../../../../@ant-design/icons/es/icons/ExclamationCircleFilled.js";
import P from "../../../../@ant-design/icons/es/icons/LoadingOutlined.js";
import j from "../../../../../_virtual/index.js";
import { FormContext as y, FormItemInputContext as I } from "../context.js";
import { getStatus as M } from "../util.js";
const N = { success: S, warning: E, error: $, validating: P };
function J(b) {
  let { children: k, errors: n, warnings: a, hasFeedback: t, validateStatus: v, prefixCls: F, meta: g, noStyle: c } = b;
  const i = `${F}-item`, { feedbackIcons: x } = o.useContext(y), e = M(n, a, g, null, !!t, v), { isFormItemInput: m, status: l, hasFeedback: C, feedbackIcon: h } = o.useContext(I), w = o.useMemo(() => {
    var s;
    let u;
    if (t) {
      const d = t !== !0 && t.icons || x, f = e && ((s = d == null ? void 0 : d({ status: e, errors: n, warnings: a })) === null || s === void 0 ? void 0 : s[e]), p = e && N[e];
      u = f !== !1 && p ? o.createElement("span", { className: j(`${i}-feedback-icon`, `${i}-feedback-icon-${e}`) }, f || o.createElement(p, null)) : null;
    }
    const r = { status: e || "", errors: n, warnings: a, hasFeedback: !!t, feedbackIcon: u, isFormItemInput: !0 };
    return c && (r.status = (e ?? l) || "", r.isFormItemInput = m, r.hasFeedback = !!(t ?? C), r.feedbackIcon = t !== void 0 ? r.feedbackIcon : h), r;
  }, [e, t, c, m, l]);
  return o.createElement(I.Provider, { value: w }, k);
}
export {
  J as default
};
