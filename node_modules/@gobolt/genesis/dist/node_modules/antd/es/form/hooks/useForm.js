import * as u from "react";
import "../../../../rc-field-form/es/index.js";
import { getDOM as m } from "../../../../rc-util/es/Dom/findDOMNode.js";
import p from "../../../../scroll-into-view-if-needed/dist/index.js";
import { toArray as d, getFieldId as g } from "../util.js";
import O from "../../../../rc-field-form/es/useForm.js";
var y = function(o, s) {
  var r = {};
  for (var t in o) Object.prototype.hasOwnProperty.call(o, t) && s.indexOf(t) < 0 && (r[t] = o[t]);
  if (o != null && typeof Object.getOwnPropertySymbols == "function") {
    var e = 0;
    for (t = Object.getOwnPropertySymbols(o); e < t.length; e++) s.indexOf(t[e]) < 0 && Object.prototype.propertyIsEnumerable.call(o, t[e]) && (r[t[e]] = o[t[e]]);
  }
  return r;
};
function f(o) {
  return d(o).join("_");
}
function a(o, s) {
  const r = s.getFieldInstance(o), t = m(r);
  if (t) return t;
  const e = g(d(o), s.__INTERNAL__.name);
  return e ? document.getElementById(e) : void 0;
}
function I(o) {
  const [s] = O(), r = u.useRef({}), t = u.useMemo(() => o ?? Object.assign(Object.assign({}, s), { __INTERNAL__: { itemRef: (e) => (n) => {
    const c = f(e);
    n ? r.current[c] = n : delete r.current[c];
  } }, scrollToField: function(e) {
    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { focus: c } = n, i = y(n, ["focus"]), l = a(e, t);
    l && (p(l, Object.assign({ scrollMode: "if-needed", block: "nearest" }, i)), c && t.focusField(e));
  }, focusField: (e) => {
    var n, c;
    const i = t.getFieldInstance(e);
    typeof (i == null ? void 0 : i.focus) == "function" ? i.focus() : (c = (n = a(e, t)) === null || n === void 0 ? void 0 : n.focus) === null || c === void 0 || c.call(n);
  }, getFieldInstance: (e) => {
    const n = f(e);
    return r.current[n];
  } }), [o, s]);
  return [t];
}
export {
  I as default
};
