import * as t from "react";
import A from "../../../@ant-design/icons/es/icons/QuestionCircleOutlined.js";
import v from "../../../../_virtual/index.js";
import I from "../grid/col.js";
import S from "../locale/en_US.js";
import _ from "../tooltip/index.js";
import { FormContext as D } from "./context.js";
import L from "../locale/useLocale.js";
var M = function(r, o) {
  var l = {};
  for (var e in r) Object.prototype.hasOwnProperty.call(r, e) && o.indexOf(e) < 0 && (l[e] = r[e]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function") {
    var n = 0;
    for (e = Object.getOwnPropertySymbols(r); n < e.length; n++) o.indexOf(e[n]) < 0 && Object.prototype.propertyIsEnumerable.call(r, e[n]) && (l[e[n]] = r[e[n]]);
  }
  return l;
};
const K = (r) => {
  let { prefixCls: o, label: l, htmlFor: e, labelCol: n, labelAlign: E, colon: u, required: m, requiredMark: c, tooltip: $, vertical: F } = r;
  var s;
  const [b] = L("Form"), { labelAlign: j, labelCol: x, labelWrap: C, colon: q } = t.useContext(D);
  if (!l) return null;
  const d = n || x || {}, p = `${o}-item-label`, N = v(p, (E || j) === "left" && `${p}-left`, d.className, { [`${p}-wrap`]: !!C });
  let a = l;
  const y = u === !0 || q !== !1 && u !== !1;
  y && !F && typeof l == "string" && l.trim() && (a = l.replace(/[:|ï¼š]\s*$/, ""));
  const f = function(i) {
    return i ? typeof i != "object" || t.isValidElement(i) ? { title: i } : i : null;
  }($);
  if (f) {
    const { icon: i = t.createElement(A, null) } = f, w = M(f, ["icon"]), k = t.createElement(_, Object.assign({}, w), t.cloneElement(i, { className: `${o}-item-tooltip`, title: "", onClick: (P) => {
      P.preventDefault();
    }, tabIndex: null }));
    a = t.createElement(t.Fragment, null, a, k);
  }
  const g = c === "optional", O = typeof c == "function";
  O ? a = c(a, { required: !!m }) : g && !m && (a = t.createElement(t.Fragment, null, a, t.createElement("span", { className: `${o}-item-optional`, title: "" }, (b == null ? void 0 : b.optional) || ((s = S.Form) === null || s === void 0 ? void 0 : s.optional))));
  const h = v({ [`${o}-item-required`]: m, [`${o}-item-required-mark-optional`]: g || O, [`${o}-item-no-colon`]: !y });
  return t.createElement(I, Object.assign({}, d, { className: N }), t.createElement("label", { htmlFor: e, className: h, title: typeof l == "string" ? l : "" }, a));
};
export {
  K as default
};
