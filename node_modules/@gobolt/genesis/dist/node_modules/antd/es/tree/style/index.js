import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as l } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import g from "../../../../@ant-design/cssinjs/es/Keyframes.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { getStyle as b } from "../../checkbox/style/index.js";
import { resetComponent as u, genFocusOutline as m } from "../../style/index.js";
import h from "../../style/motion/collapse.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as $ } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as v } from "../../theme/util/genStyleUtils.js";
import { genDirectoryStyle as f } from "./directory.js";
const w = new g("ant-tree-node-fx-do-not-use", { "0%": { opacity: 0 }, "100%": { opacity: 1 } }), S = (t, e) => ({ [`.${t}-switcher-icon`]: { display: "inline-block", fontSize: 10, verticalAlign: "baseline", svg: { transition: `transform ${e.motionDurationSlow}` } } }), y = (t, e) => ({ [`.${t}-drop-indicator`]: { position: "absolute", zIndex: 1, height: 2, backgroundColor: e.colorPrimary, borderRadius: 1, pointerEvents: "none", "&:after": { position: "absolute", top: -3, insetInlineStart: -6, width: 8, height: 8, backgroundColor: "transparent", border: `${l(e.lineWidthBold)} solid ${e.colorPrimary}`, borderRadius: "50%", content: '""' } } }), x = (t, e) => {
  const { treeCls: o, treeNodeCls: r, treeNodePadding: i, titleHeight: n, indentSize: a, nodeSelectedBg: d, nodeHoverBg: c, colorTextQuaternary: s, controlItemBgActiveDisabled: p } = e;
  return { [o]: Object.assign(Object.assign({}, u(e)), { background: e.colorBgContainer, borderRadius: e.borderRadius, transition: `background-color ${e.motionDurationSlow}`, "&-rtl": { direction: "rtl" }, [`&${o}-rtl ${o}-switcher_close ${o}-switcher-icon svg`]: { transform: "rotate(90deg)" }, [`&-focused:not(:hover):not(${o}-active-focused)`]: Object.assign({}, m(e)), [`${o}-list-holder-inner`]: { alignItems: "flex-start" }, [`&${o}-block-node`]: { [`${o}-list-holder-inner`]: { alignItems: "stretch", [`${o}-node-content-wrapper`]: { flex: "auto" }, [`${r}.dragging:after`]: { position: "absolute", inset: 0, border: `1px solid ${e.colorPrimary}`, opacity: 0, animationName: w, animationDuration: e.motionDurationSlow, animationPlayState: "running", animationFillMode: "forwards", content: '""', pointerEvents: "none", borderRadius: e.borderRadius } } }, [r]: { display: "flex", alignItems: "flex-start", marginBottom: i, lineHeight: l(n), position: "relative", "&:before": { content: '""', position: "absolute", zIndex: 1, insetInlineStart: 0, width: "100%", top: "100%", height: i }, [`&-disabled ${o}-node-content-wrapper`]: { color: e.colorTextDisabled, cursor: "not-allowed", "&:hover": { background: "transparent" } }, [`${o}-checkbox-disabled + ${o}-node-selected,&${r}-disabled${r}-selected ${o}-node-content-wrapper`]: { backgroundColor: p }, [`${o}-checkbox-disabled`]: { pointerEvents: "unset" }, [`&:not(${r}-disabled)`]: { [`${o}-node-content-wrapper`]: { "&:hover": { color: e.nodeHoverColor } } }, [`&-active ${o}-node-content-wrapper`]: { background: e.controlItemBgHover }, [`&:not(${r}-disabled).filter-node ${o}-title`]: { color: e.colorPrimary, fontWeight: 500 }, "&-draggable": { cursor: "grab", [`${o}-draggable-icon`]: { flexShrink: 0, width: n, textAlign: "center", visibility: "visible", color: s }, [`&${r}-disabled ${o}-draggable-icon`]: { visibility: "hidden" } } }, [`${o}-indent`]: { alignSelf: "stretch", whiteSpace: "nowrap", userSelect: "none", "&-unit": { display: "inline-block", width: a } }, [`${o}-draggable-icon`]: { visibility: "hidden" }, [`${o}-switcher, ${o}-checkbox`]: { marginInlineEnd: e.calc(e.calc(n).sub(e.controlInteractiveSize)).div(2).equal() }, [`${o}-switcher`]: Object.assign(Object.assign({}, S(t, e)), { position: "relative", flex: "none", alignSelf: "stretch", width: n, textAlign: "center", cursor: "pointer", userSelect: "none", transition: `all ${e.motionDurationSlow}`, "&-noop": { cursor: "unset" }, "&:before": { pointerEvents: "none", content: '""', width: n, height: n, position: "absolute", left: { _skip_check_: !0, value: 0 }, top: 0, borderRadius: e.borderRadius, transition: `all ${e.motionDurationSlow}` }, [`&:not(${o}-switcher-noop):hover:before`]: { backgroundColor: e.colorBgTextHover }, [`&_close ${o}-switcher-icon svg`]: { transform: "rotate(-90deg)" }, "&-loading-icon": { color: e.colorPrimary }, "&-leaf-line": { position: "relative", zIndex: 1, display: "inline-block", width: "100%", height: "100%", "&:before": { position: "absolute", top: 0, insetInlineEnd: e.calc(n).div(2).equal(), bottom: e.calc(i).mul(-1).equal(), marginInlineStart: -1, borderInlineEnd: `1px solid ${e.colorBorder}`, content: '""' }, "&:after": { position: "absolute", width: e.calc(e.calc(n).div(2).equal()).mul(0.8).equal(), height: e.calc(n).div(2).equal(), borderBottom: `1px solid ${e.colorBorder}`, content: '""' } } }), [`${o}-node-content-wrapper`]: Object.assign(Object.assign({ position: "relative", minHeight: n, paddingBlock: 0, paddingInline: e.paddingXS, background: "transparent", borderRadius: e.borderRadius, cursor: "pointer", transition: `all ${e.motionDurationMid}, border 0s, line-height 0s, box-shadow 0s` }, y(t, e)), { "&:hover": { backgroundColor: c }, [`&${o}-node-selected`]: { color: e.nodeSelectedColor, backgroundColor: d }, [`${o}-iconEle`]: { display: "inline-block", width: n, height: n, textAlign: "center", verticalAlign: "top", "&:empty": { display: "none" } } }), [`${o}-unselectable ${o}-node-content-wrapper:hover`]: { backgroundColor: "transparent" }, [`${r}.drop-container > [draggable]`]: { boxShadow: `0 0 0 2px ${e.colorPrimary}` }, "&-show-line": { [`${o}-indent-unit`]: { position: "relative", height: "100%", "&:before": { position: "absolute", top: 0, insetInlineEnd: e.calc(n).div(2).equal(), bottom: e.calc(i).mul(-1).equal(), borderInlineEnd: `1px solid ${e.colorBorder}`, content: '""' }, "&-end:before": { display: "none" } }, [`${o}-switcher`]: { background: "transparent", "&-line-icon": { verticalAlign: "-0.15em" } } }, [`${r}-leaf-last ${o}-switcher-leaf-line:before`]: { top: "auto !important", bottom: "auto !important", height: `${l(e.calc(n).div(2).equal())} !important` } }) };
}, k = (t, e) => {
  const o = `.${t}`, r = `${o}-treenode`, i = e.calc(e.paddingXS).div(2).equal(), n = $(e, { treeCls: o, treeNodeCls: r, treeNodePadding: i });
  return [x(t, n), f(n)];
}, C = (t) => {
  const { controlHeightSM: e, controlItemBgHover: o, controlItemBgActive: r } = t;
  return { titleHeight: e, indentSize: e, nodeHoverBg: o, nodeHoverColor: t.colorText, nodeSelectedBg: r, nodeSelectedColor: t.colorText };
}, I = (t) => {
  const { colorTextLightSolid: e, colorPrimary: o } = t;
  return Object.assign(Object.assign({}, C(t)), { directoryNodeSelectedColor: e, directoryNodeSelectedBg: o });
}, K = v("Tree", (t, e) => {
  let { prefixCls: o } = e;
  return [{ [t.componentCls]: b(`${o}-checkbox`, t) }, k(o, t), h(t)];
}, I);
export {
  K as default,
  x as genBaseStyle,
  k as genTreeStyle,
  C as initComponentToken,
  I as prepareComponentToken
};
