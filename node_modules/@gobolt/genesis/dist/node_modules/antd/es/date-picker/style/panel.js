import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as n } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { FastColor as q } from "../../../../@ant-design/fast-color/es/FastColor.js";
const G = (t) => {
  const { pickerCellCls: e, pickerCellInnerCls: r, cellHeight: o, borderRadiusSM: i, motionDurationMid: a, cellHoverBg: p, lineWidth: g, lineType: l, colorPrimary: d, cellActiveWithRangeBg: c, colorTextLightSolid: b, colorTextDisabled: s, cellBgDisabled: v, colorFillSecondary: u } = t;
  return { "&::before": { position: "absolute", top: "50%", insetInlineStart: 0, insetInlineEnd: 0, zIndex: 1, height: o, transform: "translateY(-50%)", content: '""', pointerEvents: "none" }, [r]: { position: "relative", zIndex: 2, display: "inline-block", minWidth: o, height: o, lineHeight: n(o), borderRadius: i, transition: `background ${a}` }, [`&:hover:not(${e}-in-view):not(${e}-disabled),
    &:hover:not(${e}-selected):not(${e}-range-start):not(${e}-range-end):not(${e}-disabled)`]: { [r]: { background: p } }, [`&-in-view${e}-today ${r}`]: { "&::before": { position: "absolute", top: 0, insetInlineEnd: 0, bottom: 0, insetInlineStart: 0, zIndex: 1, border: `${n(g)} ${l} ${d}`, borderRadius: i, content: '""' } }, [`&-in-view${e}-in-range,
      &-in-view${e}-range-start,
      &-in-view${e}-range-end`]: { position: "relative", [`&:not(${e}-disabled):before`]: { background: c } }, [`&-in-view${e}-selected,
      &-in-view${e}-range-start,
      &-in-view${e}-range-end`]: { [`&:not(${e}-disabled) ${r}`]: { color: b, background: d }, [`&${e}-disabled ${r}`]: { background: u } }, [`&-in-view${e}-range-start:not(${e}-disabled):before`]: { insetInlineStart: "50%" }, [`&-in-view${e}-range-end:not(${e}-disabled):before`]: { insetInlineEnd: "50%" }, [`&-in-view${e}-range-start:not(${e}-range-end) ${r}`]: { borderStartStartRadius: i, borderEndStartRadius: i, borderStartEndRadius: 0, borderEndEndRadius: 0 }, [`&-in-view${e}-range-end:not(${e}-range-start) ${r}`]: { borderStartStartRadius: 0, borderEndStartRadius: 0, borderStartEndRadius: i, borderEndEndRadius: i }, "&-disabled": { color: s, cursor: "not-allowed", [r]: { background: "transparent" }, "&::before": { background: v } }, [`&-disabled${e}-today ${r}::before`]: { borderColor: s } };
}, re = (t) => {
  const { componentCls: e, pickerCellCls: r, pickerCellInnerCls: o, pickerYearMonthCellWidth: i, pickerControlIconSize: a, cellWidth: p, paddingSM: g, paddingXS: l, paddingXXS: d, colorBgContainer: c, lineWidth: b, lineType: s, borderRadiusLG: v, colorPrimary: u, colorTextHeading: P, colorSplit: k, pickerControlIconBorderWidth: h, colorIcon: A, textHeight: x, motionDurationMid: m, colorIconHover: D, fontWeightStrong: z, cellHeight: C, pickerCellPaddingVertical: I, colorTextDisabled: R, colorText: S, fontSize: M, motionDurationSlow: X, withoutTimeCellHeight: j, pickerQuarterPanelContentHeight: L, borderRadiusSM: $, colorTextLightSolid: W, cellHoverBg: H, timeColumnHeight: Y, timeColumnWidth: w, timeCellHeight: f, controlItemBgActive: y, marginXXS: E, pickerDatePanelPaddingHorizontal: B, pickerControlIconMargin: T } = t, F = t.calc(p).mul(7).add(t.calc(B).mul(2)).equal();
  return { [e]: { "&-panel": { display: "inline-flex", flexDirection: "column", textAlign: "center", background: c, borderRadius: v, outline: "none", "&-focused": { borderColor: u }, "&-rtl": { [`${e}-prev-icon,
              ${e}-super-prev-icon`]: { transform: "rotate(45deg)" }, [`${e}-next-icon,
              ${e}-super-next-icon`]: { transform: "rotate(-135deg)" }, [`${e}-time-panel`]: { [`${e}-content`]: { direction: "ltr", "> *": { direction: "rtl" } } } } }, "&-decade-panel,\n        &-year-panel,\n        &-quarter-panel,\n        &-month-panel,\n        &-week-panel,\n        &-date-panel,\n        &-time-panel": { display: "flex", flexDirection: "column", width: F }, "&-header": { display: "flex", padding: `0 ${n(l)}`, color: P, borderBottom: `${n(b)} ${s} ${k}`, "> *": { flex: "none" }, button: { padding: 0, color: A, lineHeight: n(x), background: "transparent", border: 0, cursor: "pointer", transition: `color ${m}`, fontSize: "inherit", display: "inline-flex", alignItems: "center", justifyContent: "center", "&:empty": { display: "none" } }, "> button": { minWidth: "1.6em", fontSize: M, "&:hover": { color: D }, "&:disabled": { opacity: 0.25, pointerEvents: "none" } }, "&-view": { flex: "auto", fontWeight: z, lineHeight: n(x), "> button": { color: "inherit", fontWeight: "inherit", verticalAlign: "top", "&:not(:first-child)": { marginInlineStart: l }, "&:hover": { color: u } } } }, "&-prev-icon,\n        &-next-icon,\n        &-super-prev-icon,\n        &-super-next-icon": { position: "relative", width: a, height: a, "&::before": { position: "absolute", top: 0, insetInlineStart: 0, width: a, height: a, border: "0 solid currentcolor", borderBlockWidth: `${n(h)} 0`, borderInlineWidth: `${n(h)} 0`, content: '""' } }, "&-super-prev-icon,\n        &-super-next-icon": { "&::after": { position: "absolute", top: T, insetInlineStart: T, display: "inline-block", width: a, height: a, border: "0 solid currentcolor", borderBlockWidth: `${n(h)} 0`, borderInlineWidth: `${n(h)} 0`, content: '""' } }, "&-prev-icon, &-super-prev-icon": { transform: "rotate(-45deg)" }, "&-next-icon, &-super-next-icon": { transform: "rotate(135deg)" }, "&-content": { width: "100%", tableLayout: "fixed", borderCollapse: "collapse", "th, td": { position: "relative", minWidth: C, fontWeight: "normal" }, th: { height: t.calc(C).add(t.calc(I).mul(2)).equal(), color: S, verticalAlign: "middle" } }, "&-cell": Object.assign({ padding: `${n(I)} 0`, color: R, cursor: "pointer", "&-in-view": { color: S } }, G(t)), "&-decade-panel,\n        &-year-panel,\n        &-quarter-panel,\n        &-month-panel": { [`${e}-content`]: { height: t.calc(j).mul(4).equal() }, [o]: { padding: `0 ${n(l)}` } }, "&-quarter-panel": { [`${e}-content`]: { height: L } }, "&-decade-panel": { [o]: { padding: `0 ${n(t.calc(l).div(2).equal())}` }, [`${e}-cell::before`]: { display: "none" } }, "&-year-panel,\n        &-quarter-panel,\n        &-month-panel": { [`${e}-body`]: { padding: `0 ${n(l)}` }, [o]: { width: i } }, "&-date-panel": { [`${e}-body`]: { padding: `${n(l)} ${n(B)}` }, [`${e}-content th`]: { boxSizing: "border-box", padding: 0 } }, "&-week-panel": { [`${e}-cell`]: { [`&:hover ${o},
            &-selected ${o},
            ${o}`]: { background: "transparent !important" } }, "&-row": { td: { "&:before": { transition: `background ${m}` }, "&:first-child:before": { borderStartStartRadius: $, borderEndStartRadius: $ }, "&:last-child:before": { borderStartEndRadius: $, borderEndEndRadius: $ } }, "&:hover td:before": { background: H }, "&-range-start td, &-range-end td, &-selected td, &-hover td": { [`&${r}`]: { "&:before": { background: u }, [`&${e}-cell-week`]: { color: new q(W).setA(0.5).toHexString() }, [o]: { color: W } } }, "&-range-hover td:before": { background: y } } }, "&-week-panel, &-date-panel-show-week": { [`${e}-body`]: { padding: `${n(l)} ${n(g)}` }, [`${e}-content th`]: { width: "auto" } }, "&-datetime-panel": { display: "flex", [`${e}-time-panel`]: { borderInlineStart: `${n(b)} ${s} ${k}` }, [`${e}-date-panel,
          ${e}-time-panel`]: { transition: `opacity ${X}` }, "&-active": { [`${e}-date-panel,
            ${e}-time-panel`]: { opacity: 0.3, "&-active": { opacity: 1 } } } }, "&-time-panel": { width: "auto", minWidth: "auto", [`${e}-content`]: { display: "flex", flex: "auto", height: Y }, "&-column": { flex: "1 0 auto", width: w, margin: `${n(d)} 0`, padding: 0, overflowY: "hidden", textAlign: "start", listStyle: "none", transition: `background ${m}`, overflowX: "hidden", "&::-webkit-scrollbar": { width: 8, backgroundColor: "transparent" }, "&::-webkit-scrollbar-thumb": { backgroundColor: t.colorTextTertiary, borderRadius: t.borderRadiusSM }, "&": { scrollbarWidth: "thin", scrollbarColor: `${t.colorTextTertiary} transparent` }, "&::after": { display: "block", height: `calc(100% - ${n(f)})`, content: '""' }, "&:not(:first-child)": { borderInlineStart: `${n(b)} ${s} ${k}` }, "&-active": { background: new q(y).setA(0.2).toHexString() }, "&:hover": { overflowY: "auto" }, "> li": { margin: 0, padding: 0, [`&${e}-time-panel-cell`]: { marginInline: E, [`${e}-time-panel-cell-inner`]: { display: "block", width: t.calc(w).sub(t.calc(E).mul(2)).equal(), height: f, margin: 0, paddingBlock: 0, paddingInlineEnd: 0, paddingInlineStart: t.calc(w).sub(f).div(2).equal(), color: S, lineHeight: n(f), borderRadius: $, cursor: "pointer", transition: `background ${m}`, "&:hover": { background: H } }, "&-selected": { [`${e}-time-panel-cell-inner`]: { background: y } }, "&-disabled": { [`${e}-time-panel-cell-inner`]: { color: R, background: "transparent", cursor: "not-allowed" } } } } } } } };
}, ie = (t) => {
  const { componentCls: e, textHeight: r, lineWidth: o, paddingSM: i, antCls: a, colorPrimary: p, cellActiveWithRangeBg: g, colorPrimaryBorder: l, lineType: d, colorSplit: c } = t;
  return { [`${e}-dropdown`]: { [`${e}-footer`]: { borderTop: `${n(o)} ${d} ${c}`, "&-extra": { padding: `0 ${n(i)}`, lineHeight: n(t.calc(r).sub(t.calc(o).mul(2)).equal()), textAlign: "start", "&:not(:last-child)": { borderBottom: `${n(o)} ${d} ${c}` } } }, [`${e}-panels + ${e}-footer ${e}-ranges`]: { justifyContent: "space-between" }, [`${e}-ranges`]: { marginBlock: 0, paddingInline: n(i), overflow: "hidden", textAlign: "start", listStyle: "none", display: "flex", justifyContent: "center", alignItems: "center", "> li": { lineHeight: n(t.calc(r).sub(t.calc(o).mul(2)).equal()), display: "inline-block" }, [`${e}-now-btn-disabled`]: { pointerEvents: "none", color: t.colorTextDisabled }, [`${e}-preset > ${a}-tag-blue`]: { color: p, background: g, borderColor: l, cursor: "pointer" }, [`${e}-ok`]: { paddingBlock: t.calc(o).mul(2).equal(), marginInlineStart: "auto" } } } };
};
export {
  ie as default,
  re as genPanelStyle
};
