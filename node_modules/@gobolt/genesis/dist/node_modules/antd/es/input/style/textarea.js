import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as e } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as r } from "../../theme/util/genStyleUtils.js";
import { initInputToken as a, initComponentToken as p } from "./token.js";
const l = (n) => {
  const { componentCls: t, paddingLG: o } = n, i = `${t}-textarea`;
  return { [i]: { position: "relative", "&-show-count": { [`> ${t}`]: { height: "100%" }, [`${t}-data-count`]: { position: "absolute", bottom: n.calc(n.fontSize).mul(n.lineHeight).mul(-1).equal(), insetInlineEnd: 0, color: n.colorTextDescription, whiteSpace: "nowrap", pointerEvents: "none" } }, [`
        &-allow-clear > ${t},
        &-affix-wrapper${i}-has-feedback ${t}
      `]: { paddingInlineEnd: o }, [`&-affix-wrapper${t}-affix-wrapper`]: { padding: 0, [`> textarea${t}`]: { fontSize: "inherit", border: "none", outline: "none", background: "transparent", minHeight: n.calc(n.controlHeight).sub(n.calc(n.lineWidth).mul(2)).equal(), "&:focus": { boxShadow: "none !important" } }, [`${t}-suffix`]: { margin: 0, "> *:not(:last-child)": { marginInline: 0 }, [`${t}-clear-icon`]: { position: "absolute", insetInlineEnd: n.paddingInline, insetBlockStart: n.paddingXS }, [`${i}-suffix`]: { position: "absolute", top: 0, insetInlineEnd: n.paddingInline, bottom: 0, zIndex: 1, display: "inline-flex", alignItems: "center", margin: "auto", pointerEvents: "none" } } }, [`&-affix-wrapper${t}-affix-wrapper-sm`]: { [`${t}-suffix`]: { [`${t}-clear-icon`]: { insetInlineEnd: n.paddingInlineSM } } } } };
}, H = r(["Input", "TextArea"], (n) => {
  const t = e(n, a(n));
  return [l(t)];
}, p, { resetFont: !1 });
export {
  H as default,
  p as initComponentToken,
  a as initInputToken
};
