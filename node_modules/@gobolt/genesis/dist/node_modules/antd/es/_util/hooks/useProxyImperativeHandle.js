import { useImperativeHandle as i } from "react";
function s(y, f) {
  return i(y, () => {
    const o = f(), { nativeElement: a } = o;
    return typeof Proxy < "u" ? new Proxy(a, { get: (t, n) => o[n] ? o[n] : Reflect.get(t, n) }) : (r = o, (e = a)._antProxy = e._antProxy || {}, Object.keys(r).forEach((t) => {
      if (!(t in e._antProxy)) {
        const n = e[t];
        e._antProxy[t] = n, e[t] = r[t];
      }
    }), e);
    var e, r;
  });
}
export {
  s as default
};
