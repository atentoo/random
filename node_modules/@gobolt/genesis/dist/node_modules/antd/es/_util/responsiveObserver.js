import h from "react";
import "../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../rc-util/es/warning.js";
import "../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../rc-util/es/ref.js";
import "../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import $ from "../theme/useToken.js";
const d = ["xxl", "xl", "lg", "md", "sm", "xs"];
function k() {
  const [, l] = $(), a = ((e) => ({ xs: `(max-width: ${e.screenXSMax}px)`, sm: `(min-width: ${e.screenSM}px)`, md: `(min-width: ${e.screenMD}px)`, lg: `(min-width: ${e.screenLG}px)`, xl: `(min-width: ${e.screenXL}px)`, xxl: `(min-width: ${e.screenXXL}px)` }))(((e) => {
    const r = e, n = [].concat(d).reverse();
    return n.forEach((t, i) => {
      const s = t.toUpperCase(), m = `screen${s}Min`, o = `screen${s}`;
      if (!(r[m] <= r[o])) throw new Error(`${m}<=${o} fails : !(${r[m]}<=${r[o]})`);
      if (i < n.length - 1) {
        const c = `screen${s}Max`;
        if (!(r[o] <= r[c])) throw new Error(`${o}<=${c} fails : !(${r[o]}<=${r[c]})`);
        const p = `screen${n[i + 1].toUpperCase()}Min`;
        if (!(r[c] <= r[p])) throw new Error(`${c}<=${p} fails : !(${r[c]}<=${r[p]})`);
      }
    }), e;
  })(l));
  return h.useMemo(() => {
    const e = /* @__PURE__ */ new Map();
    let r = -1, n = {};
    return { matchHandlers: {}, dispatch: (t) => (n = t, e.forEach((i) => i(n)), e.size >= 1), subscribe(t) {
      return e.size || this.register(), r += 1, e.set(r, t), t(n), r;
    }, unsubscribe(t) {
      e.delete(t), e.size || this.unregister();
    }, unregister() {
      Object.keys(a).forEach((t) => {
        const i = a[t], s = this.matchHandlers[i];
        s == null || s.mql.removeListener(s == null ? void 0 : s.listener);
      }), e.clear();
    }, register() {
      Object.keys(a).forEach((t) => {
        const i = a[t], s = (o) => {
          let { matches: c } = o;
          this.dispatch(Object.assign(Object.assign({}, n), { [t]: c }));
        }, m = window.matchMedia(i);
        m.addListener(s), this.matchHandlers[i] = { mql: m, listener: s }, s(m);
      });
    }, responsiveMap: a };
  }, [l]);
}
export {
  k as default,
  d as responsiveArray
};
