import * as e from "react";
import y from "../../../rc-util/es/hooks/useMergedState.js";
import E from "../config-provider/index.js";
import { ConfigContext as w } from "../config-provider/context.js";
function I(s) {
  return (n) => e.createElement(E, { theme: { token: { motion: !1, zIndexPopupBase: 0 } } }, e.createElement(s, Object.assign({}, n)));
}
const W = (s, n, R, p, a) => I((o) => {
  const { prefixCls: g, style: v } = o, i = e.useRef(null), [b, j] = e.useState(0), [O, h] = e.useState(0), [c, x] = y(!1, { value: o.open }), { getPrefixCls: C } = e.useContext(w), l = C(p || "select", g);
  e.useEffect(() => {
    if (x(!0), typeof ResizeObserver < "u") {
      const f = new ResizeObserver((t) => {
        const r = t[0].target;
        j(r.offsetHeight + 8), h(r.offsetWidth);
      }), m = setInterval(() => {
        var t;
        const r = a ? `.${a(l)}` : `.${l}-dropdown`, d = (t = i.current) === null || t === void 0 ? void 0 : t.querySelector(r);
        d && (clearInterval(m), f.observe(d));
      }, 10);
      return () => {
        clearInterval(m), f.disconnect();
      };
    }
  }, []);
  let u = Object.assign(Object.assign({}, o), { style: Object.assign(Object.assign({}, v), { margin: 0 }), open: c, visible: c, getPopupContainer: () => i.current });
  n && Object.assign(u, { [n]: { overflow: { adjustX: !1, adjustY: !1 } } });
  const P = { paddingBottom: b, position: "relative", minWidth: O };
  return e.createElement("div", { ref: i, style: P }, e.createElement(s, Object.assign({}, u)));
});
export {
  W as default,
  I as withPureRenderTheme
};
