import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as i } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as t } from "../../theme/util/genStyleUtils.js";
import l from "./compact.js";
const o = (e) => {
  const { componentCls: a, antCls: p } = e;
  return { [a]: { display: "inline-flex", "&-rtl": { direction: "rtl" }, "&-vertical": { flexDirection: "column" }, "&-align": { flexDirection: "column", "&-center": { alignItems: "center" }, "&-start": { alignItems: "flex-start" }, "&-end": { alignItems: "flex-end" }, "&-baseline": { alignItems: "baseline" } }, [`${a}-item:empty`]: { display: "none" }, [`${a}-item > ${p}-badge-not-a-wrapper:only-child`]: { display: "block" } } };
}, r = (e) => {
  const { componentCls: a } = e;
  return { [a]: { "&-gap-row-small": { rowGap: e.spaceGapSmallSize }, "&-gap-row-middle": { rowGap: e.spaceGapMiddleSize }, "&-gap-row-large": { rowGap: e.spaceGapLargeSize }, "&-gap-col-small": { columnGap: e.spaceGapSmallSize }, "&-gap-col-middle": { columnGap: e.spaceGapMiddleSize }, "&-gap-col-large": { columnGap: e.spaceGapLargeSize } } };
}, C = t("Space", (e) => {
  const a = i(e, { spaceGapSmallSize: e.paddingXS, spaceGapMiddleSize: e.padding, spaceGapLargeSize: e.paddingLG });
  return [o(a), r(a), l(a)];
}, () => ({}), { resetStyle: !1 });
export {
  C as default
};
