import * as n from "react";
import _ from "../../../../_virtual/index.js";
import I from "../../../rc-segmented/es/index.js";
import D from "../../../rc-util/es/hooks/useId.js";
import { useComponentConfig as F } from "../config-provider/context.js";
import M from "../config-provider/hooks/useSize.js";
import R from "./style/index.js";
var u = function(t, s) {
  var a = {};
  for (var e in t) Object.prototype.hasOwnProperty.call(t, e) && s.indexOf(e) < 0 && (a[e] = t[e]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function") {
    var o = 0;
    for (e = Object.getOwnPropertySymbols(t); o < e.length; o++) s.indexOf(e[o]) < 0 && Object.prototype.propertyIsEnumerable.call(t, e[o]) && (a[e[o]] = t[e[o]]);
  }
  return a;
};
const V = n.forwardRef((t, s) => {
  const a = D(), { prefixCls: e, className: o, rootClassName: d, block: g, options: m = [], size: y = "middle", style: O, vertical: c, shape: p = "default", name: j = a } = t, v = u(t, ["prefixCls", "className", "rootClassName", "block", "options", "size", "style", "vertical", "shape", "name"]), { getPrefixCls: N, direction: C, className: x, style: E } = F("segmented"), r = N("segmented", e), [$, h, w] = R(r), f = M(y), P = n.useMemo(() => m.map((i) => {
    if (function(l) {
      return typeof l == "object" && !!(l != null && l.icon);
    }(i)) {
      const { icon: l, label: b } = i, z = u(i, ["icon", "label"]);
      return Object.assign(Object.assign({}, z), { label: n.createElement(n.Fragment, null, n.createElement("span", { className: `${r}-item-icon` }, l), b && n.createElement("span", null, b)) });
    }
    return i;
  }), [m, r]), k = _(o, d, x, { [`${r}-block`]: g, [`${r}-sm`]: f === "small", [`${r}-lg`]: f === "large", [`${r}-vertical`]: c, [`${r}-shape-${p}`]: p === "round" }, h, w), S = Object.assign(Object.assign({}, E), O);
  return $(n.createElement(I, Object.assign({}, v, { name: j, className: k, style: S, options: P, ref: s, prefixCls: r, direction: C, vertical: c })));
});
process.env.NODE_ENV !== "production" && (V.displayName = "Segmented");
export {
  V as default
};
