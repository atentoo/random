import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as n } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as $, textEllipsis as b, genFocusOutline as p, genFocusStyle as s } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as m } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as v } from "../../theme/util/genStyleUtils.js";
import u from "./motion.js";
const h = (t) => {
  const { componentCls: o, tabsCardPadding: e, cardBg: i, cardGutter: a, colorBorderSecondary: d, itemSelectedColor: l } = t;
  return { [`${o}-card`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab`]: { margin: 0, padding: e, background: i, border: `${n(t.lineWidth)} ${t.lineType} ${d}`, transition: `all ${t.motionDurationSlow} ${t.motionEaseInOut}` }, [`${o}-tab-active`]: { color: l, background: t.colorBgContainer }, [`${o}-tab-focus`]: Object.assign({}, p(t, -3)), [`${o}-ink-bar`]: { visibility: "hidden" }, [`& ${o}-tab${o}-tab-focus ${o}-tab-btn`]: { outline: "none" } }, [`&${o}-top, &${o}-bottom`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab + ${o}-tab`]: { marginLeft: { _skip_check_: !0, value: n(a) } } } }, [`&${o}-top`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab`]: { borderRadius: `${n(t.borderRadiusLG)} ${n(t.borderRadiusLG)} 0 0` }, [`${o}-tab-active`]: { borderBottomColor: t.colorBgContainer } } }, [`&${o}-bottom`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab`]: { borderRadius: `0 0 ${n(t.borderRadiusLG)} ${n(t.borderRadiusLG)}` }, [`${o}-tab-active`]: { borderTopColor: t.colorBgContainer } } }, [`&${o}-left, &${o}-right`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab + ${o}-tab`]: { marginTop: n(a) } } }, [`&${o}-left`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab`]: { borderRadius: { _skip_check_: !0, value: `${n(t.borderRadiusLG)} 0 0 ${n(t.borderRadiusLG)}` } }, [`${o}-tab-active`]: { borderRightColor: { _skip_check_: !0, value: t.colorBgContainer } } } }, [`&${o}-right`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab`]: { borderRadius: { _skip_check_: !0, value: `0 ${n(t.borderRadiusLG)} ${n(t.borderRadiusLG)} 0` } }, [`${o}-tab-active`]: { borderLeftColor: { _skip_check_: !0, value: t.colorBgContainer } } } } } };
}, _ = (t) => {
  const { componentCls: o, itemHoverColor: e, dropdownEdgeChildVerticalPadding: i } = t;
  return { [`${o}-dropdown`]: Object.assign(Object.assign({}, $(t)), { position: "absolute", top: -9999, left: { _skip_check_: !0, value: -9999 }, zIndex: t.zIndexPopup, display: "block", "&-hidden": { display: "none" }, [`${o}-dropdown-menu`]: { maxHeight: t.tabsDropdownHeight, margin: 0, padding: `${n(i)} 0`, overflowX: "hidden", overflowY: "auto", textAlign: { _skip_check_: !0, value: "left" }, listStyleType: "none", backgroundColor: t.colorBgContainer, backgroundClip: "padding-box", borderRadius: t.borderRadiusLG, outline: "none", boxShadow: t.boxShadowSecondary, "&-item": Object.assign(Object.assign({}, b), { display: "flex", alignItems: "center", minWidth: t.tabsDropdownWidth, margin: 0, padding: `${n(t.paddingXXS)} ${n(t.paddingSM)}`, color: t.colorText, fontWeight: "normal", fontSize: t.fontSize, lineHeight: t.lineHeight, cursor: "pointer", transition: `all ${t.motionDurationSlow}`, "> span": { flex: 1, whiteSpace: "nowrap" }, "&-remove": { flex: "none", marginLeft: { _skip_check_: !0, value: t.marginSM }, color: t.colorTextDescription, fontSize: t.fontSizeSM, background: "transparent", border: 0, cursor: "pointer", "&:hover": { color: e } }, "&:hover": { background: t.controlItemBgHover }, "&-disabled": { "&, &:hover": { color: t.colorTextDisabled, background: "transparent", cursor: "not-allowed" } } }) } }) };
}, k = (t) => {
  const { componentCls: o, margin: e, colorBorderSecondary: i, horizontalMargin: a, verticalItemPadding: d, verticalItemMargin: l, calc: c } = t;
  return { [`${o}-top, ${o}-bottom`]: { flexDirection: "column", [`> ${o}-nav, > div > ${o}-nav`]: { margin: a, "&::before": { position: "absolute", right: { _skip_check_: !0, value: 0 }, left: { _skip_check_: !0, value: 0 }, borderBottom: `${n(t.lineWidth)} ${t.lineType} ${i}`, content: "''" }, [`${o}-ink-bar`]: { height: t.lineWidthBold, "&-animated": { transition: `width ${t.motionDurationSlow}, left ${t.motionDurationSlow},
            right ${t.motionDurationSlow}` } }, [`${o}-nav-wrap`]: { "&::before, &::after": { top: 0, bottom: 0, width: t.controlHeight }, "&::before": { left: { _skip_check_: !0, value: 0 }, boxShadow: t.boxShadowTabsOverflowLeft }, "&::after": { right: { _skip_check_: !0, value: 0 }, boxShadow: t.boxShadowTabsOverflowRight }, [`&${o}-nav-wrap-ping-left::before`]: { opacity: 1 }, [`&${o}-nav-wrap-ping-right::after`]: { opacity: 1 } } } }, [`${o}-top`]: { [`> ${o}-nav,
        > div > ${o}-nav`]: { "&::before": { bottom: 0 }, [`${o}-ink-bar`]: { bottom: 0 } } }, [`${o}-bottom`]: { [`> ${o}-nav, > div > ${o}-nav`]: { order: 1, marginTop: e, marginBottom: 0, "&::before": { top: 0 }, [`${o}-ink-bar`]: { top: 0 } }, [`> ${o}-content-holder, > div > ${o}-content-holder`]: { order: 0 } }, [`${o}-left, ${o}-right`]: { [`> ${o}-nav, > div > ${o}-nav`]: { flexDirection: "column", minWidth: c(t.controlHeight).mul(1.25).equal(), [`${o}-tab`]: { padding: d, textAlign: "center" }, [`${o}-tab + ${o}-tab`]: { margin: l }, [`${o}-nav-wrap`]: { flexDirection: "column", "&::before, &::after": { right: { _skip_check_: !0, value: 0 }, left: { _skip_check_: !0, value: 0 }, height: t.controlHeight }, "&::before": { top: 0, boxShadow: t.boxShadowTabsOverflowTop }, "&::after": { bottom: 0, boxShadow: t.boxShadowTabsOverflowBottom }, [`&${o}-nav-wrap-ping-top::before`]: { opacity: 1 }, [`&${o}-nav-wrap-ping-bottom::after`]: { opacity: 1 } }, [`${o}-ink-bar`]: { width: t.lineWidthBold, "&-animated": { transition: `height ${t.motionDurationSlow}, top ${t.motionDurationSlow}` } }, [`${o}-nav-list, ${o}-nav-operations`]: { flex: "1 0 auto", flexDirection: "column" } } }, [`${o}-left`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-ink-bar`]: { right: { _skip_check_: !0, value: 0 } } }, [`> ${o}-content-holder, > div > ${o}-content-holder`]: { marginLeft: { _skip_check_: !0, value: n(c(t.lineWidth).mul(-1).equal()) }, borderLeft: { _skip_check_: !0, value: `${n(t.lineWidth)} ${t.lineType} ${t.colorBorder}` }, [`> ${o}-content > ${o}-tabpane`]: { paddingLeft: { _skip_check_: !0, value: t.paddingLG } } } }, [`${o}-right`]: { [`> ${o}-nav, > div > ${o}-nav`]: { order: 1, [`${o}-ink-bar`]: { left: { _skip_check_: !0, value: 0 } } }, [`> ${o}-content-holder, > div > ${o}-content-holder`]: { order: 0, marginRight: { _skip_check_: !0, value: c(t.lineWidth).mul(-1).equal() }, borderRight: { _skip_check_: !0, value: `${n(t.lineWidth)} ${t.lineType} ${t.colorBorder}` }, [`> ${o}-content > ${o}-tabpane`]: { paddingRight: { _skip_check_: !0, value: t.paddingLG } } } } };
}, f = (t) => {
  const { componentCls: o, cardPaddingSM: e, cardPaddingLG: i, horizontalItemPaddingSM: a, horizontalItemPaddingLG: d } = t;
  return { [o]: { "&-small": { [`> ${o}-nav`]: { [`${o}-tab`]: { padding: a, fontSize: t.titleFontSizeSM } } }, "&-large": { [`> ${o}-nav`]: { [`${o}-tab`]: { padding: d, fontSize: t.titleFontSizeLG } } } }, [`${o}-card`]: { [`&${o}-small`]: { [`> ${o}-nav`]: { [`${o}-tab`]: { padding: e } }, [`&${o}-bottom`]: { [`> ${o}-nav ${o}-tab`]: { borderRadius: `0 0 ${n(t.borderRadius)} ${n(t.borderRadius)}` } }, [`&${o}-top`]: { [`> ${o}-nav ${o}-tab`]: { borderRadius: `${n(t.borderRadius)} ${n(t.borderRadius)} 0 0` } }, [`&${o}-right`]: { [`> ${o}-nav ${o}-tab`]: { borderRadius: { _skip_check_: !0, value: `0 ${n(t.borderRadius)} ${n(t.borderRadius)} 0` } } }, [`&${o}-left`]: { [`> ${o}-nav ${o}-tab`]: { borderRadius: { _skip_check_: !0, value: `${n(t.borderRadius)} 0 0 ${n(t.borderRadius)}` } } } }, [`&${o}-large`]: { [`> ${o}-nav`]: { [`${o}-tab`]: { padding: i } } } } };
}, S = (t) => {
  const { componentCls: o, itemActiveColor: e, itemHoverColor: i, iconCls: a, tabsHorizontalItemMargin: d, horizontalItemPadding: l, itemSelectedColor: c, itemColor: g } = t, r = `${o}-tab`;
  return { [r]: { position: "relative", WebkitTouchCallout: "none", WebkitTapHighlightColor: "transparent", display: "inline-flex", alignItems: "center", padding: l, fontSize: t.titleFontSize, background: "transparent", border: 0, outline: "none", cursor: "pointer", color: g, "&-btn, &-remove": { "&:focus:not(:focus-visible), &:active": { color: e } }, "&-btn": { outline: "none", transition: `all ${t.motionDurationSlow}`, [`${r}-icon:not(:last-child)`]: { marginInlineEnd: t.marginSM } }, "&-remove": Object.assign({ flex: "none", marginRight: { _skip_check_: !0, value: t.calc(t.marginXXS).mul(-1).equal() }, marginLeft: { _skip_check_: !0, value: t.marginXS }, color: t.colorTextDescription, fontSize: t.fontSizeSM, background: "transparent", border: "none", outline: "none", cursor: "pointer", transition: `all ${t.motionDurationSlow}`, "&:hover": { color: t.colorTextHeading } }, s(t)), "&:hover": { color: i }, [`&${r}-active ${r}-btn`]: { color: c, textShadow: t.tabsActiveTextShadow }, [`&${r}-focus ${r}-btn`]: Object.assign({}, p(t)), [`&${r}-disabled`]: { color: t.colorTextDisabled, cursor: "not-allowed" }, [`&${r}-disabled ${r}-btn, &${r}-disabled ${o}-remove`]: { "&:focus, &:active": { color: t.colorTextDisabled } }, [`& ${r}-remove ${a}`]: { margin: 0 }, [`${a}:not(:last-child)`]: { marginRight: { _skip_check_: !0, value: t.marginSM } } }, [`${r} + ${r}`]: { margin: { _skip_check_: !0, value: d } } };
}, x = (t) => {
  const { componentCls: o, tabsHorizontalItemMarginRTL: e, iconCls: i, cardGutter: a, calc: d } = t;
  return { [`${o}-rtl`]: { direction: "rtl", [`${o}-nav`]: { [`${o}-tab`]: { margin: { _skip_check_: !0, value: e }, [`${o}-tab:last-of-type`]: { marginLeft: { _skip_check_: !0, value: 0 } }, [i]: { marginRight: { _skip_check_: !0, value: 0 }, marginLeft: { _skip_check_: !0, value: n(t.marginSM) } }, [`${o}-tab-remove`]: { marginRight: { _skip_check_: !0, value: n(t.marginXS) }, marginLeft: { _skip_check_: !0, value: n(d(t.marginXXS).mul(-1).equal()) }, [i]: { margin: 0 } } } }, [`&${o}-left`]: { [`> ${o}-nav`]: { order: 1 }, [`> ${o}-content-holder`]: { order: 0 } }, [`&${o}-right`]: { [`> ${o}-nav`]: { order: 0 }, [`> ${o}-content-holder`]: { order: 1 } }, [`&${o}-card${o}-top, &${o}-card${o}-bottom`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-tab + ${o}-tab`]: { marginRight: { _skip_check_: !0, value: a }, marginLeft: { _skip_check_: !0, value: 0 } } } } }, [`${o}-dropdown-rtl`]: { direction: "rtl" }, [`${o}-menu-item`]: { [`${o}-dropdown-rtl`]: { textAlign: { _skip_check_: !0, value: "right" } } } };
}, w = (t) => {
  const { componentCls: o, tabsCardPadding: e, cardHeight: i, cardGutter: a, itemHoverColor: d, itemActiveColor: l, colorBorderSecondary: c } = t;
  return { [o]: Object.assign(Object.assign(Object.assign(Object.assign({}, $(t)), { display: "flex", [`> ${o}-nav, > div > ${o}-nav`]: { position: "relative", display: "flex", flex: "none", alignItems: "center", [`${o}-nav-wrap`]: { position: "relative", display: "flex", flex: "auto", alignSelf: "stretch", overflow: "hidden", whiteSpace: "nowrap", transform: "translate(0)", "&::before, &::after": { position: "absolute", zIndex: 1, opacity: 0, transition: `opacity ${t.motionDurationSlow}`, content: "''", pointerEvents: "none" } }, [`${o}-nav-list`]: { position: "relative", display: "flex", transition: `opacity ${t.motionDurationSlow}` }, [`${o}-nav-operations`]: { display: "flex", alignSelf: "stretch" }, [`${o}-nav-operations-hidden`]: { position: "absolute", visibility: "hidden", pointerEvents: "none" }, [`${o}-nav-more`]: { position: "relative", padding: e, background: "transparent", border: 0, color: t.colorText, "&::after": { position: "absolute", right: { _skip_check_: !0, value: 0 }, bottom: 0, left: { _skip_check_: !0, value: 0 }, height: t.calc(t.controlHeightLG).div(8).equal(), transform: "translateY(100%)", content: "''" } }, [`${o}-nav-add`]: Object.assign({ minWidth: i, marginLeft: { _skip_check_: !0, value: a }, padding: n(t.paddingXS), background: "transparent", border: `${n(t.lineWidth)} ${t.lineType} ${c}`, borderRadius: `${n(t.borderRadiusLG)} ${n(t.borderRadiusLG)} 0 0`, outline: "none", cursor: "pointer", color: t.colorText, transition: `all ${t.motionDurationSlow} ${t.motionEaseInOut}`, "&:hover": { color: d }, "&:active, &:focus:not(:focus-visible)": { color: l } }, s(t, -3)) }, [`${o}-extra-content`]: { flex: "none" }, [`${o}-ink-bar`]: { position: "absolute", background: t.inkBarColor, pointerEvents: "none" } }), S(t)), { [`${o}-content`]: { position: "relative", width: "100%" }, [`${o}-content-holder`]: { flex: "auto", minWidth: 0, minHeight: 0 }, [`${o}-tabpane`]: Object.assign(Object.assign({}, s(t)), { "&-hidden": { display: "none" } }) }), [`${o}-centered`]: { [`> ${o}-nav, > div > ${o}-nav`]: { [`${o}-nav-wrap`]: { [`&:not([class*='${o}-nav-wrap-ping']) > ${o}-nav-list`]: { margin: "auto" } } } } };
}, C = (t) => {
  const o = t.controlHeightLG;
  return { zIndexPopup: t.zIndexPopupBase + 50, cardBg: t.colorFillAlter, cardHeight: o, cardPadding: `${(o - Math.round(t.fontSize * t.lineHeight)) / 2 - t.lineWidth}px ${t.padding}px`, cardPaddingSM: `${1.5 * t.paddingXXS}px ${t.padding}px`, cardPaddingLG: `${t.paddingXS}px ${t.padding}px ${1.5 * t.paddingXXS}px`, titleFontSize: t.fontSize, titleFontSizeLG: t.fontSizeLG, titleFontSizeSM: t.fontSize, inkBarColor: t.colorPrimary, horizontalMargin: `0 0 ${t.margin}px 0`, horizontalItemGutter: 32, horizontalItemMargin: "", horizontalItemMarginRTL: "", horizontalItemPadding: `${t.paddingSM}px 0`, horizontalItemPaddingSM: `${t.paddingXS}px 0`, horizontalItemPaddingLG: `${t.padding}px 0`, verticalItemPadding: `${t.paddingXS}px ${t.paddingLG}px`, verticalItemMargin: `${t.margin}px 0 0 0`, itemColor: t.colorText, itemSelectedColor: t.colorPrimary, itemHoverColor: t.colorPrimaryHover, itemActiveColor: t.colorPrimaryActive, cardGutter: t.marginXXS / 2 };
}, q = v("Tabs", (t) => {
  const o = m(t, { tabsCardPadding: t.cardPadding, dropdownEdgeChildVerticalPadding: t.paddingXXS, tabsActiveTextShadow: "0 0 0.25px currentcolor", tabsDropdownHeight: 200, tabsDropdownWidth: 120, tabsHorizontalItemMargin: `0 0 0 ${n(t.horizontalItemGutter)}`, tabsHorizontalItemMarginRTL: `0 0 0 ${n(t.horizontalItemGutter)}` });
  return [f(o), x(o), k(o), _(o), h(o), w(o), u(o)];
}, C);
export {
  q as default,
  C as prepareComponentToken
};
