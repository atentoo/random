import { resetComponent as g, textEllipsis as b } from "../../style/index.js";
import { initMoveMotion as p } from "../../style/motion/move.js";
import { initSlideMotion as l, slideDownOut as u, slideUpOut as $, slideDownIn as m, slideUpIn as S } from "../../style/motion/slide.js";
const c = (o) => {
  const { optionHeight: t, optionFontSize: i, optionLineHeight: n, optionPadding: a } = o;
  return { position: "relative", display: "block", minHeight: t, padding: a, color: o.colorText, fontWeight: "normal", fontSize: i, lineHeight: n, boxSizing: "border-box" };
}, v = (o) => {
  const { antCls: t, componentCls: i } = o, n = `${i}-item`, a = `&${t}-slide-up-enter${t}-slide-up-enter-active`, d = `&${t}-slide-up-appear${t}-slide-up-appear-active`, r = `&${t}-slide-up-leave${t}-slide-up-leave-active`, e = `${i}-dropdown-placement-`, s = `${n}-option-selected`;
  return [{ [`${i}-dropdown`]: Object.assign(Object.assign({}, g(o)), { position: "absolute", top: -9999, zIndex: o.zIndexPopup, boxSizing: "border-box", padding: o.paddingXXS, overflow: "hidden", fontSize: o.fontSize, fontVariant: "initial", backgroundColor: o.colorBgElevated, borderRadius: o.borderRadiusLG, outline: "none", boxShadow: o.boxShadowSecondary, [`
          ${a}${e}bottomLeft,
          ${d}${e}bottomLeft
        `]: { animationName: S }, [`
          ${a}${e}topLeft,
          ${d}${e}topLeft,
          ${a}${e}topRight,
          ${d}${e}topRight
        `]: { animationName: m }, [`${r}${e}bottomLeft`]: { animationName: $ }, [`
          ${r}${e}topLeft,
          ${r}${e}topRight
        `]: { animationName: u }, "&-hidden": { display: "none" }, [n]: Object.assign(Object.assign({}, c(o)), { cursor: "pointer", transition: `background ${o.motionDurationSlow} ease`, borderRadius: o.borderRadiusSM, "&-group": { color: o.colorTextDescription, fontSize: o.fontSizeSM, cursor: "default" }, "&-option": { display: "flex", "&-content": Object.assign({ flex: "auto" }, b), "&-state": { flex: "none", display: "flex", alignItems: "center" }, [`&-active:not(${n}-option-disabled)`]: { backgroundColor: o.optionActiveBg }, [`&-selected:not(${n}-option-disabled)`]: { color: o.optionSelectedColor, fontWeight: o.optionSelectedFontWeight, backgroundColor: o.optionSelectedBg, [`${n}-option-state`]: { color: o.colorPrimary } }, "&-disabled": { [`&${n}-option-selected`]: { backgroundColor: o.colorBgContainerDisabled }, color: o.colorTextDisabled, cursor: "not-allowed" }, "&-grouped": { paddingInlineStart: o.calc(o.controlPaddingHorizontal).mul(2).equal() } }, "&-empty": Object.assign(Object.assign({}, c(o)), { color: o.colorTextDisabled }) }), [`${s}:has(+ ${s})`]: { borderEndStartRadius: 0, borderEndEndRadius: 0, [`& + ${s}`]: { borderStartStartRadius: 0, borderStartEndRadius: 0 } }, "&-rtl": { direction: "rtl" } }) }, l(o, "slide-up"), l(o, "slide-down"), p(o, "move-up"), p(o, "move-down")];
};
export {
  v as default
};
