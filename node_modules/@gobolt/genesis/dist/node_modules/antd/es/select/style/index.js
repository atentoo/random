import { resetComponent as a, resetIcon as l, textEllipsis as i } from "../../style/index.js";
import { genCompactItemStyle as s } from "../../style/compact-item.js";
import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as c } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as p } from "../../theme/util/genStyleUtils.js";
import m from "./dropdown.js";
import d from "./multiple.js";
import u from "./single.js";
import { prepareComponentToken as g } from "./token.js";
import f from "./variants.js";
const h = (t) => {
  const { componentCls: n } = t;
  return { position: "relative", transition: `all ${t.motionDurationMid} ${t.motionEaseInOut}`, input: { cursor: "pointer" }, [`${n}-show-search&`]: { cursor: "text", input: { cursor: "auto", color: "inherit", height: "100%" } }, [`${n}-disabled&`]: { cursor: "not-allowed", input: { cursor: "not-allowed" } } };
}, S = (t) => {
  const { componentCls: n } = t;
  return { [`${n}-selection-search-input`]: { margin: 0, padding: 0, background: "transparent", border: "none", outline: "none", appearance: "none", fontFamily: "inherit", "&::-webkit-search-cancel-button": { display: "none", "-webkit-appearance": "none" } } };
}, $ = (t) => {
  const { antCls: n, componentCls: e, inputPaddingHorizontalBase: o, iconCls: r } = t;
  return { [e]: Object.assign(Object.assign({}, a(t)), { position: "relative", display: "inline-flex", cursor: "pointer", [`&:not(${e}-customize-input) ${e}-selector`]: Object.assign(Object.assign({}, h(t)), S(t)), [`${e}-selection-item`]: Object.assign(Object.assign({ flex: 1, fontWeight: "normal", position: "relative", userSelect: "none" }, i), { [`> ${n}-typography`]: { display: "inline" } }), [`${e}-selection-placeholder`]: Object.assign(Object.assign({}, i), { flex: 1, color: t.colorTextPlaceholder, pointerEvents: "none" }), [`${e}-arrow`]: Object.assign(Object.assign({}, l()), { position: "absolute", top: "50%", insetInlineStart: "auto", insetInlineEnd: o, height: t.fontSizeIcon, marginTop: t.calc(t.fontSizeIcon).mul(-1).div(2).equal(), color: t.colorTextQuaternary, fontSize: t.fontSizeIcon, lineHeight: 1, textAlign: "center", pointerEvents: "none", display: "flex", alignItems: "center", transition: `opacity ${t.motionDurationSlow} ease`, [r]: { verticalAlign: "top", transition: `transform ${t.motionDurationSlow}`, "> svg": { verticalAlign: "top" }, [`&:not(${e}-suffix)`]: { pointerEvents: "auto" } }, [`${e}-disabled &`]: { cursor: "not-allowed" }, "> *:not(:last-child)": { marginInlineEnd: 8 } }), [`${e}-selection-wrap`]: { display: "flex", width: "100%", position: "relative", minWidth: 0, "&:after": { content: '"\\a0"', width: 0, overflow: "hidden" } }, [`${e}-prefix`]: { flex: "none", marginInlineEnd: t.selectAffixPadding }, [`${e}-clear`]: { position: "absolute", top: "50%", insetInlineStart: "auto", insetInlineEnd: o, zIndex: 1, display: "inline-block", width: t.fontSizeIcon, height: t.fontSizeIcon, marginTop: t.calc(t.fontSizeIcon).mul(-1).div(2).equal(), color: t.colorTextQuaternary, fontSize: t.fontSizeIcon, fontStyle: "normal", lineHeight: 1, textAlign: "center", textTransform: "none", cursor: "pointer", opacity: 0, transition: `color ${t.motionDurationMid} ease, opacity ${t.motionDurationSlow} ease`, textRendering: "auto", "&:before": { display: "block" }, "&:hover": { color: t.colorTextTertiary } }, [`&:hover ${e}-clear`]: { opacity: 1, background: t.colorBgBase, borderRadius: "50%" } }), [`${e}-status`]: { "&-error, &-warning, &-success, &-validating": { [`&${e}-has-feedback`]: { [`${e}-clear`]: { insetInlineEnd: t.calc(o).add(t.fontSize).add(t.paddingXS).equal() } } } } };
}, b = (t) => {
  const { componentCls: n } = t;
  return [{ [n]: { [`&${n}-in-form-item`]: { width: "100%" } } }, $(t), u(t), d(t), m(t), { [`${n}-rtl`]: { direction: "rtl" } }, s(t, { borderElCls: `${n}-selector`, focusElCls: `${n}-focused` })];
}, L = p("Select", (t, n) => {
  let { rootPrefixCls: e } = n;
  const o = c(t, { rootPrefixCls: e, inputPaddingHorizontalBase: t.calc(t.paddingSM).sub(1).equal(), multipleSelectItemHeight: t.multipleItemHeight, selectHeight: t.controlHeight });
  return [b(o), f(o)];
}, g, { unitless: { optionLineHeight: !0, optionSelectedFontWeight: !0 } });
export {
  L as default
};
