import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as t } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
const s = (o, r) => {
  const { componentCls: e, antCls: l, controlOutlineWidth: u } = o;
  return { [`&:not(${e}-customize-input) ${e}-selector`]: { border: `${t(o.lineWidth)} ${o.lineType} ${r.borderColor}`, background: o.selectorBg }, [`&:not(${e}-disabled):not(${e}-customize-input):not(${l}-pagination-size-changer)`]: { [`&:hover ${e}-selector`]: { borderColor: r.hoverBorderHover }, [`${e}-focused& ${e}-selector`]: { borderColor: r.activeBorderColor, boxShadow: `0 0 0 ${t(u)} ${r.activeOutlineColor}`, outline: 0 }, [`${e}-prefix`]: { color: r.color } } };
}, n = (o, r) => ({ [`&${o.componentCls}-status-${r.status}`]: Object.assign({}, s(o, r)) }), g = (o) => ({ "&-outlined": Object.assign(Object.assign(Object.assign(Object.assign({}, s(o, { borderColor: o.colorBorder, hoverBorderHover: o.hoverBorderColor, activeBorderColor: o.activeBorderColor, activeOutlineColor: o.activeOutlineColor, color: o.colorText })), n(o, { status: "error", borderColor: o.colorError, hoverBorderHover: o.colorErrorHover, activeBorderColor: o.colorError, activeOutlineColor: o.colorErrorOutline, color: o.colorError })), n(o, { status: "warning", borderColor: o.colorWarning, hoverBorderHover: o.colorWarningHover, activeBorderColor: o.colorWarning, activeOutlineColor: o.colorWarningOutline, color: o.colorWarning })), { [`&${o.componentCls}-disabled`]: { [`&:not(${o.componentCls}-customize-input) ${o.componentCls}-selector`]: { background: o.colorBgContainerDisabled, color: o.colorTextDisabled } }, [`&${o.componentCls}-multiple ${o.componentCls}-selection-item`]: { background: o.multipleItemBg, border: `${t(o.lineWidth)} ${o.lineType} ${o.multipleItemBorderColor}` } }) }), a = (o, r) => {
  const { componentCls: e, antCls: l } = o;
  return { [`&:not(${e}-customize-input) ${e}-selector`]: { background: r.bg, border: `${t(o.lineWidth)} ${o.lineType} transparent`, color: r.color }, [`&:not(${e}-disabled):not(${e}-customize-input):not(${l}-pagination-size-changer)`]: { [`&:hover ${e}-selector`]: { background: r.hoverBg }, [`${e}-focused& ${e}-selector`]: { background: o.selectorBg, borderColor: r.activeBorderColor, outline: 0 } } };
}, i = (o, r) => ({ [`&${o.componentCls}-status-${r.status}`]: Object.assign({}, a(o, r)) }), p = (o) => ({ "&-filled": Object.assign(Object.assign(Object.assign(Object.assign({}, a(o, { bg: o.colorFillTertiary, hoverBg: o.colorFillSecondary, activeBorderColor: o.activeBorderColor, color: o.colorText })), i(o, { status: "error", bg: o.colorErrorBg, hoverBg: o.colorErrorBgHover, activeBorderColor: o.colorError, color: o.colorError })), i(o, { status: "warning", bg: o.colorWarningBg, hoverBg: o.colorWarningBgHover, activeBorderColor: o.colorWarning, color: o.colorWarning })), { [`&${o.componentCls}-disabled`]: { [`&:not(${o.componentCls}-customize-input) ${o.componentCls}-selector`]: { borderColor: o.colorBorder, background: o.colorBgContainerDisabled, color: o.colorTextDisabled } }, [`&${o.componentCls}-multiple ${o.componentCls}-selection-item`]: { background: o.colorBgContainer, border: `${t(o.lineWidth)} ${o.lineType} ${o.colorSplit}` } }) }), C = (o) => ({ "&-borderless": { [`${o.componentCls}-selector`]: { background: "transparent", border: `${t(o.lineWidth)} ${o.lineType} transparent` }, [`&${o.componentCls}-disabled`]: { [`&:not(${o.componentCls}-customize-input) ${o.componentCls}-selector`]: { color: o.colorTextDisabled } }, [`&${o.componentCls}-multiple ${o.componentCls}-selection-item`]: { background: o.multipleItemBg, border: `${t(o.lineWidth)} ${o.lineType} ${o.multipleItemBorderColor}` }, [`&${o.componentCls}-status-error`]: { [`${o.componentCls}-prefix, ${o.componentCls}-selection-item`]: { color: o.colorError } }, [`&${o.componentCls}-status-warning`]: { [`${o.componentCls}-prefix, ${o.componentCls}-selection-item`]: { color: o.colorWarning } } } }), d = (o, r) => {
  const { componentCls: e, antCls: l } = o;
  return { [`&:not(${e}-customize-input) ${e}-selector`]: { borderWidth: `0 0 ${t(o.lineWidth)} 0`, borderStyle: `none none ${o.lineType} none`, borderColor: r.borderColor, background: o.selectorBg, borderRadius: 0 }, [`&:not(${e}-disabled):not(${e}-customize-input):not(${l}-pagination-size-changer)`]: { [`&:hover ${e}-selector`]: { borderColor: r.hoverBorderHover }, [`${e}-focused& ${e}-selector`]: { borderColor: r.activeBorderColor, outline: 0 }, [`${e}-prefix`]: { color: r.color } } };
}, c = (o, r) => ({ [`&${o.componentCls}-status-${r.status}`]: Object.assign({}, d(o, r)) }), $ = (o) => ({ "&-underlined": Object.assign(Object.assign(Object.assign(Object.assign({}, d(o, { borderColor: o.colorBorder, hoverBorderHover: o.hoverBorderColor, activeBorderColor: o.activeBorderColor, activeOutlineColor: o.activeOutlineColor, color: o.colorText })), c(o, { status: "error", borderColor: o.colorError, hoverBorderHover: o.colorErrorHover, activeBorderColor: o.colorError, activeOutlineColor: o.colorErrorOutline, color: o.colorError })), c(o, { status: "warning", borderColor: o.colorWarning, hoverBorderHover: o.colorWarningHover, activeBorderColor: o.colorWarning, activeOutlineColor: o.colorWarningOutline, color: o.colorWarning })), { [`&${o.componentCls}-disabled`]: { [`&:not(${o.componentCls}-customize-input) ${o.componentCls}-selector`]: { color: o.colorTextDisabled } }, [`&${o.componentCls}-multiple ${o.componentCls}-selection-item`]: { background: o.multipleItemBg, border: `${t(o.lineWidth)} ${o.lineType} ${o.multipleItemBorderColor}` } }) }), H = (o) => ({ [o.componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, g(o)), p(o)), C(o)), $(o)) });
export {
  H as default
};
