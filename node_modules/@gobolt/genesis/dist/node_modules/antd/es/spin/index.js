import * as s from "react";
import u from "../../../../_virtual/index.js";
import { debounce as F } from "../../../throttle-debounce/esm/index.js";
import { devUseWarning as G } from "../_util/warning.js";
import { useComponentConfig as H } from "../config-provider/context.js";
import U from "./Indicator/index.js";
import W from "./style/index.js";
import J from "./usePercent.js";
var K = function(r, l) {
  var p = {};
  for (var e in r) Object.prototype.hasOwnProperty.call(r, e) && l.indexOf(e) < 0 && (p[e] = r[e]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function") {
    var n = 0;
    for (e = Object.getOwnPropertySymbols(r); n < e.length; n++) l.indexOf(e[n]) < 0 && Object.prototype.propertyIsEnumerable.call(r, e[n]) && (p[e[n]] = r[e[n]]);
  }
  return p;
};
let x;
const C = (r) => {
  var l;
  const { prefixCls: p, spinning: e = !0, delay: n = 0, className: j, rootClassName: g, size: b = "default", tip: m, wrapperClassName: w, style: h, children: f, fullscreen: i = !1, indicator: O, percent: S } = r, E = K(r, ["prefixCls", "spinning", "delay", "className", "rootClassName", "size", "tip", "wrapperClassName", "style", "children", "fullscreen", "indicator", "percent"]), { getPrefixCls: _, direction: D, className: P, style: k, indicator: V } = H("spin"), t = _("spin", p), [z, d, N] = W(t), [o, $] = s.useState(() => e && !function(a, c) {
    return !!a && !!c && !Number.isNaN(Number(c));
  }(e, n)), I = J(o, S);
  s.useEffect(() => {
    if (e) {
      const a = F(n, () => {
        $(!0);
      });
      return a(), () => {
        var c;
        (c = a == null ? void 0 : a.cancel) === null || c === void 0 || c.call(a);
      };
    }
    $(!1);
  }, [n, e]);
  const v = s.useMemo(() => f !== void 0 && !i, [f, i]);
  if (process.env.NODE_ENV !== "production") {
    const a = G("Spin");
    process.env.NODE_ENV !== "production" && a(!m || v || i, "usage", "`tip` only work in nest or fullscreen pattern.");
  }
  const M = u(t, P, { [`${t}-sm`]: b === "small", [`${t}-lg`]: b === "large", [`${t}-spinning`]: o, [`${t}-show-text`]: !!m, [`${t}-rtl`]: D === "rtl" }, j, !i && g, d, N), q = u(`${t}-container`, { [`${t}-blur`]: o }), A = (l = O ?? V) !== null && l !== void 0 ? l : x, B = Object.assign(Object.assign({}, k), h), y = s.createElement("div", Object.assign({}, E, { style: B, className: M, "aria-live": "polite", "aria-busy": o }), s.createElement(U, { prefixCls: t, indicator: A, percent: I }), m && (v || i) ? s.createElement("div", { className: `${t}-text` }, m) : null);
  return z(v ? s.createElement("div", Object.assign({}, E, { className: u(`${t}-nested-loading`, w, d, N) }), o && s.createElement("div", { key: "loading" }, y), s.createElement("div", { className: q, key: "container" }, f)) : i ? s.createElement("div", { className: u(`${t}-fullscreen`, { [`${t}-fullscreen-show`]: o }, g, d, N) }, y) : y);
};
C.setDefaultIndicator = (r) => {
  x = r;
}, process.env.NODE_ENV !== "production" && (C.displayName = "Spin");
export {
  C as default
};
