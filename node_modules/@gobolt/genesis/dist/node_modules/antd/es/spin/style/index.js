import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import n from "../../../../@ant-design/cssinjs/es/Keyframes.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as a } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as r } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as l } from "../../theme/util/genStyleUtils.js";
const s = new n("antSpinMove", { to: { opacity: 1 } }), d = new n("antRotate", { to: { transform: "rotate(405deg)" } }), m = (i) => {
  const { componentCls: o, calc: t } = i;
  return { [o]: Object.assign(Object.assign({}, a(i)), { position: "absolute", display: "none", color: i.colorPrimary, fontSize: 0, textAlign: "center", verticalAlign: "middle", opacity: 0, transition: `transform ${i.motionDurationSlow} ${i.motionEaseInOutCirc}`, "&-spinning": { position: "relative", display: "inline-block", opacity: 1 }, [`${o}-text`]: { fontSize: i.fontSize, paddingTop: t(t(i.dotSize).sub(i.fontSize)).div(2).add(2).equal() }, "&-fullscreen": { position: "fixed", width: "100vw", height: "100vh", backgroundColor: i.colorBgMask, zIndex: i.zIndexPopupBase, inset: 0, display: "flex", alignItems: "center", flexDirection: "column", justifyContent: "center", opacity: 0, visibility: "hidden", transition: `all ${i.motionDurationMid}`, "&-show": { opacity: 1, visibility: "visible" }, [o]: { [`${o}-dot-holder`]: { color: i.colorWhite }, [`${o}-text`]: { color: i.colorTextLightSolid } } }, "&-nested-loading": { position: "relative", [`> div > ${o}`]: { position: "absolute", top: 0, insetInlineStart: 0, zIndex: 4, display: "block", width: "100%", height: "100%", maxHeight: i.contentHeight, [`${o}-dot`]: { position: "absolute", top: "50%", insetInlineStart: "50%", margin: t(i.dotSize).mul(-1).div(2).equal() }, [`${o}-text`]: { position: "absolute", top: "50%", width: "100%", textShadow: `0 1px 2px ${i.colorBgContainer}` }, [`&${o}-show-text ${o}-dot`]: { marginTop: t(i.dotSize).div(2).mul(-1).sub(10).equal() }, "&-sm": { [`${o}-dot`]: { margin: t(i.dotSizeSM).mul(-1).div(2).equal() }, [`${o}-text`]: { paddingTop: t(t(i.dotSizeSM).sub(i.fontSize)).div(2).add(2).equal() }, [`&${o}-show-text ${o}-dot`]: { marginTop: t(i.dotSizeSM).div(2).mul(-1).sub(10).equal() } }, "&-lg": { [`${o}-dot`]: { margin: t(i.dotSizeLG).mul(-1).div(2).equal() }, [`${o}-text`]: { paddingTop: t(t(i.dotSizeLG).sub(i.fontSize)).div(2).add(2).equal() }, [`&${o}-show-text ${o}-dot`]: { marginTop: t(i.dotSizeLG).div(2).mul(-1).sub(10).equal() } } }, [`${o}-container`]: { position: "relative", transition: `opacity ${i.motionDurationSlow}`, "&::after": { position: "absolute", top: 0, insetInlineEnd: 0, bottom: 0, insetInlineStart: 0, zIndex: 10, width: "100%", height: "100%", background: i.colorBgContainer, opacity: 0, transition: `all ${i.motionDurationSlow}`, content: '""', pointerEvents: "none" } }, [`${o}-blur`]: { clear: "both", opacity: 0.5, userSelect: "none", pointerEvents: "none", "&::after": { opacity: 0.4, pointerEvents: "auto" } } }, "&-tip": { color: i.spinDotDefault }, [`${o}-dot-holder`]: { width: "1em", height: "1em", fontSize: i.dotSize, display: "inline-block", transition: `transform ${i.motionDurationSlow} ease, opacity ${i.motionDurationSlow} ease`, transformOrigin: "50% 50%", lineHeight: 1, color: i.colorPrimary, "&-hidden": { transform: "scale(0.3)", opacity: 0 } }, [`${o}-dot-progress`]: { position: "absolute", inset: 0 }, [`${o}-dot`]: { position: "relative", display: "inline-block", fontSize: i.dotSize, width: "1em", height: "1em", "&-item": { position: "absolute", display: "block", width: t(i.dotSize).sub(t(i.marginXXS).div(2)).div(2).equal(), height: t(i.dotSize).sub(t(i.marginXXS).div(2)).div(2).equal(), background: "currentColor", borderRadius: "100%", transform: "scale(0.75)", transformOrigin: "50% 50%", opacity: 0.3, animationName: s, animationDuration: "1s", animationIterationCount: "infinite", animationTimingFunction: "linear", animationDirection: "alternate", "&:nth-child(1)": { top: 0, insetInlineStart: 0, animationDelay: "0s" }, "&:nth-child(2)": { top: 0, insetInlineEnd: 0, animationDelay: "0.4s" }, "&:nth-child(3)": { insetInlineEnd: 0, bottom: 0, animationDelay: "0.8s" }, "&:nth-child(4)": { bottom: 0, insetInlineStart: 0, animationDelay: "1.2s" } }, "&-spin": { transform: "rotate(45deg)", animationName: d, animationDuration: "1.2s", animationIterationCount: "infinite", animationTimingFunction: "linear" }, "&-circle": { strokeLinecap: "round", transition: ["stroke-dashoffset", "stroke-dasharray", "stroke", "stroke-width", "opacity"].map((e) => `${e} ${i.motionDurationSlow} ease`).join(","), fillOpacity: 0, stroke: "currentcolor" }, "&-circle-bg": { stroke: i.colorFillSecondary } }, [`&-sm ${o}-dot`]: { "&, &-holder": { fontSize: i.dotSizeSM } }, [`&-sm ${o}-dot-holder`]: { i: { width: t(t(i.dotSizeSM).sub(t(i.marginXXS).div(2))).div(2).equal(), height: t(t(i.dotSizeSM).sub(t(i.marginXXS).div(2))).div(2).equal() } }, [`&-lg ${o}-dot`]: { "&, &-holder": { fontSize: i.dotSizeLG } }, [`&-lg ${o}-dot-holder`]: { i: { width: t(t(i.dotSizeLG).sub(i.marginXXS)).div(2).equal(), height: t(t(i.dotSizeLG).sub(i.marginXXS)).div(2).equal() } }, [`&${o}-show-text ${o}-text`]: { display: "block" } }) };
}, p = (i) => {
  const { controlHeightLG: o, controlHeight: t } = i;
  return { contentHeight: 400, dotSize: o / 2, dotSizeSM: 0.35 * o, dotSizeLG: t };
}, C = l("Spin", (i) => {
  const o = r(i, { spinDotDefault: i.colorTextDescription });
  return [m(o)];
}, p);
export {
  C as default,
  p as prepareComponentToken
};
