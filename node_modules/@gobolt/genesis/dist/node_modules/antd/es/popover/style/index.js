import { resetComponent as h } from "../../style/index.js";
import { initZoomMotion as x } from "../../style/motion/zoom.js";
import b, { getArrowOffsetToken as $ } from "../../style/placementArrow.js";
import { getArrowToken as v } from "../../style/roundedArrow.js";
import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as w } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as k } from "../../theme/util/genStyleUtils.js";
import { PresetColors as B } from "../../theme/interface/presetColors.js";
const C = (t) => {
  const { componentCls: o, popoverColor: n, titleMinWidth: r, fontWeightStrong: d, innerPadding: e, boxShadowSecondary: p, colorTextHeading: l, borderRadiusLG: s, zIndexPopup: m, titleMarginBottom: g, colorBgElevated: c, popoverBg: i, titleBorderBottom: u, innerContentPadding: f, titlePadding: a } = t;
  return [{ [o]: Object.assign(Object.assign({}, h(t)), { position: "absolute", top: 0, left: { _skip_check_: !0, value: 0 }, zIndex: m, fontWeight: "normal", whiteSpace: "normal", textAlign: "start", cursor: "auto", userSelect: "text", "--valid-offset-x": "var(--arrow-offset-horizontal, var(--arrow-x))", transformOrigin: ["var(--valid-offset-x, 50%)", "var(--arrow-y, 50%)"].join(" "), "--antd-arrow-background-color": c, width: "max-content", maxWidth: "100vw", "&-rtl": { direction: "rtl" }, "&-hidden": { display: "none" }, [`${o}-content`]: { position: "relative" }, [`${o}-inner`]: { backgroundColor: i, backgroundClip: "padding-box", borderRadius: s, boxShadow: p, padding: e }, [`${o}-title`]: { minWidth: r, marginBottom: g, color: l, fontWeight: d, borderBottom: u, padding: a }, [`${o}-inner-content`]: { color: n, padding: f } }) }, b(t, "var(--antd-arrow-background-color)"), { [`${o}-pure`]: { position: "relative", maxWidth: "none", margin: t.sizePopupArrow, display: "inline-block", [`${o}-content`]: { display: "inline-block" } } }];
}, S = (t) => {
  const { componentCls: o } = t;
  return { [o]: B.map((n) => {
    const r = t[`${n}6`];
    return { [`&${o}-${n}`]: { "--antd-arrow-background-color": r, [`${o}-inner`]: { backgroundColor: r }, [`${o}-arrow`]: { background: "transparent" } } };
  }) };
}, P = (t) => {
  const { lineWidth: o, controlHeight: n, fontHeight: r, padding: d, wireframe: e, zIndexPopupBase: p, borderRadiusLG: l, marginXS: s, lineType: m, colorSplit: g, paddingSM: c } = t, i = n - r, u = i / 2, f = i / 2 - o, a = d;
  return Object.assign(Object.assign(Object.assign({ titleMinWidth: 177, zIndexPopup: p + 30 }, v(t)), $({ contentRadius: l, limitVerticalRadius: !0 })), { innerPadding: e ? 0 : 12, titleMarginBottom: e ? 0 : s, titlePadding: e ? `${u}px ${a}px ${f}px` : 0, titleBorderBottom: e ? `${o}px ${m} ${g}` : "none", innerContentPadding: e ? `${c}px ${a}px` : 0 });
}, J = k("Popover", (t) => {
  const { colorBgElevated: o, colorText: n } = t, r = w(t, { popoverBg: o, popoverColor: n });
  return [C(r), S(r), x(r, "zoom-big")];
}, P, { resetStyle: !1, deprecatedTokens: [["width", "titleMinWidth"], ["minWidth", "titleMinWidth"]] });
export {
  J as default,
  P as prepareComponentToken
};
