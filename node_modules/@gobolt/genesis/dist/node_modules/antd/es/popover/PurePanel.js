import * as n from "react";
import p from "../../../../_virtual/index.js";
import d from "../../../rc-tooltip/es/Popup.js";
import "../../../@rc-component/trigger/es/index.js";
import "../../../rc-util/es/hooks/useId.js";
import { getRenderPropValue as i } from "../_util/getRenderPropValue.js";
import "../config-provider/index.js";
import y from "./style/index.js";
import { ConfigContext as O } from "../config-provider/context.js";
var C = function(r, l) {
  var t = {};
  for (var e in r) Object.prototype.hasOwnProperty.call(r, e) && l.indexOf(e) < 0 && (t[e] = r[e]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function") {
    var a = 0;
    for (e = Object.getOwnPropertySymbols(r); a < e.length; a++) l.indexOf(e[a]) < 0 && Object.prototype.propertyIsEnumerable.call(r, e[a]) && (t[e[a]] = r[e[a]]);
  }
  return t;
};
const v = (r) => {
  let { title: l, content: t, prefixCls: e } = r;
  return l || t ? n.createElement(n.Fragment, null, l && n.createElement("div", { className: `${e}-title` }, l), t && n.createElement("div", { className: `${e}-inner-content` }, t)) : null;
}, b = (r) => {
  const { hashId: l, prefixCls: t, className: e, style: a, placement: o = "top", title: s, content: m, children: c } = r, f = i(s), u = i(m), x = p(l, t, `${t}-pure`, `${t}-placement-${o}`, e);
  return n.createElement("div", { className: x, style: a }, n.createElement("div", { className: `${t}-arrow` }), n.createElement(d, Object.assign({}, r, { className: l, prefixCls: t }), c || n.createElement(v, { prefixCls: t, title: f, content: u })));
}, I = (r) => {
  const { prefixCls: l, className: t } = r, e = C(r, ["prefixCls", "className"]), { getPrefixCls: a } = n.useContext(O), o = a("popover", l), [s, m, c] = y(o);
  return s(n.createElement(b, Object.assign({}, e, { prefixCls: o, hashId: m, className: p(t, c) })));
};
export {
  v as Overlay,
  b as RawPurePanel,
  I as default
};
