import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as o } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
const z = (d) => {
  const { componentCls: t, lineWidth: e, lineType: l, tableBorderColor: i, tableHeaderBg: b, tablePaddingVertical: $, tablePaddingHorizontal: m, calc: n } = d, r = `${o(e)} ${l} ${i}`, a = (p, c, s) => ({ [`&${t}-${p}`]: { [`> ${t}-container`]: { [`> ${t}-content, > ${t}-body`]: { "\n            > table > tbody > tr > th,\n            > table > tbody > tr > td\n          ": { [`> ${t}-expanded-row-fixed`]: { margin: `${o(n(c).mul(-1).equal())}
              ${o(n(n(s).add(e)).mul(-1).equal())}` } } } } } });
  return { [`${t}-wrapper`]: { [`${t}${t}-bordered`]: Object.assign(Object.assign(Object.assign({ [`> ${t}-title`]: { border: r, borderBottom: 0 }, [`> ${t}-container`]: { borderInlineStart: r, borderTop: r, [`
            > ${t}-content,
            > ${t}-header,
            > ${t}-body,
            > ${t}-summary
          `]: { "> table": { "\n                > thead > tr > th,\n                > thead > tr > td,\n                > tbody > tr > th,\n                > tbody > tr > td,\n                > tfoot > tr > th,\n                > tfoot > tr > td\n              ": { borderInlineEnd: r }, "> thead": { "> tr:not(:last-child) > th": { borderBottom: r }, "> tr > th::before": { backgroundColor: "transparent !important" } }, "\n                > thead > tr,\n                > tbody > tr,\n                > tfoot > tr\n              ": { [`> ${t}-cell-fix-right-first::after`]: { borderInlineEnd: r } }, "\n                > tbody > tr > th,\n                > tbody > tr > td\n              ": { [`> ${t}-expanded-row-fixed`]: { margin: `${o(n($).mul(-1).equal())} ${o(n(n(m).add(e)).mul(-1).equal())}`, "&::after": { position: "absolute", top: 0, insetInlineEnd: e, bottom: 0, borderInlineEnd: r, content: '""' } } } } } }, [`&${t}-scroll-horizontal`]: { [`> ${t}-container > ${t}-body`]: { "> table > tbody": { [`
                > tr${t}-expanded-row,
                > tr${t}-placeholder
              `]: { "> th, > td": { borderInlineEnd: 0 } } } } } }, a("middle", d.tablePaddingVerticalMiddle, d.tablePaddingHorizontalMiddle)), a("small", d.tablePaddingVerticalSmall, d.tablePaddingHorizontalSmall)), { [`> ${t}-footer`]: { border: r, borderTop: 0 } }), [`${t}-cell`]: { [`${t}-container:first-child`]: { borderTop: 0 }, "&-scrollbar:not([rowspan])": { boxShadow: `0 ${o(e)} 0 ${o(e)} ${b}` } }, [`${t}-bordered ${t}-cell-scrollbar`]: { borderInlineEnd: r } } };
};
export {
  z as default
};
