import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as e } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
const y = (i) => {
  const { componentCls: t, tableExpandColumnWidth: o, calc: l } = i, r = (d, a, n, m) => ({ [`${t}${t}-${d}`]: { fontSize: m, [`
        ${t}-title,
        ${t}-footer,
        ${t}-cell,
        ${t}-thead > tr > th,
        ${t}-tbody > tr > th,
        ${t}-tbody > tr > td,
        tfoot > tr > th,
        tfoot > tr > td
      `]: { padding: `${e(a)} ${e(n)}` }, [`${t}-filter-trigger`]: { marginInlineEnd: e(l(n).div(2).mul(-1).equal()) }, [`${t}-expanded-row-fixed`]: { margin: `${e(l(a).mul(-1).equal())} ${e(l(n).mul(-1).equal())}` }, [`${t}-tbody`]: { [`${t}-wrapper:only-child ${t}`]: { marginBlock: e(l(a).mul(-1).equal()), marginInline: `${e(l(o).sub(n).equal())} ${e(l(n).mul(-1).equal())}` } }, [`${t}-selection-extra`]: { paddingInlineStart: e(l(n).div(4).equal()) } } });
  return { [`${t}-wrapper`]: Object.assign(Object.assign({}, r("middle", i.tablePaddingVerticalMiddle, i.tablePaddingHorizontalMiddle, i.tableFontSizeMiddle)), r("small", i.tablePaddingVerticalSmall, i.tablePaddingHorizontalSmall, i.tableFontSizeSmall)) };
};
export {
  y as default
};
