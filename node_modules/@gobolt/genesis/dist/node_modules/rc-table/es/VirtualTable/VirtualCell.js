import j from "../../../@babel/runtime/helpers/esm/extends.js";
import t from "../../../@babel/runtime/helpers/esm/objectSpread2.js";
import { useContext as q } from "../../../@rc-component/context/es/context.js";
import "../../../rc-util/es/ref.js";
import * as g from "react";
import z from "../../../../_virtual/index.js";
import { getCellProps as A } from "../Body/BodyRow.js";
import B from "../Cell/index.js";
import { GridContext as G } from "./context.js";
function _(e, i, o) {
  return o[e + (i || 1)] - (o[e] || 0);
}
function Y(e) {
  var i = e.rowInfo, o = e.column, f = e.colIndex, v = e.indent, s = e.index, I = e.component, w = e.renderIndex, y = e.record, N = e.style, S = e.className, a = e.inverse, u = e.getHeight, P = o.render, k = o.dataIndex, E = o.className, O = o.width, U = q(G, ["columnsOffset"]).columnsOffset, l = A(i, o, f, v, s), b = l.key, H = l.fixedInfo, M = l.appendCellNode, d = l.additionalCellProps, R = d.style, x = d.colSpan, r = x === void 0 ? 1 : x, C = d.rowSpan, n = C === void 0 ? 1 : C, p = _(f - 1, r, U), V = r > 1 ? O - p : 0, m = t(t(t({}, R), N), {}, { flex: "0 0 ".concat(p, "px"), width: "".concat(p, "px"), marginRight: V, pointerEvents: "auto" }), h = g.useMemo(function() {
    return a ? n <= 1 : r === 0 || n === 0 || n > 1;
  }, [n, r, a]);
  h ? m.visibility = "hidden" : a && (m.height = u == null ? void 0 : u(n));
  var W = h ? function() {
    return null;
  } : P, c = {};
  return n !== 0 && r !== 0 || (c.rowSpan = 1, c.colSpan = 1), g.createElement(B, j({ className: z(E, S), ellipsis: o.ellipsis, align: o.align, scope: o.rowScope, component: I, prefixCls: i.prefixCls, key: b, record: y, index: s, renderIndex: w, dataIndex: k, render: W, shouldCellUpdate: o.shouldCellUpdate }, H, { appendNode: M, additionalProps: t(t({}, d), {}, { style: m }, c) }));
}
export {
  Y as default,
  _ as getColumnWidth
};
