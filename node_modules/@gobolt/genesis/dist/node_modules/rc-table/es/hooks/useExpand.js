import R from "../../../@babel/runtime/helpers/esm/toConsumableArray.js";
import v from "../../../@babel/runtime/helpers/esm/slicedToArray.js";
import g from "../../../@babel/runtime/helpers/esm/typeof.js";
import { warningOnce as I } from "../../../rc-util/es/warning.js";
import * as s from "react";
import { INTERNAL_HOOKS as K } from "../constant.js";
import { findAllChildrenKeys as S, renderExpandIcon as T } from "../utils/expandUtil.js";
import { getExpandableProps as j } from "../utils/legacyUtil.js";
function q(a, o, i) {
  var n = j(a), w = n.expandIcon, c = n.expandedRowKeys, N = n.defaultExpandedRowKeys, _ = n.defaultExpandAllRows, u = n.expandedRowRender, p = n.onExpand, f = n.onExpandedRowsChange, h = n.childrenColumnName, b = w || T, t = h || "children", A = s.useMemo(function() {
    return u ? "row" : !!(a.expandable && a.internalHooks === K && a.expandable.__PARENT_RENDER_ICON__ || o.some(function(e) {
      return e && g(e) === "object" && e[t];
    })) && "nest";
  }, [!!u, o]), O = s.useState(function() {
    return N || (_ ? S(o, i, t) : []);
  }), l = v(O, 2), x = l[0], y = l[1], r = s.useMemo(function() {
    return new Set(c || x || []);
  }, [c, x]), C = s.useCallback(function(e) {
    var d, m = i(e, o.indexOf(e)), E = r.has(m);
    E ? (r.delete(m), d = R(r)) : d = [].concat(R(r), [m]), y(d), p && p(!E, e), f && f(d);
  }, [i, r, o, p, f]);
  return process.env.NODE_ENV !== "production" && u && o.some(function(e) {
    return Array.isArray(e == null ? void 0 : e[t]);
  }) && I(!1, "`expandedRowRender` should not use with nested Table"), [n, A, r, b, t, C];
}
export {
  q as default
};
