import s from "../../../@babel/runtime/helpers/esm/objectSpread2.js";
import * as i from "react";
import k from "../../../../_virtual/index.js";
import { composeRef as j } from "../../../rc-util/es/ref.js";
import { warning as V } from "../../../rc-util/es/warning.js";
var q = function(o, x) {
  var t, y = o.prefixCls, l = o.id, b = o.inputElement, h = o.disabled, w = o.tabIndex, g = o.autoFocus, D = o.autoComplete, r = o.editable, E = o.activeDescendantId, I = o.value, N = o.maxLength, B = o.onKeyDown, L = o.onMouseDown, S = o.onChange, K = o.onPaste, M = o.onCompositionStart, P = o.onCompositionEnd, _ = o.onBlur, p = o.open, F = o.attrs, a = b || i.createElement("input", null), u = a, O = u.ref, e = u.props, c = e.onKeyDown, m = e.onChange, d = e.onMouseDown, f = e.onCompositionStart, C = e.onCompositionEnd, v = e.onBlur, R = e.style;
  return V(!("maxLength" in a.props), "Passing 'maxLength' to input element directly may not work because input in BaseSelect is controlled."), a = i.cloneElement(a, s(s(s({ type: "search" }, e), {}, { id: l, ref: j(x, O), disabled: h, tabIndex: w, autoComplete: D || "off", autoFocus: g, className: k("".concat(y, "-selection-search-input"), (t = a) === null || t === void 0 || (t = t.props) === null || t === void 0 ? void 0 : t.className), role: "combobox", "aria-expanded": p || !1, "aria-haspopup": "listbox", "aria-owns": "".concat(l, "_list"), "aria-autocomplete": "list", "aria-controls": "".concat(l, "_list"), "aria-activedescendant": p ? E : void 0 }, F), {}, { value: r ? I : "", maxLength: N, readOnly: !r, unselectable: r ? null : "on", style: s(s({}, R), {}, { opacity: r ? null : 0 }), onKeyDown: function(n) {
    B(n), c && c(n);
  }, onMouseDown: function(n) {
    L(n), d && d(n);
  }, onChange: function(n) {
    S(n), m && m(n);
  }, onCompositionStart: function(n) {
    M(n), f && f(n);
  }, onCompositionEnd: function(n) {
    P(n), C && C(n);
  }, onPaste: K, onBlur: function(n) {
    _(n), v && v(n);
  } }));
}, z = i.forwardRef(q);
process.env.NODE_ENV !== "production" && (z.displayName = "Input");
export {
  z as default
};
