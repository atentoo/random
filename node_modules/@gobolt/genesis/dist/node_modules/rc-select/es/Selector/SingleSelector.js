import q from "../../../@babel/runtime/helpers/esm/slicedToArray.js";
import * as t from "react";
import A from "../../../rc-util/es/pickAttrs.js";
import U from "./Input.js";
import { getTitle as z } from "../utils/commonUtil.js";
var Q = function(e) {
  var v = e.inputElement, o = e.prefixCls, b = e.id, h = e.inputRef, I = e.disabled, C = e.autoFocus, E = e.autoComplete, x = e.activeDescendantId, r = e.mode, u = e.open, g = e.values, m = e.placeholder, w = e.tabIndex, p = e.showSearch, y = e.searchValue, l = e.activeValue, D = e.maxLength, S = e.onInputKeyDown, N = e.onInputMouseDown, M = e.onInputChange, B = e.onInputPaste, F = e.onInputCompositionStart, K = e.onInputCompositionEnd, L = e.onInputBlur, d = e.title, P = t.useState(!1), i = q(P, 2), V = i[0], f = i[1], n = r === "combobox", R = n || p, a = g[0], s = y || "";
  n && l && !V && (s = l), t.useEffect(function() {
    n && f(!1);
  }, [n, l]);
  var c = !(r !== "combobox" && !u && !p) && !!s, T = d === void 0 ? z(a) : d, j = t.useMemo(function() {
    return a ? null : t.createElement("span", { className: "".concat(o, "-selection-placeholder"), style: c ? { visibility: "hidden" } : void 0 }, m);
  }, [a, c, m, o]);
  return t.createElement("span", { className: "".concat(o, "-selection-wrap") }, t.createElement("span", { className: "".concat(o, "-selection-search") }, t.createElement(U, { ref: h, prefixCls: o, id: b, open: u, inputElement: v, disabled: I, autoFocus: C, autoComplete: E, editable: R, activeDescendantId: x, value: s, onKeyDown: S, onMouseDown: N, onChange: function(k) {
    f(!0), M(k);
  }, onPaste: B, onCompositionStart: F, onCompositionEnd: K, onBlur: L, tabIndex: w, attrs: A(e, !0), maxLength: n ? D : void 0 })), !n && a ? t.createElement("span", { className: "".concat(o, "-selection-item"), title: T, style: c ? { visibility: "hidden" } : void 0 }, a.label) : null, j);
};
export {
  Q as default
};
