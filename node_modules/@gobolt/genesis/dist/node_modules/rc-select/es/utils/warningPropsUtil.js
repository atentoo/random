import C from "../../../@babel/runtime/helpers/esm/typeof.js";
import v from "../../../rc-util/es/Children/toArray.js";
import { warningOnce as n, noteOnce as y } from "../../../rc-util/es/warning.js";
import * as g from "react";
import { isMultiple as N } from "../BaseSelect/index.js";
import { toArray as j } from "./commonUtil.js";
import { convertChildrenToData as z } from "./legacyUtil.js";
function T(e) {
  var o = e.mode, s = e.options, l = e.children, c = e.backfill, r = e.allowClear, u = e.placeholder, d = e.getInputElement, b = e.showSearch, w = e.onSearch, x = e.defaultOpen, O = e.autoFocus, k = e.labelInValue, p = e.value, S = e.inputValue, V = e.optionLabelProp, f = N(o), A = b !== void 0 ? b : f || o === "combobox", h = s || z(l);
  if (n(o !== "tags" || h.every(function(t) {
    return !t.disabled;
  }), "Please avoid setting option to disabled in tags mode since user can always type text as tag."), o === "tags" || o === "combobox") {
    var I = h.some(function(t) {
      return t.options ? t.options.some(function(a) {
        return typeof ("value" in a ? a.value : a.key) == "number";
      }) : typeof ("value" in t ? t.value : t.key) == "number";
    });
    n(!I, "`value` of Option should not use number type when `mode` is `tags` or `combobox`.");
  }
  if (n(o !== "combobox" || !V, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly."), n(o === "combobox" || !c, "`backfill` only works with `combobox` mode."), n(o === "combobox" || !d, "`getInputElement` only work with `combobox` mode."), y(o !== "combobox" || !d || !r || !u, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`."), w && !A && o !== "combobox" && o !== "tags" && n(!1, "`onSearch` should work with `showSearch` instead of use alone."), y(!x || O, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed."), p != null) {
    var P = j(p);
    n(!k || P.every(function(t) {
      return C(t) === "object" && ("key" in t || "value" in t);
    }), "`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`"), n(!f || Array.isArray(p), "`value` should be array when `mode` is `multiple` or `tags`");
  }
  if (l) {
    var i = null;
    v(l).some(function(t) {
      if (!g.isValidElement(t) || !t.type) return !1;
      var a = t.type;
      return !a.isSelectOption && (a.isSelectOptGroup ? !v(t.props.children).every(function(m) {
        return !(g.isValidElement(m) && t.type && !m.type.isSelectOption) || (i = m.type, !1);
      }) : (i = a, !0));
    }), i && n(!1, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(i.displayName || i.name || i, "`.")), n(S === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
  }
}
function Y(e, o) {
  e && function s(l) {
    for (var c = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], r = 0; r < l.length; r++) {
      var u = l[r];
      if (u[o == null ? void 0 : o.value] === null) return n(!1, "`value` in Select options should not be `null`."), !0;
      if (!c && Array.isArray(u[o == null ? void 0 : o.options]) && s(u[o == null ? void 0 : o.options], !0)) break;
    }
  }(e);
}
export {
  T as default,
  Y as warningNullOptions
};
