"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const A=require("../../../@babel/runtime/helpers/esm/typeof.cjs"),v=require("../../../rc-util/es/Children/toArray.cjs"),t=require("../../../rc-util/es/warning.cjs"),E=require("react"),I=require("../BaseSelect/index.cjs"),C=require("./commonUtil.cjs"),M=require("./legacyUtil.cjs");function N(e){const n=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(const r in e)if(r!=="default"){const i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,i.get?i:{enumerable:!0,get:()=>e[r]})}}return n.default=e,Object.freeze(n)}const h=N(E);exports.default=function(e){var n=e.mode,r=e.options,i=e.children,s=e.backfill,u=e.allowClear,c=e.placeholder,b=e.getInputElement,m=e.showSearch,y=e.onSearch,w=e.defaultOpen,O=e.autoFocus,S=e.labelInValue,d=e.value,x=e.inputValue,k=e.optionLabelProp,f=I.isMultiple(n),j=m!==void 0?m:f||n==="combobox",g=r||M.convertChildrenToData(i);if(t.warningOnce(n!=="tags"||g.every(function(o){return!o.disabled}),"Please avoid setting option to disabled in tags mode since user can always type text as tag."),n==="tags"||n==="combobox"){var q=g.some(function(o){return o.options?o.options.some(function(a){return typeof("value"in a?a.value:a.key)=="number"}):typeof("value"in o?o.value:o.key)=="number"});t.warningOnce(!q,"`value` of Option should not use number type when `mode` is `tags` or `combobox`.")}if(t.warningOnce(n!=="combobox"||!k,"`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly."),t.warningOnce(n==="combobox"||!s,"`backfill` only works with `combobox` mode."),t.warningOnce(n==="combobox"||!b,"`getInputElement` only work with `combobox` mode."),t.noteOnce(n!=="combobox"||!b||!u||!c,"Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`."),y&&!j&&n!=="combobox"&&n!=="tags"&&t.warningOnce(!1,"`onSearch` should work with `showSearch` instead of use alone."),t.noteOnce(!w||O,"`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed."),d!=null){var P=C.toArray(d);t.warningOnce(!S||P.every(function(o){return A(o)==="object"&&("key"in o||"value"in o)}),"`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`"),t.warningOnce(!f||Array.isArray(d),"`value` should be array when `mode` is `multiple` or `tags`")}if(i){var l=null;v(i).some(function(o){if(!h.isValidElement(o)||!o.type)return!1;var a=o.type;return!a.isSelectOption&&(a.isSelectOptGroup?!v(o.props.children).every(function(p){return!(h.isValidElement(p)&&o.type&&!p.type.isSelectOption)||(l=p.type,!1)}):(l=a,!0))}),l&&t.warningOnce(!1,"`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(l.displayName||l.name||l,"`.")),t.warningOnce(x===void 0,"`inputValue` is deprecated, please use `searchValue` instead.")}},exports.warningNullOptions=function(e,n){e&&function r(i){for(var s=arguments.length>1&&arguments[1]!==void 0&&arguments[1],u=0;u<i.length;u++){var c=i[u];if(c[n==null?void 0:n.value]===null)return t.warningOnce(!1,"`value` in Select options should not be `null`."),!0;if(!s&&Array.isArray(c[n==null?void 0:n.options])&&r(c[n==null?void 0:n.options],!0))break}}(e)};
