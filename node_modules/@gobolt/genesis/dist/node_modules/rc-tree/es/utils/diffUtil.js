function l() {
  var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], t = r.length, a = n.length;
  if (Math.abs(t - a) !== 1) return { add: !1, key: null };
  function u(i, d) {
    var e = /* @__PURE__ */ new Map();
    i.forEach(function(f) {
      e.set(f, !0);
    });
    var g = d.filter(function(f) {
      return !e.has(f);
    });
    return g.length === 1 ? g[0] : null;
  }
  return t < a ? { add: !0, key: u(r, n) } : { add: !1, key: u(n, r) };
}
function o(r, n, t) {
  var a = r.findIndex(function(e) {
    return e.key === t;
  }), u = r[a + 1], i = n.findIndex(function(e) {
    return e.key === t;
  });
  if (u) {
    var d = n.findIndex(function(e) {
      return e.key === u.key;
    });
    return n.slice(i + 1, d);
  }
  return n.slice(i + 1);
}
export {
  l as findExpandedKeys,
  o as getExpandRange
};
