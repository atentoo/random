import u from "./getPrototypeOf.js";
import i from "./setPrototypeOf.js";
import f from "./isNativeFunction.js";
import a from "./construct.js";
function o(n) {
  var t = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return o = function(r) {
    if (r === null || !f(r)) return r;
    if (typeof r != "function") throw new TypeError("Super expression must either be null or a function");
    if (t !== void 0) {
      if (t.has(r)) return t.get(r);
      t.set(r, e);
    }
    function e() {
      return a(r, arguments, u(this).constructor);
    }
    return e.prototype = Object.create(r.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), i(e, r);
  }, o(n);
}
export {
  o as default
};
