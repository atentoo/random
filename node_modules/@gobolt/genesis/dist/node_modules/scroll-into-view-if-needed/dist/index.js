import { compute as s } from "../../compute-scroll-into-view/dist/index.js";
function d(e, o) {
  if (!e.isConnected || !((n) => {
    let t = n;
    for (; t && t.parentNode; ) {
      if (t.parentNode === document) return !0;
      t = t.parentNode instanceof ShadowRoot ? t.parentNode.host : t.parentNode;
    }
    return !1;
  })(e)) return;
  const l = ((n) => {
    const t = window.getComputedStyle(n);
    return { top: parseFloat(t.scrollMarginTop) || 0, right: parseFloat(t.scrollMarginRight) || 0, bottom: parseFloat(t.scrollMarginBottom) || 0, left: parseFloat(t.scrollMarginLeft) || 0 };
  })(e);
  if (typeof (i = o) == "object" && typeof i.behavior == "function") return o.behavior(s(e, o));
  var i;
  const c = typeof o == "boolean" || o == null ? void 0 : o.behavior;
  for (const { el: n, top: t, left: p } of s(e, ((r) => r === !1 ? { block: "end", inline: "nearest" } : ((a) => a === Object(a) && Object.keys(a).length !== 0)(r) ? r : { block: "start", inline: "nearest" })(o))) {
    const r = t - l.top + l.bottom, a = p - l.left + l.right;
    n.scroll({ top: r, left: a, behavior: c });
  }
}
export {
  d as default
};
