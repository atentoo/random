import { strlen as w, charat as p, trim as x, from as y, substr as j } from "./Utility.js";
var u = 1, a = 1, h = 0, n = 0, e = 0, s = "";
function A(r, t, m, d, b, g, k, v) {
  return { value: r, root: t, parent: m, type: d, props: b, children: g, line: u, column: a, length: k, return: "", siblings: v };
}
function B() {
  return e;
}
function C() {
  return e = n > 0 ? p(s, --n) : 0, a--, e === 10 && (a = 1, u--), e;
}
function c() {
  return e = n < h ? p(s, n++) : 0, a++, e === 10 && (a = 1, u++), e;
}
function i() {
  return p(s, n);
}
function q() {
  return n;
}
function o(r, t) {
  return j(s, r, t);
}
function f(r) {
  switch (r) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function D(r) {
  return u = a = 1, h = w(s = r), n = 0, [];
}
function E(r) {
  return s = "", r;
}
function F(r) {
  return x(o(n - 1, l(r === 91 ? r + 2 : r === 40 ? r + 1 : r)));
}
function G(r) {
  for (; (e = i()) && e < 33; ) c();
  return f(r) > 2 || f(e) > 3 ? "" : " ";
}
function H(r, t) {
  for (; --t && c() && !(e < 48 || e > 102 || e > 57 && e < 65 || e > 70 && e < 97); ) ;
  return o(r, q() + (t < 6 && i() == 32 && c() == 32));
}
function l(r) {
  for (; c(); ) switch (e) {
    case r:
      return n;
    case 34:
    case 39:
      r !== 34 && r !== 39 && l(e);
      break;
    case 40:
      r === 41 && l(r);
      break;
    case 92:
      c();
  }
  return n;
}
function I(r, t) {
  for (; c() && r + e !== 57 && (r + e !== 84 || i() !== 47); ) ;
  return "/*" + o(t, n - 1) + "*" + y(r === 47 ? r : c());
}
function J(r) {
  for (; !f(i()); ) c();
  return o(r, n);
}
export {
  D as alloc,
  q as caret,
  B as char,
  e as character,
  s as characters,
  a as column,
  I as commenter,
  E as dealloc,
  F as delimit,
  l as delimiter,
  H as escaping,
  J as identifier,
  h as length,
  u as line,
  c as next,
  A as node,
  i as peek,
  n as position,
  C as prev,
  o as slice,
  f as token,
  G as whitespace
};
