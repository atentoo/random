import R from "../../../@babel/runtime/helpers/esm/slicedToArray.js";
import * as S from "react";
import { useRef as i, useEffect as b } from "react";
import x from "../utils/CacheMap.js";
function d(o) {
  var a = parseFloat(o);
  return isNaN(a) ? 0 : a;
}
function T(o, a, y) {
  var H = S.useState(0), s = R(H, 2), N = s[0], w = s[1], n = i(/* @__PURE__ */ new Map()), c = i(new x()), u = i(0);
  function m() {
    u.current += 1;
  }
  function g() {
    var f = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
    m();
    var t = function() {
      var l = !1;
      n.current.forEach(function(e, p) {
        if (e && e.offsetParent) {
          var C = e.offsetHeight, v = getComputedStyle(e), E = v.marginTop, P = v.marginBottom, h = C + d(E) + d(P);
          c.current.get(p) !== h && (c.current.set(p, h), l = !0);
        }
      }), l && w(function(e) {
        return e + 1;
      });
    };
    if (f) t();
    else {
      u.current += 1;
      var r = u.current;
      Promise.resolve().then(function() {
        r === u.current && t();
      });
    }
  }
  return b(function() {
    return m;
  }, []), [function(f, t) {
    var r = o(f);
    n.current.get(r), t ? (n.current.set(r, t), g()) : n.current.delete(r);
  }, g, c.current, N];
}
export {
  T as default
};
