import { warningOnce as M } from "../../../rc-util/es/warning.js";
import O from "./keyUtil.js";
function j(S, y) {
  var l = /* @__PURE__ */ new Set();
  return S.forEach(function(p) {
    y.has(p) || l.add(p);
  }), l;
}
function D(S) {
  var y = S || {}, l = y.disabled, p = y.disableCheckbox, m = y.checkable;
  return !(!l && !p) || m === !1;
}
function q(S, y, l, p) {
  var m, b = [];
  m = p || D;
  var K, A = new Set(S.filter(function(f) {
    var i = !!O(l, f);
    return i || b.push(f), i;
  })), g = /* @__PURE__ */ new Map(), C = 0;
  return Object.keys(l).forEach(function(f) {
    var i = l[f], s = i.level, n = g.get(s);
    n || (n = /* @__PURE__ */ new Set(), g.set(s, n)), n.add(i), C = Math.max(C, s);
  }), M(!b.length, "Tree missing follow keys: ".concat(b.slice(0, 100).map(function(f) {
    return "'".concat(f, "'");
  }).join(", "))), K = y === !0 ? function(f, i, s, n) {
    for (var a = new Set(f), d = /* @__PURE__ */ new Set(), k = 0; k <= s; k += 1) (i.get(k) || /* @__PURE__ */ new Set()).forEach(function(r) {
      var e = r.key, o = r.node, h = r.children, c = h === void 0 ? [] : h;
      a.has(e) && !n(o) && c.filter(function(t) {
        return !n(t.node);
      }).forEach(function(t) {
        a.add(t.key);
      });
    });
    for (var v = /* @__PURE__ */ new Set(), w = s; w >= 0; w -= 1) (i.get(w) || /* @__PURE__ */ new Set()).forEach(function(r) {
      var e = r.parent, o = r.node;
      if (!n(o) && r.parent && !v.has(r.parent.key)) if (n(r.parent.node)) v.add(e.key);
      else {
        var h = !0, c = !1;
        (e.children || []).filter(function(t) {
          return !n(t.node);
        }).forEach(function(t) {
          var u = t.key, E = a.has(u);
          h && !E && (h = !1), c || !E && !d.has(u) || (c = !0);
        }), h && a.add(e.key), c && d.add(e.key), v.add(e.key);
      }
    });
    return { checkedKeys: Array.from(a), halfCheckedKeys: Array.from(j(d, a)) };
  }(A, g, C, m) : function(f, i, s, n, a) {
    for (var d = new Set(f), k = new Set(i), v = 0; v <= n; v += 1) (s.get(v) || /* @__PURE__ */ new Set()).forEach(function(e) {
      var o = e.key, h = e.node, c = e.children, t = c === void 0 ? [] : c;
      d.has(o) || k.has(o) || a(h) || t.filter(function(u) {
        return !a(u.node);
      }).forEach(function(u) {
        d.delete(u.key);
      });
    });
    k = /* @__PURE__ */ new Set();
    for (var w = /* @__PURE__ */ new Set(), r = n; r >= 0; r -= 1) (s.get(r) || /* @__PURE__ */ new Set()).forEach(function(e) {
      var o = e.parent, h = e.node;
      if (!a(h) && e.parent && !w.has(e.parent.key)) if (a(e.parent.node)) w.add(o.key);
      else {
        var c = !0, t = !1;
        (o.children || []).filter(function(u) {
          return !a(u.node);
        }).forEach(function(u) {
          var E = u.key, x = d.has(E);
          c && !x && (c = !1), t || !x && !k.has(E) || (t = !0);
        }), c || d.delete(o.key), t && k.add(o.key), w.add(o.key);
      }
    });
    return { checkedKeys: Array.from(d), halfCheckedKeys: Array.from(j(k, d)) };
  }(A, y.halfCheckedKeys, g, C, m), K;
}
export {
  q as conductCheck,
  D as isCheckDisabled
};
