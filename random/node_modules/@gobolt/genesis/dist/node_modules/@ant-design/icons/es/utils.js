import c from "../../../@babel/runtime/helpers/esm/objectSpread2.js";
import s from "../../../@babel/runtime/helpers/esm/typeof.js";
import p from "../../colors/es/generate.js";
import "../../colors/es/presets.js";
import { updateCSS as u } from "../../../rc-util/es/Dom/dynamicCSS.js";
import { getShadowRoot as d } from "../../../rc-util/es/Dom/shadow.js";
import { warningOnce as y } from "../../../rc-util/es/warning.js";
import l, { useContext as b, useEffect as h } from "react";
import k from "./components/Context.js";
function I(n, t) {
  y(n, "[@ant-design/icons] ".concat(t));
}
function O(n) {
  return s(n) === "object" && typeof n.name == "string" && typeof n.theme == "string" && (s(n.icon) === "object" || typeof n.icon == "function");
}
function m() {
  var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return Object.keys(n).reduce(function(t, i) {
    var o, e = n[i];
    return i === "class" ? (t.className = e, delete t.class) : (delete t[i], t[o = i, o.replace(/-(.)/g, function(r, a) {
      return a.toUpperCase();
    })] = e), t;
  }, {});
}
function f(n, t, i) {
  return i ? l.createElement(n.tag, c(c({ key: t }, m(n.attrs)), i), (n.children || []).map(function(o, e) {
    return f(o, "".concat(t, "-").concat(n.tag, "-").concat(e));
  })) : l.createElement(n.tag, c({ key: t }, m(n.attrs)), (n.children || []).map(function(o, e) {
    return f(o, "".concat(t, "-").concat(n.tag, "-").concat(e));
  }));
}
function D(n) {
  return p(n)[0];
}
function L(n) {
  return n ? Array.isArray(n) ? n : [n] : [];
}
var C = `
.anticon {
  display: inline-flex;
  align-items: center;
  color: inherit;
  font-style: normal;
  line-height: 0;
  text-align: center;
  text-transform: none;
  vertical-align: -0.125em;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.anticon > * {
  line-height: 1;
}

.anticon svg {
  display: inline-block;
}

.anticon::before {
  display: none;
}

.anticon .anticon-icon {
  display: block;
}

.anticon[tabindex] {
  cursor: pointer;
}

.anticon-spin::before,
.anticon-spin {
  display: inline-block;
  -webkit-animation: loadingCircle 1s infinite linear;
  animation: loadingCircle 1s infinite linear;
}

@-webkit-keyframes loadingCircle {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@keyframes loadingCircle {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
`, N = function(n) {
  var t = b(k), i = t.csp, o = t.prefixCls, e = t.layer, r = C;
  o && (r = r.replace(/anticon/g, o)), e && (r = "@layer ".concat(e, ` {
`).concat(r, `
}`)), h(function() {
    var a = n.current, g = d(a);
    u(r, "@ant-design-icons", { prepend: !e, csp: i, attachTo: g });
  }, []);
};
export {
  f as generate,
  D as getSecondaryColor,
  C as iconStyles,
  O as isIconDefinition,
  m as normalizeAttrs,
  L as normalizeTwoToneColors,
  N as useInsertStyles,
  I as warning
};
