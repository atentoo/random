import o from "../../../@babel/runtime/helpers/esm/defineProperty.js";
const e = Math.round;
function m(b, t) {
  const s = b.replace(/^[^(]*\((.*)/, "$1").replace(/\).*/, "").match(/\d*\.?\d+%?/g) || [], i = s.map((h) => parseFloat(h));
  for (let h = 0; h < 3; h += 1) i[h] = t(i[h] || 0, s[h] || "", h);
  return s[3] ? i[3] = s[3].includes("%") ? i[3] / 100 : i[3] : i[3] = 1, i;
}
const v = (b, t, s) => s === 0 ? b : b / 100;
function _(b, t) {
  const s = t || 255;
  return b > s ? s : b < 0 ? 0 : b;
}
class d {
  constructor(t) {
    function s(i) {
      return i[0] in t && i[1] in t && i[2] in t;
    }
    if (o(this, "isValid", !0), o(this, "r", 0), o(this, "g", 0), o(this, "b", 0), o(this, "a", 1), o(this, "_h", void 0), o(this, "_s", void 0), o(this, "_l", void 0), o(this, "_v", void 0), o(this, "_max", void 0), o(this, "_min", void 0), o(this, "_brightness", void 0), t) if (typeof t == "string") {
      let h = function(r) {
        return i.startsWith(r);
      };
      const i = t.trim();
      /^#?[A-F\d]{3,8}$/i.test(i) ? this.fromHexString(i) : h("rgb") ? this.fromRgbString(i) : h("hsl") ? this.fromHslString(i) : (h("hsv") || h("hsb")) && this.fromHsvString(i);
    } else if (t instanceof d) this.r = t.r, this.g = t.g, this.b = t.b, this.a = t.a, this._h = t._h, this._s = t._s, this._l = t._l, this._v = t._v;
    else if (s("rgb")) this.r = _(t.r), this.g = _(t.g), this.b = _(t.b), this.a = typeof t.a == "number" ? _(t.a, 1) : 1;
    else if (s("hsl")) this.fromHsl(t);
    else {
      if (!s("hsv")) throw new Error("@ant-design/fast-color: unsupported input " + JSON.stringify(t));
      this.fromHsv(t);
    }
  }
  setR(t) {
    return this._sc("r", t);
  }
  setG(t) {
    return this._sc("g", t);
  }
  setB(t) {
    return this._sc("b", t);
  }
  setA(t) {
    return this._sc("a", t, 1);
  }
  setHue(t) {
    const s = this.toHsv();
    return s.h = t, this._c(s);
  }
  getLuminance() {
    function t(s) {
      const i = s / 255;
      return i <= 0.03928 ? i / 12.92 : Math.pow((i + 0.055) / 1.055, 2.4);
    }
    return 0.2126 * t(this.r) + 0.7152 * t(this.g) + 0.0722 * t(this.b);
  }
  getHue() {
    if (this._h === void 0) {
      const t = this.getMax() - this.getMin();
      this._h = t === 0 ? 0 : e(60 * (this.r === this.getMax() ? (this.g - this.b) / t + (this.g < this.b ? 6 : 0) : this.g === this.getMax() ? (this.b - this.r) / t + 2 : (this.r - this.g) / t + 4));
    }
    return this._h;
  }
  getSaturation() {
    if (this._s === void 0) {
      const t = this.getMax() - this.getMin();
      this._s = t === 0 ? 0 : t / this.getMax();
    }
    return this._s;
  }
  getLightness() {
    return this._l === void 0 && (this._l = (this.getMax() + this.getMin()) / 510), this._l;
  }
  getValue() {
    return this._v === void 0 && (this._v = this.getMax() / 255), this._v;
  }
  getBrightness() {
    return this._brightness === void 0 && (this._brightness = (299 * this.r + 587 * this.g + 114 * this.b) / 1e3), this._brightness;
  }
  darken(t = 10) {
    const s = this.getHue(), i = this.getSaturation();
    let h = this.getLightness() - t / 100;
    return h < 0 && (h = 0), this._c({ h: s, s: i, l: h, a: this.a });
  }
  lighten(t = 10) {
    const s = this.getHue(), i = this.getSaturation();
    let h = this.getLightness() + t / 100;
    return h > 1 && (h = 1), this._c({ h: s, s: i, l: h, a: this.a });
  }
  mix(t, s = 50) {
    const i = this._c(t), h = s / 100, r = (g) => (i[g] - this[g]) * h + this[g], c = { r: e(r("r")), g: e(r("g")), b: e(r("b")), a: e(100 * r("a")) / 100 };
    return this._c(c);
  }
  tint(t = 10) {
    return this.mix({ r: 255, g: 255, b: 255, a: 1 }, t);
  }
  shade(t = 10) {
    return this.mix({ r: 0, g: 0, b: 0, a: 1 }, t);
  }
  onBackground(t) {
    const s = this._c(t), i = this.a + s.a * (1 - this.a), h = (r) => e((this[r] * this.a + s[r] * s.a * (1 - this.a)) / i);
    return this._c({ r: h("r"), g: h("g"), b: h("b"), a: i });
  }
  isDark() {
    return this.getBrightness() < 128;
  }
  isLight() {
    return this.getBrightness() >= 128;
  }
  equals(t) {
    return this.r === t.r && this.g === t.g && this.b === t.b && this.a === t.a;
  }
  clone() {
    return this._c(this);
  }
  toHexString() {
    let t = "#";
    const s = (this.r || 0).toString(16);
    t += s.length === 2 ? s : "0" + s;
    const i = (this.g || 0).toString(16);
    t += i.length === 2 ? i : "0" + i;
    const h = (this.b || 0).toString(16);
    if (t += h.length === 2 ? h : "0" + h, typeof this.a == "number" && this.a >= 0 && this.a < 1) {
      const r = e(255 * this.a).toString(16);
      t += r.length === 2 ? r : "0" + r;
    }
    return t;
  }
  toHsl() {
    return { h: this.getHue(), s: this.getSaturation(), l: this.getLightness(), a: this.a };
  }
  toHslString() {
    const t = this.getHue(), s = e(100 * this.getSaturation()), i = e(100 * this.getLightness());
    return this.a !== 1 ? `hsla(${t},${s}%,${i}%,${this.a})` : `hsl(${t},${s}%,${i}%)`;
  }
  toHsv() {
    return { h: this.getHue(), s: this.getSaturation(), v: this.getValue(), a: this.a };
  }
  toRgb() {
    return { r: this.r, g: this.g, b: this.b, a: this.a };
  }
  toRgbString() {
    return this.a !== 1 ? `rgba(${this.r},${this.g},${this.b},${this.a})` : `rgb(${this.r},${this.g},${this.b})`;
  }
  toString() {
    return this.toRgbString();
  }
  _sc(t, s, i) {
    const h = this.clone();
    return h[t] = _(s, i), h;
  }
  _c(t) {
    return new this.constructor(t);
  }
  getMax() {
    return this._max === void 0 && (this._max = Math.max(this.r, this.g, this.b)), this._max;
  }
  getMin() {
    return this._min === void 0 && (this._min = Math.min(this.r, this.g, this.b)), this._min;
  }
  fromHexString(t) {
    const s = t.replace("#", "");
    function i(h, r) {
      return parseInt(s[h] + s[r || h], 16);
    }
    s.length < 6 ? (this.r = i(0), this.g = i(1), this.b = i(2), this.a = s[3] ? i(3) / 255 : 1) : (this.r = i(0, 1), this.g = i(2, 3), this.b = i(4, 5), this.a = s[6] ? i(6, 7) / 255 : 1);
  }
  fromHsl({ h: t, s, l: i, a: h }) {
    if (this._h = t % 360, this._s = s, this._l = i, this.a = typeof h == "number" ? h : 1, s <= 0) {
      const f = e(255 * i);
      this.r = f, this.g = f, this.b = f;
    }
    let r = 0, c = 0, g = 0;
    const n = t / 60, a = (1 - Math.abs(2 * i - 1)) * s, u = a * (1 - Math.abs(n % 2 - 1));
    n >= 0 && n < 1 ? (r = a, c = u) : n >= 1 && n < 2 ? (r = u, c = a) : n >= 2 && n < 3 ? (c = a, g = u) : n >= 3 && n < 4 ? (c = u, g = a) : n >= 4 && n < 5 ? (r = u, g = a) : n >= 5 && n < 6 && (r = a, g = u);
    const l = i - a / 2;
    this.r = e(255 * (r + l)), this.g = e(255 * (c + l)), this.b = e(255 * (g + l));
  }
  fromHsv({ h: t, s, v: i, a: h }) {
    this._h = t % 360, this._s = s, this._v = i, this.a = typeof h == "number" ? h : 1;
    const r = e(255 * i);
    if (this.r = r, this.g = r, this.b = r, s <= 0) return;
    const c = t / 60, g = Math.floor(c), n = c - g, a = e(i * (1 - s) * 255), u = e(i * (1 - s * n) * 255), l = e(i * (1 - s * (1 - n)) * 255);
    switch (g) {
      case 0:
        this.g = l, this.b = a;
        break;
      case 1:
        this.r = u, this.b = a;
        break;
      case 2:
        this.r = a, this.b = l;
        break;
      case 3:
        this.r = a, this.g = u;
        break;
      case 4:
        this.r = l, this.g = a;
        break;
      default:
        this.g = a, this.b = u;
    }
  }
  fromHsvString(t) {
    const s = m(t, v);
    this.fromHsv({ h: s[0], s: s[1], v: s[2], a: s[3] });
  }
  fromHslString(t) {
    const s = m(t, v);
    this.fromHsl({ h: s[0], s: s[1], l: s[2], a: s[3] });
  }
  fromRgbString(t) {
    const s = m(t, (i, h) => h.includes("%") ? e(i / 100 * 255) : i);
    this.r = s[0], this.g = s[1], this.b = s[2], this.a = s[3];
  }
}
export {
  d as FastColor
};
