import r from "../../../@babel/runtime/helpers/esm/objectSpread2.js";
import E from "../../../@babel/runtime/helpers/esm/typeof.js";
var g = "add", v = "keep", y = "remove", d = "removed";
function S(u) {
  var o;
  return o = u && E(u) === "object" && "key" in u ? u : { key: u }, r(r({}, o), {}, { key: String(o.key) });
}
function k() {
  return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : []).map(S);
}
function A() {
  var u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], n = [], s = 0, m = o.length, p = k(u), i = k(o);
  p.forEach(function(t) {
    for (var e = !1, a = s; a < m; a += 1) {
      var f = i[a];
      if (f.key === t.key) {
        s < a && (n = n.concat(i.slice(s, a).map(function(h) {
          return r(r({}, h), {}, { status: g });
        })), s = a), n.push(r(r({}, f), {}, { status: v })), s += 1, e = !0;
        break;
      }
    }
    e || n.push(r(r({}, t), {}, { status: y }));
  }), s < m && (n = n.concat(i.slice(s).map(function(t) {
    return r(r({}, t), {}, { status: g });
  })));
  var c = {};
  return n.forEach(function(t) {
    var e = t.key;
    c[e] = (c[e] || 0) + 1;
  }), Object.keys(c).filter(function(t) {
    return c[t] > 1;
  }).forEach(function(t) {
    (n = n.filter(function(e) {
      var a = e.key, f = e.status;
      return a !== t || f !== y;
    })).forEach(function(e) {
      e.key === t && (e.status = v);
    });
  }), n;
}
export {
  g as STATUS_ADD,
  v as STATUS_KEEP,
  y as STATUS_REMOVE,
  d as STATUS_REMOVED,
  A as diffKeys,
  k as parseKeys,
  S as wrapKeyToObject
};
