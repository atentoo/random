import { getDayOfYear as f } from "../../getDayOfYear.js";
import { getISOWeek as h } from "../../getISOWeek.js";
import { getISOWeekYear as m } from "../../getISOWeekYear.js";
import { getWeek as w } from "../../getWeek.js";
import { getWeekYear as g } from "../../getWeekYear.js";
import { addLeadingZeros as o } from "../addLeadingZeros.js";
import { lightFormatters as c } from "./lightFormatters.js";
const l = "midnight", b = "noon", x = "morning", y = "afternoon", M = "evening", q = "night", z = { G: function(n, r, e) {
  const t = n.getFullYear() > 0 ? 1 : 0;
  switch (r) {
    case "G":
    case "GG":
    case "GGG":
      return e.era(t, { width: "abbreviated" });
    case "GGGGG":
      return e.era(t, { width: "narrow" });
    default:
      return e.era(t, { width: "wide" });
  }
}, y: function(n, r, e) {
  if (r === "yo") {
    const t = n.getFullYear(), a = t > 0 ? t : 1 - t;
    return e.ordinalNumber(a, { unit: "year" });
  }
  return c.y(n, r);
}, Y: function(n, r, e, t) {
  const a = g(n, t), i = a > 0 ? a : 1 - a;
  return r === "YY" ? o(i % 100, 2) : r === "Yo" ? e.ordinalNumber(i, { unit: "year" }) : o(i, r.length);
}, R: function(n, r) {
  const e = m(n);
  return o(e, r.length);
}, u: function(n, r) {
  const e = n.getFullYear();
  return o(e, r.length);
}, Q: function(n, r, e) {
  const t = Math.ceil((n.getMonth() + 1) / 3);
  switch (r) {
    case "Q":
      return String(t);
    case "QQ":
      return o(t, 2);
    case "Qo":
      return e.ordinalNumber(t, { unit: "quarter" });
    case "QQQ":
      return e.quarter(t, { width: "abbreviated", context: "formatting" });
    case "QQQQQ":
      return e.quarter(t, { width: "narrow", context: "formatting" });
    default:
      return e.quarter(t, { width: "wide", context: "formatting" });
  }
}, q: function(n, r, e) {
  const t = Math.ceil((n.getMonth() + 1) / 3);
  switch (r) {
    case "q":
      return String(t);
    case "qq":
      return o(t, 2);
    case "qo":
      return e.ordinalNumber(t, { unit: "quarter" });
    case "qqq":
      return e.quarter(t, { width: "abbreviated", context: "standalone" });
    case "qqqqq":
      return e.quarter(t, { width: "narrow", context: "standalone" });
    default:
      return e.quarter(t, { width: "wide", context: "standalone" });
  }
}, M: function(n, r, e) {
  const t = n.getMonth();
  switch (r) {
    case "M":
    case "MM":
      return c.M(n, r);
    case "Mo":
      return e.ordinalNumber(t + 1, { unit: "month" });
    case "MMM":
      return e.month(t, { width: "abbreviated", context: "formatting" });
    case "MMMMM":
      return e.month(t, { width: "narrow", context: "formatting" });
    default:
      return e.month(t, { width: "wide", context: "formatting" });
  }
}, L: function(n, r, e) {
  const t = n.getMonth();
  switch (r) {
    case "L":
      return String(t + 1);
    case "LL":
      return o(t + 1, 2);
    case "Lo":
      return e.ordinalNumber(t + 1, { unit: "month" });
    case "LLL":
      return e.month(t, { width: "abbreviated", context: "standalone" });
    case "LLLLL":
      return e.month(t, { width: "narrow", context: "standalone" });
    default:
      return e.month(t, { width: "wide", context: "standalone" });
  }
}, w: function(n, r, e, t) {
  const a = w(n, t);
  return r === "wo" ? e.ordinalNumber(a, { unit: "week" }) : o(a, r.length);
}, I: function(n, r, e) {
  const t = h(n);
  return r === "Io" ? e.ordinalNumber(t, { unit: "week" }) : o(t, r.length);
}, d: function(n, r, e) {
  return r === "do" ? e.ordinalNumber(n.getDate(), { unit: "date" }) : c.d(n, r);
}, D: function(n, r, e) {
  const t = f(n);
  return r === "Do" ? e.ordinalNumber(t, { unit: "dayOfYear" }) : o(t, r.length);
}, E: function(n, r, e) {
  const t = n.getDay();
  switch (r) {
    case "E":
    case "EE":
    case "EEE":
      return e.day(t, { width: "abbreviated", context: "formatting" });
    case "EEEEE":
      return e.day(t, { width: "narrow", context: "formatting" });
    case "EEEEEE":
      return e.day(t, { width: "short", context: "formatting" });
    default:
      return e.day(t, { width: "wide", context: "formatting" });
  }
}, e: function(n, r, e, t) {
  const a = n.getDay(), i = (a - t.weekStartsOn + 8) % 7 || 7;
  switch (r) {
    case "e":
      return String(i);
    case "ee":
      return o(i, 2);
    case "eo":
      return e.ordinalNumber(i, { unit: "day" });
    case "eee":
      return e.day(a, { width: "abbreviated", context: "formatting" });
    case "eeeee":
      return e.day(a, { width: "narrow", context: "formatting" });
    case "eeeeee":
      return e.day(a, { width: "short", context: "formatting" });
    default:
      return e.day(a, { width: "wide", context: "formatting" });
  }
}, c: function(n, r, e, t) {
  const a = n.getDay(), i = (a - t.weekStartsOn + 8) % 7 || 7;
  switch (r) {
    case "c":
      return String(i);
    case "cc":
      return o(i, r.length);
    case "co":
      return e.ordinalNumber(i, { unit: "day" });
    case "ccc":
      return e.day(a, { width: "abbreviated", context: "standalone" });
    case "ccccc":
      return e.day(a, { width: "narrow", context: "standalone" });
    case "cccccc":
      return e.day(a, { width: "short", context: "standalone" });
    default:
      return e.day(a, { width: "wide", context: "standalone" });
  }
}, i: function(n, r, e) {
  const t = n.getDay(), a = t === 0 ? 7 : t;
  switch (r) {
    case "i":
      return String(a);
    case "ii":
      return o(a, r.length);
    case "io":
      return e.ordinalNumber(a, { unit: "day" });
    case "iii":
      return e.day(t, { width: "abbreviated", context: "formatting" });
    case "iiiii":
      return e.day(t, { width: "narrow", context: "formatting" });
    case "iiiiii":
      return e.day(t, { width: "short", context: "formatting" });
    default:
      return e.day(t, { width: "wide", context: "formatting" });
  }
}, a: function(n, r, e) {
  const t = n.getHours() / 12 >= 1 ? "pm" : "am";
  switch (r) {
    case "a":
    case "aa":
      return e.dayPeriod(t, { width: "abbreviated", context: "formatting" });
    case "aaa":
      return e.dayPeriod(t, { width: "abbreviated", context: "formatting" }).toLowerCase();
    case "aaaaa":
      return e.dayPeriod(t, { width: "narrow", context: "formatting" });
    default:
      return e.dayPeriod(t, { width: "wide", context: "formatting" });
  }
}, b: function(n, r, e) {
  const t = n.getHours();
  let a;
  switch (a = t === 12 ? b : t === 0 ? l : t / 12 >= 1 ? "pm" : "am", r) {
    case "b":
    case "bb":
      return e.dayPeriod(a, { width: "abbreviated", context: "formatting" });
    case "bbb":
      return e.dayPeriod(a, { width: "abbreviated", context: "formatting" }).toLowerCase();
    case "bbbbb":
      return e.dayPeriod(a, { width: "narrow", context: "formatting" });
    default:
      return e.dayPeriod(a, { width: "wide", context: "formatting" });
  }
}, B: function(n, r, e) {
  const t = n.getHours();
  let a;
  switch (a = t >= 17 ? M : t >= 12 ? y : t >= 4 ? x : q, r) {
    case "B":
    case "BB":
    case "BBB":
      return e.dayPeriod(a, { width: "abbreviated", context: "formatting" });
    case "BBBBB":
      return e.dayPeriod(a, { width: "narrow", context: "formatting" });
    default:
      return e.dayPeriod(a, { width: "wide", context: "formatting" });
  }
}, h: function(n, r, e) {
  if (r === "ho") {
    let t = n.getHours() % 12;
    return t === 0 && (t = 12), e.ordinalNumber(t, { unit: "hour" });
  }
  return c.h(n, r);
}, H: function(n, r, e) {
  return r === "Ho" ? e.ordinalNumber(n.getHours(), { unit: "hour" }) : c.H(n, r);
}, K: function(n, r, e) {
  const t = n.getHours() % 12;
  return r === "Ko" ? e.ordinalNumber(t, { unit: "hour" }) : o(t, r.length);
}, k: function(n, r, e) {
  let t = n.getHours();
  return t === 0 && (t = 24), r === "ko" ? e.ordinalNumber(t, { unit: "hour" }) : o(t, r.length);
}, m: function(n, r, e) {
  return r === "mo" ? e.ordinalNumber(n.getMinutes(), { unit: "minute" }) : c.m(n, r);
}, s: function(n, r, e) {
  return r === "so" ? e.ordinalNumber(n.getSeconds(), { unit: "second" }) : c.s(n, r);
}, S: function(n, r) {
  return c.S(n, r);
}, X: function(n, r, e) {
  const t = n.getTimezoneOffset();
  if (t === 0) return "Z";
  switch (r) {
    case "X":
      return d(t);
    case "XXXX":
    case "XX":
      return u(t);
    default:
      return u(t, ":");
  }
}, x: function(n, r, e) {
  const t = n.getTimezoneOffset();
  switch (r) {
    case "x":
      return d(t);
    case "xxxx":
    case "xx":
      return u(t);
    default:
      return u(t, ":");
  }
}, O: function(n, r, e) {
  const t = n.getTimezoneOffset();
  switch (r) {
    case "O":
    case "OO":
    case "OOO":
      return "GMT" + s(t, ":");
    default:
      return "GMT" + u(t, ":");
  }
}, z: function(n, r, e) {
  const t = n.getTimezoneOffset();
  switch (r) {
    case "z":
    case "zz":
    case "zzz":
      return "GMT" + s(t, ":");
    default:
      return "GMT" + u(t, ":");
  }
}, t: function(n, r, e) {
  const t = Math.trunc(n.getTime() / 1e3);
  return o(t, r.length);
}, T: function(n, r, e) {
  const t = n.getTime();
  return o(t, r.length);
} };
function s(n, r = "") {
  const e = n > 0 ? "-" : "+", t = Math.abs(n), a = Math.trunc(t / 60), i = t % 60;
  return i === 0 ? e + String(a) : e + String(a) + r + o(i, 2);
}
function d(n, r) {
  return n % 60 == 0 ? (n > 0 ? "-" : "+") + o(Math.abs(n) / 60, 2) : u(n, r);
}
function u(n, r = "") {
  const e = n > 0 ? "-" : "+", t = Math.abs(n);
  return e + o(Math.trunc(t / 60), 2) + r + o(t % 60, 2);
}
export {
  z as formatters
};
