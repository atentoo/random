function b(r) {
  return (i, l = {}) => {
    const n = l.width, f = n && r.matchPatterns[n] || r.matchPatterns[r.defaultMatchWidth], o = i.match(f);
    if (!o) return null;
    const u = o[0], c = n && r.parsePatterns[n] || r.parsePatterns[r.defaultParseWidth], h = Array.isArray(c) ? function(t, s) {
      for (let e = 0; e < t.length; e++) if (s(t[e])) return e;
    }(c, (t) => t.test(u)) : function(t, s) {
      for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e) && s(t[e])) return e;
    }(c, (t) => t.test(u));
    let a;
    return a = r.valueCallback ? r.valueCallback(h) : h, a = l.valueCallback ? l.valueCallback(a) : a, { value: a, rest: i.slice(u.length) };
  };
}
export {
  b as buildMatchFn
};
