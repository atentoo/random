import d from "../../../@babel/runtime/helpers/esm/slicedToArray.js";
import x from "../../../rc-util/es/hooks/useEvent.js";
import m from "../../../rc-util/es/hooks/useLayoutEffect.js";
import C from "../../../rc-util/es/isEqual.js";
import * as r from "react";
import { unstable_batchedUpdates as g } from "react-dom";
function b(n) {
  var t = r.createContext(void 0);
  return { Context: t, Provider: function(a) {
    var e = a.value, i = a.children, f = r.useRef(e);
    f.current = e;
    var s = r.useState(function() {
      return { getValue: function() {
        return f.current;
      }, listeners: /* @__PURE__ */ new Set() };
    }), u = d(s, 1)[0];
    return m(function() {
      g(function() {
        u.listeners.forEach(function(v) {
          v(e);
        });
      });
    }, [e]), r.createElement(t.Provider, { value: u }, i);
  }, defaultValue: n };
}
function A(n, t) {
  var a = x(typeof t == "function" ? t : function(o) {
    if (t === void 0) return o;
    if (!Array.isArray(t)) return o[t];
    var c = {};
    return t.forEach(function(l) {
      c[l] = o[l];
    }), c;
  }), e = r.useContext(n == null ? void 0 : n.Context), i = e || {}, f = i.listeners, s = i.getValue, u = r.useRef();
  u.current = a(e ? s() : n == null ? void 0 : n.defaultValue);
  var v = r.useState({}), p = d(v, 2)[1];
  return m(function() {
    if (e) return f.add(o), function() {
      f.delete(o);
    };
    function o(c) {
      var l = a(c);
      C(u.current, l, !0) || p({});
    }
  }, [e]), u.current;
}
export {
  b as createContext,
  A as useContext
};
