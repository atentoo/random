import S from "../../@babel/runtime/helpers/esm/slicedToArray.js";
import { warningOnce as x } from "../../rc-util/es/warning.js";
import { useRef as _, useState as V, useMemo as j, useContext as w, useEffect as A } from "react";
import C, { HOOK_MARK as H } from "./FieldContext.js";
import { isFormInstance as K } from "./utils/typeUtil.js";
import { getNamePath as L } from "./utils/valueUtil.js";
import b from "../../rc-util/es/utils/get.js";
function P(t) {
  try {
    return JSON.stringify(t);
  } catch {
    return Math.random();
  }
}
var k = process.env.NODE_ENV !== "production" ? function(t) {
  var r = t.join("__RC_FIELD_FORM_SPLIT__"), e = _(r);
  x(e.current === r, "`useWatch` is not support dynamic `namePath`. Please provide static instead.");
} : function() {
};
function U() {
  for (var t = arguments.length, r = new Array(t), e = 0; e < t; e++) r[e] = arguments[e];
  var i = r[0], g = r[1], s = g === void 0 ? {} : g, v = K(s) ? { form: s } : s, h = v.form, D = V(), O = S(D, 2), o = O[0], d = O[1], l = j(function() {
    return P(o);
  }, [o]), u = _(l);
  u.current = l;
  var M = w(C), a = h || M, c = a && a._init;
  process.env.NODE_ENV !== "production" && x(r.length === 2 && !h || c, "useWatch requires a form instance since it can not auto detect from context.");
  var f = L(i), y = _(f);
  return y.current = f, k(f), A(function() {
    if (c) {
      var E = a.getFieldsValue, R = (0, a.getInternalHooks)(H).registerWatch, N = function(m, p) {
        var n = v.preserve ? p : m;
        return typeof i == "function" ? i(n) : b(n, y.current);
      }, W = R(function(m, p) {
        var n = N(m, p), I = P(n);
        u.current !== I && (u.current = I, d(n));
      }), F = N(E(), E(!0));
      return o !== F && d(F), W;
    }
  }, [c]), o;
}
export {
  U as default,
  P as stringify
};
