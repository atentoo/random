import { __require as g } from "../toggle-selection/index.js";
var s, m;
function D() {
  if (m) return s;
  m = 1;
  var y = g(), p = { "text/plain": "Text", "text/html": "Url", default: "Text" };
  return s = function(n, t) {
    var a, d, u, c, r, e, l = !1;
    t || (t = {}), a = t.debug || !1;
    try {
      if (u = y(), c = document.createRange(), r = document.getSelection(), (e = document.createElement("span")).textContent = n, e.ariaHidden = "true", e.style.all = "unset", e.style.position = "fixed", e.style.top = 0, e.style.clip = "rect(0, 0, 0, 0)", e.style.whiteSpace = "pre", e.style.webkitUserSelect = "text", e.style.MozUserSelect = "text", e.style.msUserSelect = "text", e.style.userSelect = "text", e.addEventListener("copy", function(o) {
        if (o.stopPropagation(), t.format) if (o.preventDefault(), o.clipboardData === void 0) {
          a && console.warn("unable to use e.clipboardData"), a && console.warn("trying IE specific stuff"), window.clipboardData.clearData();
          var i = p[t.format] || p.default;
          window.clipboardData.setData(i, n);
        } else o.clipboardData.clearData(), o.clipboardData.setData(t.format, n);
        t.onCopy && (o.preventDefault(), t.onCopy(o.clipboardData));
      }), document.body.appendChild(e), c.selectNodeContents(e), r.addRange(c), !document.execCommand("copy")) throw new Error("copy command was unsuccessful");
      l = !0;
    } catch (o) {
      a && console.error("unable to copy using execCommand: ", o), a && console.warn("trying IE specific stuff");
      try {
        window.clipboardData.setData(t.format || "text", n), t.onCopy && t.onCopy(window.clipboardData), l = !0;
      } catch (i) {
        a && console.error("unable to copy using clipboardData: ", i), a && console.error("falling back to prompt"), d = function(f) {
          var b = (/mac os x/i.test(navigator.userAgent) ? "âŒ˜" : "Ctrl") + "+C";
          return f.replace(/#{\s*key\s*}/g, b);
        }("message" in t ? t.message : "Copy to clipboard: #{key}, Enter"), window.prompt(d, n);
      }
    } finally {
      r && (typeof r.removeRange == "function" ? r.removeRange(c) : r.removeAllRanges()), e && document.body.removeChild(e), u();
    }
    return l;
  }, s;
}
export {
  D as __require
};
