import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as C } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { genFocusStyle as $, resetIcon as O } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as y } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as x } from "../../theme/util/genStyleUtils.js";
import H from "./group.js";
import { prepareToken as j, prepareComponentToken as f } from "./token.js";
import { PresetColors as E } from "../../theme/interface/presetColors.js";
const P = (r) => {
  const { componentCls: o, iconCls: e, fontWeight: t, opacityLoading: n, motionDurationSlow: l, motionEaseInOut: c, marginXS: a, calc: i } = r;
  return { [o]: { outline: "none", position: "relative", display: "inline-flex", gap: r.marginXS, alignItems: "center", justifyContent: "center", fontWeight: t, whiteSpace: "nowrap", textAlign: "center", backgroundImage: "none", background: "transparent", border: `${C(r.lineWidth)} ${r.lineType} transparent`, cursor: "pointer", transition: `all ${r.motionDurationMid} ${r.motionEaseInOut}`, userSelect: "none", touchAction: "manipulation", color: r.colorText, "&:disabled > *": { pointerEvents: "none" }, [`${o}-icon > svg`]: O(), "> a": { color: "currentColor" }, "&:not(:disabled)": $(r), [`&${o}-two-chinese-chars::first-letter`]: { letterSpacing: "0.34em" }, [`&${o}-two-chinese-chars > *:not(${e})`]: { marginInlineEnd: "-0.34em", letterSpacing: "0.34em" }, [`&${o}-icon-only`]: { paddingInline: 0, [`&${o}-compact-item`]: { flex: "none" }, [`&${o}-round`]: { width: "auto" } }, [`&${o}-loading`]: { opacity: n, cursor: "default" }, [`${o}-loading-icon`]: { transition: ["width", "opacity", "margin"].map((s) => `${s} ${l} ${c}`).join(",") }, [`&:not(${o}-icon-end)`]: { [`${o}-loading-icon-motion`]: { "&-appear-start, &-enter-start": { marginInlineEnd: i(a).mul(-1).equal() }, "&-appear-active, &-enter-active": { marginInlineEnd: 0 }, "&-leave-start": { marginInlineEnd: 0 }, "&-leave-active": { marginInlineEnd: i(a).mul(-1).equal() } } }, "&-icon-end": { flexDirection: "row-reverse", [`${o}-loading-icon-motion`]: { "&-appear-start, &-enter-start": { marginInlineStart: i(a).mul(-1).equal() }, "&-appear-active, &-enter-active": { marginInlineStart: 0 }, "&-leave-start": { marginInlineStart: 0 }, "&-leave-active": { marginInlineStart: i(a).mul(-1).equal() } } } } };
}, h = (r, o, e) => ({ [`&:not(:disabled):not(${r}-disabled)`]: { "&:hover": o, "&:active": e } }), I = (r) => ({ minWidth: r.controlHeight, paddingInlineStart: 0, paddingInlineEnd: 0, borderRadius: "50%" }), A = (r) => ({ borderRadius: r.controlHeight, paddingInlineStart: r.calc(r.controlHeight).div(2).equal(), paddingInlineEnd: r.calc(r.controlHeight).div(2).equal() }), T = (r) => ({ cursor: "not-allowed", borderColor: r.borderColorDisabled, color: r.colorTextDisabled, background: r.colorBgContainerDisabled, boxShadow: "none" }), b = (r, o, e, t, n, l, c, a) => ({ [`&${r}-background-ghost`]: Object.assign(Object.assign({ color: e || void 0, background: o, borderColor: t || void 0, boxShadow: "none" }, h(r, Object.assign({ background: o }, c), Object.assign({ background: o }, a))), { "&:disabled": { cursor: "not-allowed", color: n || void 0, borderColor: l || void 0 } }) }), w = (r) => ({ [`&:disabled, &${r.componentCls}-disabled`]: Object.assign({}, T(r)) }), L = (r) => ({ [`&:disabled, &${r.componentCls}-disabled`]: { cursor: "not-allowed", color: r.colorTextDisabled } }), u = (r, o, e, t) => {
  const n = t && ["link", "text"].includes(t) ? L : w;
  return Object.assign(Object.assign({}, n(r)), h(r.componentCls, o, e));
}, m = (r, o, e, t, n) => ({ [`&${r.componentCls}-variant-solid`]: Object.assign({ color: o, background: e }, u(r, t, n)) }), p = (r, o, e, t, n) => ({ [`&${r.componentCls}-variant-outlined, &${r.componentCls}-variant-dashed`]: Object.assign({ borderColor: o, background: e }, u(r, t, n)) }), v = (r) => ({ [`&${r.componentCls}-variant-dashed`]: { borderStyle: "dashed" } }), S = (r, o, e, t) => ({ [`&${r.componentCls}-variant-filled`]: Object.assign({ boxShadow: "none", background: o }, u(r, e, t)) }), d = (r, o, e, t, n) => ({ [`&${r.componentCls}-variant-${e}`]: Object.assign({ color: o, boxShadow: "none" }, u(r, t, n, e)) }), z = (r) => Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ color: r.defaultColor, boxShadow: r.defaultShadow }, m(r, r.solidTextColor, r.colorBgSolid, { color: r.solidTextColor, background: r.colorBgSolidHover }, { color: r.solidTextColor, background: r.colorBgSolidActive })), v(r)), S(r, r.colorFillTertiary, { background: r.colorFillSecondary }, { background: r.colorFill })), b(r.componentCls, r.ghostBg, r.defaultGhostColor, r.defaultGhostBorderColor, r.colorTextDisabled, r.colorBorder)), d(r, r.textTextColor, "link", { color: r.colorLinkHover, background: r.linkHoverBg }, { color: r.colorLinkActive })), D = (r) => Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ color: r.colorPrimary, boxShadow: r.primaryShadow }, p(r, r.colorPrimary, r.colorBgContainer, { color: r.colorPrimaryTextHover, borderColor: r.colorPrimaryHover, background: r.colorBgContainer }, { color: r.colorPrimaryTextActive, borderColor: r.colorPrimaryActive, background: r.colorBgContainer })), v(r)), S(r, r.colorPrimaryBg, { background: r.colorPrimaryBgHover }, { background: r.colorPrimaryBorder })), d(r, r.colorPrimaryText, "text", { color: r.colorPrimaryTextHover, background: r.colorPrimaryBg }, { color: r.colorPrimaryTextActive, background: r.colorPrimaryBorder })), d(r, r.colorPrimaryText, "link", { color: r.colorPrimaryTextHover, background: r.linkHoverBg }, { color: r.colorPrimaryTextActive })), b(r.componentCls, r.ghostBg, r.colorPrimary, r.colorPrimary, r.colorTextDisabled, r.colorBorder, { color: r.colorPrimaryHover, borderColor: r.colorPrimaryHover }, { color: r.colorPrimaryActive, borderColor: r.colorPrimaryActive })), F = (r) => Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ color: r.colorError, boxShadow: r.dangerShadow }, m(r, r.dangerColor, r.colorError, { background: r.colorErrorHover }, { background: r.colorErrorActive })), p(r, r.colorError, r.colorBgContainer, { color: r.colorErrorHover, borderColor: r.colorErrorBorderHover }, { color: r.colorErrorActive, borderColor: r.colorErrorActive })), v(r)), S(r, r.colorErrorBg, { background: r.colorErrorBgFilledHover }, { background: r.colorErrorBgActive })), d(r, r.colorError, "text", { color: r.colorErrorHover, background: r.colorErrorBg }, { color: r.colorErrorHover, background: r.colorErrorBgActive })), d(r, r.colorError, "link", { color: r.colorErrorHover }, { color: r.colorErrorActive })), b(r.componentCls, r.ghostBg, r.colorError, r.colorError, r.colorTextDisabled, r.colorBorder, { color: r.colorErrorHover, borderColor: r.colorErrorHover }, { color: r.colorErrorActive, borderColor: r.colorErrorActive })), G = (r) => Object.assign(Object.assign({}, d(r, r.colorLink, "link", { color: r.colorLinkHover }, { color: r.colorLinkActive })), b(r.componentCls, r.ghostBg, r.colorInfo, r.colorInfo, r.colorTextDisabled, r.colorBorder, { color: r.colorInfoHover, borderColor: r.colorInfoHover }, { color: r.colorInfoActive, borderColor: r.colorInfoActive })), R = (r) => {
  const { componentCls: o } = r;
  return Object.assign({ [`${o}-color-default`]: z(r), [`${o}-color-primary`]: D(r), [`${o}-color-dangerous`]: F(r), [`${o}-color-link`]: G(r) }, ((e) => {
    const { componentCls: t } = e;
    return E.reduce((n, l) => {
      const c = e[`${l}6`], a = e[`${l}1`], i = e[`${l}5`], s = e[`${l}2`], B = e[`${l}3`], g = e[`${l}7`];
      return Object.assign(Object.assign({}, n), { [`&${t}-color-${l}`]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ color: c, boxShadow: e[`${l}ShadowColor`] }, m(e, e.colorTextLightSolid, c, { background: i }, { background: g })), p(e, c, e.colorBgContainer, { color: i, borderColor: i, background: e.colorBgContainer }, { color: g, borderColor: g, background: e.colorBgContainer })), v(e)), S(e, a, { background: s }, { background: B })), d(e, c, "link", { color: i }, { color: g })), d(e, c, "text", { color: i, background: a }, { color: g, background: B })) });
    }, {});
  })(r));
}, M = (r) => Object.assign(Object.assign(Object.assign(Object.assign({}, p(r, r.defaultBorderColor, r.defaultBg, { color: r.defaultHoverColor, borderColor: r.defaultHoverBorderColor, background: r.defaultHoverBg }, { color: r.defaultActiveColor, borderColor: r.defaultActiveBorderColor, background: r.defaultActiveBg })), d(r, r.textTextColor, "text", { color: r.textTextHoverColor, background: r.textHoverBg }, { color: r.textTextActiveColor, background: r.colorBgTextActive })), m(r, r.primaryColor, r.colorPrimary, { background: r.colorPrimaryHover, color: r.primaryColor }, { background: r.colorPrimaryActive, color: r.primaryColor })), d(r, r.colorLink, "link", { color: r.colorLinkHover, background: r.linkHoverBg }, { color: r.colorLinkActive })), k = function(r) {
  let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  const { componentCls: e, controlHeight: t, fontSize: n, borderRadius: l, buttonPaddingHorizontal: c, iconCls: a, buttonPaddingVertical: i, buttonIconOnlyFontSize: s } = r;
  return [{ [o]: { fontSize: n, height: t, padding: `${C(i)} ${C(c)}`, borderRadius: l, [`&${e}-icon-only`]: { width: t, [a]: { fontSize: s } } } }, { [`${e}${e}-circle${o}`]: I(r) }, { [`${e}${e}-round${o}`]: A(r) }];
}, q = (r) => {
  const o = y(r, { fontSize: r.contentFontSize });
  return k(o, r.componentCls);
}, W = (r) => {
  const o = y(r, { controlHeight: r.controlHeightSM, fontSize: r.contentFontSizeSM, padding: r.paddingXS, buttonPaddingHorizontal: r.paddingInlineSM, buttonPaddingVertical: 0, borderRadius: r.borderRadiusSM, buttonIconOnlyFontSize: r.onlyIconSizeSM });
  return k(o, `${r.componentCls}-sm`);
}, V = (r) => {
  const o = y(r, { controlHeight: r.controlHeightLG, fontSize: r.contentFontSizeLG, buttonPaddingHorizontal: r.paddingInlineLG, buttonPaddingVertical: 0, borderRadius: r.borderRadiusLG, buttonIconOnlyFontSize: r.onlyIconSizeLG });
  return k(o, `${r.componentCls}-lg`);
}, X = (r) => {
  const { componentCls: o } = r;
  return { [o]: { [`&${o}-block`]: { width: "100%" } } };
}, ur = x("Button", (r) => {
  const o = j(r);
  return [P(o), q(o), W(o), V(o), X(o), R(o), M(o), H(o)];
}, f, { unitless: { fontWeight: !0, contentLineHeight: !0, contentLineHeightSM: !0, contentLineHeightLG: !0 } });
export {
  ur as default
};
