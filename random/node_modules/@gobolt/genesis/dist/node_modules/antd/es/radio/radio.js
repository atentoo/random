import * as n from "react";
import v from "../../../../_virtual/index.js";
import { Checkbox as S } from "../../../rc-checkbox/es/index.js";
import { composeRef as V } from "../../../rc-util/es/ref.js";
import { devUseWarning as F } from "../_util/warning.js";
import G from "../_util/wave/index.js";
import { TARGET_CLS as A } from "../_util/wave/interface.js";
import q from "../checkbox/useBubbleLock.js";
import "../config-provider/index.js";
import z from "../config-provider/DisabledContext.js";
import B from "../config-provider/hooks/useCSSVarCls.js";
import { FormItemInputContext as H } from "../form/context.js";
import U, { RadioOptionTypeContext as W } from "./context.js";
import J from "./style/index.js";
import { ConfigContext as K } from "../config-provider/context.js";
var Q = function(o, s) {
  var l = {};
  for (var r in o) Object.prototype.hasOwnProperty.call(o, r) && s.indexOf(r) < 0 && (l[r] = o[r]);
  if (o != null && typeof Object.getOwnPropertySymbols == "function") {
    var e = 0;
    for (r = Object.getOwnPropertySymbols(o); e < r.length; e++) s.indexOf(r[e]) < 0 && Object.prototype.propertyIsEnumerable.call(o, r[e]) && (l[r[e]] = o[r[e]]);
  }
  return l;
};
const X = (o, s) => {
  var l, r;
  const e = n.useContext(U), b = n.useContext(W), { getPrefixCls: y, direction: O, radio: i } = n.useContext(K), x = n.useRef(null), N = V(s, x), { isFormItemInput: g } = n.useContext(H);
  if (process.env.NODE_ENV !== "production") {
    const m = F("Radio");
    process.env.NODE_ENV !== "production" && m(!("optionType" in o), "usage", "`optionType` is only support in Radio.Group.");
  }
  const E = (m) => {
    var c, d;
    (c = o.onChange) === null || c === void 0 || c.call(o, m), (d = e == null ? void 0 : e.onChange) === null || d === void 0 || d.call(e, m);
  }, { prefixCls: h, className: w, rootClassName: R, children: u, style: k, title: j } = o, $ = Q(o, ["prefixCls", "className", "rootClassName", "children", "style", "title"]), p = y("radio", h), f = ((e == null ? void 0 : e.optionType) || b) === "button", a = f ? `${p}-button` : p, C = B(p), [I, T, _] = J(p, C), t = Object.assign({}, $), M = n.useContext(z);
  e && (t.name = e.name, t.onChange = E, t.checked = o.value === e.value, t.disabled = (l = t.disabled) !== null && l !== void 0 ? l : e.disabled), t.disabled = (r = t.disabled) !== null && r !== void 0 ? r : M;
  const P = v(`${a}-wrapper`, { [`${a}-wrapper-checked`]: t.checked, [`${a}-wrapper-disabled`]: t.disabled, [`${a}-wrapper-rtl`]: O === "rtl", [`${a}-wrapper-in-form-item`]: g, [`${a}-wrapper-block`]: !!(e != null && e.block) }, i == null ? void 0 : i.className, w, R, T, _, C), [D, L] = q(t.onClick);
  return I(n.createElement(G, { component: "Radio", disabled: t.disabled }, n.createElement("label", { className: P, style: Object.assign(Object.assign({}, i == null ? void 0 : i.style), k), onMouseEnter: o.onMouseEnter, onMouseLeave: o.onMouseLeave, title: j, onClick: D }, n.createElement(S, Object.assign({}, t, { className: v(t.className, { [A]: !f }), type: "radio", prefixCls: a, ref: N, onClick: L })), u !== void 0 ? n.createElement("span", { className: `${a}-label` }, u) : null)));
}, Y = n.forwardRef(X);
process.env.NODE_ENV !== "production" && (Y.displayName = "Radio");
export {
  Y as default
};
