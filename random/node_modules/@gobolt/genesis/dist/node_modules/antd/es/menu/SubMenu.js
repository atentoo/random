import * as e from "react";
import m from "../../../../_virtual/index.js";
import "../../../rc-menu/es/index.js";
import N from "../../../rc-util/es/omit.js";
import { useZIndex as x } from "../_util/hooks/useZIndex.js";
import { cloneElement as C } from "../_util/reactNode.js";
import p from "./MenuContext.js";
import { useFullPath as $ } from "../../../rc-menu/es/context/PathContext.js";
import b from "../../../rc-menu/es/SubMenu/index.js";
const P = (l) => {
  var o;
  const { popupClassName: r, icon: n, title: t, theme: c } = l, a = e.useContext(p), { prefixCls: s, inlineCollapsed: u, theme: f } = a, d = $();
  let i;
  if (n) {
    const v = e.isValidElement(t) && t.type === "span";
    i = e.createElement(e.Fragment, null, C(n, { className: m(e.isValidElement(n) ? (o = n.props) === null || o === void 0 ? void 0 : o.className : "", `${s}-item-icon`) }), v ? t : e.createElement("span", { className: `${s}-title-content` }, t));
  } else i = u && !d.length && t && typeof t == "string" ? e.createElement("div", { className: `${s}-inline-collapsed-noicon` }, t.charAt(0)) : e.createElement("span", { className: `${s}-title-content` }, t);
  const E = e.useMemo(() => Object.assign(Object.assign({}, a), { firstLevel: !1 }), [a]), [g] = x("Menu");
  return e.createElement(p.Provider, { value: E }, e.createElement(b, Object.assign({}, N(l, ["icon"]), { title: i, popupClassName: m(s, r, `${s}-${c || f}`), popupStyle: Object.assign({ zIndex: g }, l.popupStyle) })));
};
export {
  P as default
};
