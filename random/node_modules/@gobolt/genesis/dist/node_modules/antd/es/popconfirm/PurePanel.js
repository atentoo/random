import * as t from "react";
import d from "../../../@ant-design/icons/es/icons/ExclamationCircleFilled.js";
import E from "../../../../_virtual/index.js";
import N from "../_util/ActionButton.js";
import { getRenderPropValue as x } from "../_util/getRenderPropValue.js";
import j from "../button/button.js";
import { convertLegacyProps as k } from "../button/buttonHelpers.js";
import "../config-provider/index.js";
import $ from "../locale/en_US.js";
import T from "../popover/PurePanel.js";
import h from "./style/index.js";
import { ConfigContext as C } from "../config-provider/context.js";
import w from "../locale/useLocale.js";
var z = function(o, r) {
  var l = {};
  for (var e in o) Object.prototype.hasOwnProperty.call(o, e) && r.indexOf(e) < 0 && (l[e] = o[e]);
  if (o != null && typeof Object.getOwnPropertySymbols == "function") {
    var s = 0;
    for (e = Object.getOwnPropertySymbols(o); s < e.length; s++) r.indexOf(e[s]) < 0 && Object.prototype.propertyIsEnumerable.call(o, e[s]) && (l[e[s]] = o[e[s]]);
  }
  return l;
};
const B = (o) => {
  const { prefixCls: r, okButtonProps: l, cancelButtonProps: e, title: s, description: c, cancelText: m, okText: n, okType: i = "primary", icon: p = t.createElement(d, null), showCancel: y = !0, close: g, onConfirm: v, onCancel: O, onPopupClick: P } = o, { getPrefixCls: b } = t.useContext(C), [a] = w("Popconfirm", $.Popconfirm), f = x(s), u = x(c);
  return t.createElement("div", { className: `${r}-inner-content`, onClick: P }, t.createElement("div", { className: `${r}-message` }, p && t.createElement("span", { className: `${r}-message-icon` }, p), t.createElement("div", { className: `${r}-message-text` }, f && t.createElement("div", { className: `${r}-title` }, f), u && t.createElement("div", { className: `${r}-description` }, u))), t.createElement("div", { className: `${r}-buttons` }, y && t.createElement(j, Object.assign({ onClick: O, size: "small" }, e), m || (a == null ? void 0 : a.cancelText)), t.createElement(N, { buttonProps: Object.assign(Object.assign({ size: "small" }, k(i)), l), actionFn: v, close: g, prefixCls: b("btn"), quitOnNullishReturnValue: !0, emitEvent: !0 }, n || (a == null ? void 0 : a.okText))));
}, J = (o) => {
  const { prefixCls: r, placement: l, className: e, style: s } = o, c = z(o, ["prefixCls", "placement", "className", "style"]), { getPrefixCls: m } = t.useContext(C), n = m("popconfirm", r), [i] = h(n);
  return i(t.createElement(T, { placement: l, className: E(n, e), style: s, content: t.createElement(B, Object.assign({ prefixCls: n }, c)) }));
};
export {
  B as Overlay,
  J as default
};
