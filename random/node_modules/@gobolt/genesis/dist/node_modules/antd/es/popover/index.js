import * as p from "react";
import j from "../../../../_virtual/index.js";
import q from "../../../rc-util/es/hooks/useMergedState.js";
import M from "../../../rc-util/es/KeyCode.js";
import { getRenderPropValue as E } from "../_util/getRenderPropValue.js";
import { getTransitionName as T } from "../_util/motion.js";
import { cloneElement as A } from "../_util/reactNode.js";
import G from "../tooltip/index.js";
import H, { Overlay as J } from "./PurePanel.js";
import { useComponentConfig as Q } from "../config-provider/context.js";
import X from "./style/index.js";
var Z = function(e, r) {
  var l = {};
  for (var o in e) Object.prototype.hasOwnProperty.call(e, o) && r.indexOf(o) < 0 && (l[o] = e[o]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function") {
    var t = 0;
    for (o = Object.getOwnPropertySymbols(e); t < o.length; t++) r.indexOf(o[t]) < 0 && Object.prototype.propertyIsEnumerable.call(e, o[t]) && (l[o[t]] = e[o[t]]);
  }
  return l;
};
const D = p.forwardRef((e, r) => {
  var l, o;
  const { prefixCls: t, title: h, content: x, overlayClassName: P, placement: w = "top", trigger: S = "hover", children: a, mouseEnterDelay: V = 0.1, mouseLeaveDelay: _ = 0.1, onOpenChange: f, overlayStyle: L = {}, styles: s, classNames: i } = e, u = Z(e, ["prefixCls", "title", "content", "overlayClassName", "placement", "trigger", "children", "mouseEnterDelay", "mouseLeaveDelay", "onOpenChange", "overlayStyle", "styles", "classNames"]), { getPrefixCls: v, className: I, style: K, classNames: d, styles: g } = Q("popover"), y = v("popover", t), [R, k, z] = X(y), B = v(), F = j(P, k, z, I, d.root, i == null ? void 0 : i.root), U = j(d.body, i == null ? void 0 : i.body), [W, Y] = q(!1, { value: (l = e.open) !== null && l !== void 0 ? l : e.visible, defaultValue: (o = e.defaultOpen) !== null && o !== void 0 ? o : e.defaultVisible }), O = (n, m) => {
    Y(n, !0), f == null || f(n, m);
  }, b = E(h), C = E(x);
  return R(p.createElement(G, Object.assign({ placement: w, trigger: S, mouseEnterDelay: V, mouseLeaveDelay: _ }, u, { prefixCls: y, classNames: { root: F, body: U }, styles: { root: Object.assign(Object.assign(Object.assign(Object.assign({}, g.root), K), L), s == null ? void 0 : s.root), body: Object.assign(Object.assign({}, g.body), s == null ? void 0 : s.body) }, ref: r, open: W, onOpenChange: (n) => {
    O(n);
  }, overlay: b || C ? p.createElement(J, { prefixCls: y, title: b, content: C }) : null, transitionName: T(B, "zoom-big", u.transitionName), "data-popover-inject": !0 }), A(a, { onKeyDown: (n) => {
    var m, c;
    p.isValidElement(a) && ((c = a == null ? void 0 : (m = a.props).onKeyDown) === null || c === void 0 || c.call(m, n)), ((N) => {
      N.keyCode === M.ESC && O(!1, N);
    })(n);
  } })));
});
D._InternalPanelDoNotUseOrYouWillBeFired = H, process.env.NODE_ENV !== "production" && (D.displayName = "Popover");
export {
  D as default
};
