import m from "../../../@ant-design/colors/es/generate.js";
import "../../../@ant-design/colors/es/presets.js";
import { FastColor as p } from "../../../@ant-design/fast-color/es/FastColor.js";
import s from "../../../rc-util/es/Dom/canUseDom.js";
import { updateCSS as f } from "../../../rc-util/es/Dom/dynamicCSS.js";
import g from "../_util/warning.js";
const y = `-ant-${Date.now()}-${Math.random()}`;
function C(l, e) {
  const o = {}, c = (i, n) => {
    let t = i.clone();
    return t = (n == null ? void 0 : n(t)) || t, t.toRgbString();
  }, a = (i, n) => {
    const t = new p(i), r = m(t.toRgbString());
    o[`${n}-color`] = c(t), o[`${n}-color-disabled`] = r[1], o[`${n}-color-hover`] = r[4], o[`${n}-color-active`] = r[6], o[`${n}-color-outline`] = t.clone().setA(0.2).toRgbString(), o[`${n}-color-deprecated-bg`] = r[0], o[`${n}-color-deprecated-border`] = r[2];
  };
  if (e.primaryColor) {
    a(e.primaryColor, "primary");
    const i = new p(e.primaryColor), n = m(i.toRgbString());
    n.forEach((r, d) => {
      o[`primary-${d + 1}`] = r;
    }), o["primary-color-deprecated-l-35"] = c(i, (r) => r.lighten(35)), o["primary-color-deprecated-l-20"] = c(i, (r) => r.lighten(20)), o["primary-color-deprecated-t-20"] = c(i, (r) => r.tint(20)), o["primary-color-deprecated-t-50"] = c(i, (r) => r.tint(50)), o["primary-color-deprecated-f-12"] = c(i, (r) => r.setA(0.12 * r.a));
    const t = new p(n[0]);
    o["primary-color-active-deprecated-f-30"] = c(t, (r) => r.setA(0.3 * r.a)), o["primary-color-active-deprecated-d-02"] = c(t, (r) => r.darken(2));
  }
  return e.successColor && a(e.successColor, "success"), e.warningColor && a(e.warningColor, "warning"), e.errorColor && a(e.errorColor, "error"), e.infoColor && a(e.infoColor, "info"), `
  :root {
    ${Object.keys(o).map((i) => `--${l}-${i}: ${o[i]};`).join(`
`)}
  }
  `.trim();
}
function w(l, e) {
  const o = C(l, e);
  s() ? f(o, `${y}-dynamic-theme`) : process.env.NODE_ENV !== "production" && g(!1, "ConfigProvider", "SSR do not support dynamic theme with css variables.");
}
export {
  C as getStyle,
  w as registerTheme
};
