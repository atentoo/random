import * as t from "react";
import { FastColor as U } from "../../../@ant-design/fast-color/es/FastColor.js";
import q from "../../../@ant-design/icons/es/icons/CheckCircleFilled.js";
import B from "../../../@ant-design/icons/es/icons/CheckOutlined.js";
import G from "../../../@ant-design/icons/es/icons/CloseCircleFilled.js";
import H from "../../../@ant-design/icons/es/icons/CloseOutlined.js";
import z from "../../../../_virtual/index.js";
import J from "../../../rc-util/es/omit.js";
import { devUseWarning as K } from "../_util/warning.js";
import "../config-provider/index.js";
import Q from "./Circle.js";
import X from "./Line.js";
import Y from "./Steps.js";
import Z from "./style/index.js";
import { getSuccessPercent as k, validProgress as S, getSize as ee } from "./utils.js";
import { ConfigContext as se } from "../config-provider/context.js";
var te = function(e, $) {
  var m = {};
  for (var o in e) Object.prototype.hasOwnProperty.call(e, o) && $.indexOf(o) < 0 && (m[o] = e[o]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function") {
    var c = 0;
    for (o = Object.getOwnPropertySymbols(e); c < o.length; c++) $.indexOf(o[c]) < 0 && Object.prototype.propertyIsEnumerable.call(e, o[c]) && (m[o[c]] = e[o[c]]);
  }
  return m;
};
const re = ["normal", "exception", "active", "success"], oe = t.forwardRef((e, $) => {
  const { prefixCls: m, className: o, rootClassName: c, steps: p, strokeColor: a, percent: d = 0, size: f = "default", showInfo: E = !0, type: n = "line", status: h, format: N, style: A, percentPosition: _ = {} } = e, D = te(e, ["prefixCls", "className", "rootClassName", "steps", "strokeColor", "percent", "size", "showInfo", "type", "status", "format", "style", "percentPosition"]), { align: P = "end", type: g = "outer" } = _, u = Array.isArray(a) ? a[0] : a, I = typeof a == "string" || Array.isArray(a) ? a : void 0, M = t.useMemo(() => {
    if (u) {
      const r = typeof u == "string" ? u : Object.values(u)[0];
      return new U(r).isLight();
    }
    return !1;
  }, [a]), O = t.useMemo(() => {
    var r, i;
    const b = k(e);
    return parseInt(b !== void 0 ? (r = b ?? 0) === null || r === void 0 ? void 0 : r.toString() : (i = d ?? 0) === null || i === void 0 ? void 0 : i.toString(), 10);
  }, [d, e.success, e.successPercent]), l = t.useMemo(() => !re.includes(h) && O >= 100 ? "success" : h || "normal", [h, O]), { getPrefixCls: V, direction: w, progress: x } = t.useContext(se), s = V("progress", m), [L, T, W] = Z(s), C = n === "line", y = C && !p, j = t.useMemo(() => {
    if (!E) return null;
    const r = k(e);
    let i;
    const b = C && M && g === "inner";
    return g === "inner" || N || l !== "exception" && l !== "success" ? i = (N || ((R) => `${R}%`))(S(d), S(r)) : l === "exception" ? i = C ? t.createElement(G, null) : t.createElement(H, null) : l === "success" && (i = C ? t.createElement(q, null) : t.createElement(B, null)), t.createElement("span", { className: z(`${s}-text`, { [`${s}-text-bright`]: b, [`${s}-text-${P}`]: y, [`${s}-text-${g}`]: y }), title: typeof i == "string" ? i : void 0 }, i);
  }, [E, d, O, l, n, s, N]);
  if (process.env.NODE_ENV !== "production") {
    const r = K("Progress");
    r.deprecated(!("successPercent" in e), "successPercent", "success.percent"), r.deprecated(!("width" in e), "width", "size"), n !== "circle" && n !== "dashboard" || (Array.isArray(f) ? process.env.NODE_ENV !== "production" && r(!1, "usage", 'Type "circle" and "dashboard" do not accept array as `size`, please use number or preset size instead.') : typeof f == "object" && process.env.NODE_ENV !== "production" && r(!1, "usage", 'Type "circle" and "dashboard" do not accept object as `size`, please use number or preset size instead.')), e.success && "progress" in e.success && r.deprecated(!1, "success.progress", "success.percent");
  }
  let v;
  n === "line" ? v = p ? t.createElement(Y, Object.assign({}, e, { strokeColor: I, prefixCls: s, steps: typeof p == "object" ? p.count : p }), j) : t.createElement(X, Object.assign({}, e, { strokeColor: u, prefixCls: s, direction: w, percentPosition: { align: P, type: g } }), j) : n !== "circle" && n !== "dashboard" || (v = t.createElement(Q, Object.assign({}, e, { strokeColor: u, prefixCls: s, progressStatus: l }), j));
  const F = z(s, `${s}-status-${l}`, { [`${s}-${n === "dashboard" ? "circle" : n}`]: n !== "line", [`${s}-inline-circle`]: n === "circle" && ee(f, "circle")[0] <= 20, [`${s}-line`]: y, [`${s}-line-align-${P}`]: y, [`${s}-line-position-${g}`]: y, [`${s}-steps`]: p, [`${s}-show-info`]: E, [`${s}-${f}`]: typeof f == "string", [`${s}-rtl`]: w === "rtl" }, x == null ? void 0 : x.className, o, c, T, W);
  return L(t.createElement("div", Object.assign({ ref: $, style: Object.assign(Object.assign({}, x == null ? void 0 : x.style), A), className: F, role: "progressbar", "aria-valuenow": O, "aria-valuemin": 0, "aria-valuemax": 100 }, J(D, ["trailColor", "strokeWidth", "width", "gapDegree", "gapPosition", "strokeLinecap", "success", "successPercent"])), v));
});
process.env.NODE_ENV !== "production" && (oe.displayName = "Progress");
export {
  oe as default
};
