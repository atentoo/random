import * as e from "react";
import S from "../../../@ant-design/icons/es/icons/CheckOutlined.js";
import C from "../../../@ant-design/icons/es/icons/CloseCircleFilled.js";
import b from "../../../@ant-design/icons/es/icons/CloseOutlined.js";
import k from "../../../@ant-design/icons/es/icons/DownOutlined.js";
import F from "../../../@ant-design/icons/es/icons/LoadingOutlined.js";
import R from "../../../@ant-design/icons/es/icons/SearchOutlined.js";
import { devUseWarning as j } from "../_util/warning.js";
function $(s) {
  let { suffixIcon: n, clearIcon: t, menuItemSelectedIcon: c, removeIcon: m, loading: u, multiple: p, hasFeedback: a, prefixCls: I, showSuffixIcon: d, feedbackIcon: E, showArrow: v, componentName: x } = s;
  process.env.NODE_ENV !== "production" && j(x).deprecated(!t, "clearIcon", "allowClear={{ clearIcon: React.ReactNode }}");
  const N = t ?? e.createElement(C, null), r = (l) => n !== null || a || v ? e.createElement(e.Fragment, null, d !== !1 && l, a && E) : null;
  let o = null;
  if (n !== void 0) o = r(n);
  else if (u) o = r(e.createElement(F, { spin: !0 }));
  else {
    const l = `${I}-suffix`;
    o = (h) => {
      let { open: w, showSearch: g } = h;
      return r(w && g ? e.createElement(R, { className: l }) : e.createElement(k, { className: l }));
    };
  }
  let i = null;
  i = c !== void 0 ? c : p ? e.createElement(S, null) : null;
  let f = null;
  return f = m !== void 0 ? m : e.createElement(b, null), { clearIcon: N, suffixIcon: o, itemIcon: i, removeIcon: f };
}
export {
  $ as default
};
