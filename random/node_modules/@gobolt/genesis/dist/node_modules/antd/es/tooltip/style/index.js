import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as d } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as S } from "../../style/index.js";
import { initZoomMotion as v } from "../../style/motion/zoom.js";
import k, { MAX_VERTICAL_CONTENT_RADIUS as O, getArrowOffsetToken as j } from "../../style/placementArrow.js";
import { getArrowToken as T } from "../../style/roundedArrow.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as m } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as y } from "../../theme/util/genStyleUtils.js";
import z from "../../theme/util/genPresetColor.js";
const C = (o) => {
  const { calc: r, componentCls: t, tooltipMaxWidth: a, tooltipColor: n, tooltipBg: i, tooltipBorderRadius: e, zIndexPopup: s, controlHeight: c, boxShadowSecondary: g, paddingSM: u, paddingXS: b, arrowOffsetHorizontal: f, sizePopupArrow: p } = o, h = r(e).add(p).add(f).equal(), x = r(e).mul(2).add(p).equal();
  return [{ [t]: Object.assign(Object.assign(Object.assign(Object.assign({}, S(o)), { position: "absolute", zIndex: s, display: "block", width: "max-content", maxWidth: a, visibility: "visible", "--valid-offset-x": "var(--arrow-offset-horizontal, var(--arrow-x))", transformOrigin: ["var(--valid-offset-x, 50%)", "var(--arrow-y, 50%)"].join(" "), "&-hidden": { display: "none" }, "--antd-arrow-background-color": i, [`${t}-inner`]: { minWidth: x, minHeight: c, padding: `${d(o.calc(u).div(2).equal())} ${d(b)}`, color: n, textAlign: "start", textDecoration: "none", wordWrap: "break-word", backgroundColor: i, borderRadius: e, boxShadow: g, boxSizing: "border-box" }, [["&-placement-topLeft", "&-placement-topRight", "&-placement-bottomLeft", "&-placement-bottomRight"].join(",")]: { minWidth: h }, [["&-placement-left", "&-placement-leftTop", "&-placement-leftBottom", "&-placement-right", "&-placement-rightTop", "&-placement-rightBottom"].join(",")]: { [`${t}-inner`]: { borderRadius: o.min(e, O) } }, [`${t}-content`]: { position: "relative" } }), z(o, (w, R) => {
    let { darkColor: l } = R;
    return { [`&${t}-${w}`]: { [`${t}-inner`]: { backgroundColor: l }, [`${t}-arrow`]: { "--antd-arrow-background-color": l } } };
  })), { "&-rtl": { direction: "rtl" } }) }, k(o, "var(--antd-arrow-background-color)"), { [`${t}-pure`]: { position: "relative", maxWidth: "none", margin: o.sizePopupArrow } }];
}, $ = (o) => Object.assign(Object.assign({ zIndexPopup: o.zIndexPopupBase + 70 }, j({ contentRadius: o.borderRadius, limitVerticalRadius: !0 })), T(m(o, { borderRadiusOuter: Math.min(o.borderRadiusOuter, 4) }))), Y = function(o) {
  return y("Tooltip", (r) => {
    const { borderRadius: t, colorTextLightSolid: a, colorBgSpotlight: n } = r, i = m(r, { tooltipMaxWidth: 250, tooltipColor: a, tooltipBorderRadius: t, tooltipBg: n });
    return [C(i), v(r, "zoom-big-fast")];
  }, $, { resetStyle: !1, injectStyle: !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1] })(o);
};
export {
  Y as default,
  $ as prepareComponentToken
};
