import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as a } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetIcon as b } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as g } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
const S = (e) => {
  const { multipleSelectItemHeight: t, paddingXXS: i, lineWidth: n, INTERNAL_FIXED_ITEM_MARGIN: l } = e, o = e.max(e.calc(i).sub(n).equal(), 0);
  return { basePadding: o, containerPadding: e.max(e.calc(o).sub(l).equal(), 0), itemHeight: a(t), itemLineHeight: a(e.calc(t).sub(e.calc(e.lineWidth).mul(2)).equal()) };
}, I = (e) => {
  const { componentCls: t, iconCls: i, borderRadiusSM: n, motionDurationSlow: l, paddingXS: o, multipleItemColorDisabled: c, multipleItemBorderColorDisabled: m, colorIcon: r, colorIconHover: s, INTERNAL_FIXED_ITEM_MARGIN: d } = e;
  return { [`${t}-selection-overflow`]: { position: "relative", display: "flex", flex: "auto", flexWrap: "wrap", maxWidth: "100%", "&-item": { flex: "none", alignSelf: "center", maxWidth: "100%", display: "inline-flex" }, [`${t}-selection-item`]: { display: "flex", alignSelf: "center", flex: "none", boxSizing: "border-box", maxWidth: "100%", marginBlock: d, borderRadius: n, cursor: "default", transition: `font-size ${l}, line-height ${l}, height ${l}`, marginInlineEnd: e.calc(d).mul(2).equal(), paddingInlineStart: o, paddingInlineEnd: e.calc(o).div(2).equal(), [`${t}-disabled&`]: { color: c, borderColor: m, cursor: "not-allowed" }, "&-content": { display: "inline-block", marginInlineEnd: e.calc(o).div(2).equal(), overflow: "hidden", whiteSpace: "pre", textOverflow: "ellipsis" }, "&-remove": Object.assign(Object.assign({}, b()), { display: "inline-flex", alignItems: "center", color: r, fontWeight: "bold", fontSize: 10, lineHeight: "inherit", cursor: "pointer", [`> ${i}`]: { verticalAlign: "-0.2em" }, "&:hover": { color: s } }) } } };
}, $ = (e, t) => {
  const { componentCls: i, INTERNAL_FIXED_ITEM_MARGIN: n } = e, l = `${i}-selection-overflow`, o = e.multipleSelectItemHeight, c = ((s) => {
    const { multipleSelectItemHeight: d, selectHeight: p, lineWidth: h } = s;
    return s.calc(p).sub(d).div(2).sub(h).equal();
  })(e), m = t ? `${i}-${t}` : "", r = S(e);
  return { [`${i}-multiple${m}`]: Object.assign(Object.assign({}, I(e)), { [`${i}-selector`]: { display: "flex", alignItems: "center", width: "100%", height: "100%", paddingInline: r.basePadding, paddingBlock: r.containerPadding, borderRadius: e.borderRadius, [`${i}-disabled&`]: { background: e.multipleSelectorBgDisabled, cursor: "not-allowed" }, "&:after": { display: "inline-block", width: 0, margin: `${a(n)} 0`, lineHeight: a(o), visibility: "hidden", content: '"\\a0"' } }, [`${i}-selection-item`]: { height: r.itemHeight, lineHeight: a(r.itemLineHeight) }, [`${i}-selection-wrap`]: { alignSelf: "flex-start", "&:after": { lineHeight: a(o), marginBlock: n } }, [`${i}-prefix`]: { marginInlineStart: e.calc(e.inputPaddingHorizontalBase).sub(r.basePadding).equal() }, [`${l}-item + ${l}-item,
        ${i}-prefix + ${i}-selection-wrap
      `]: { [`${i}-selection-search`]: { marginInlineStart: 0 }, [`${i}-selection-placeholder`]: { insetInlineStart: 0 } }, [`${l}-item-suffix`]: { minHeight: r.itemHeight, marginBlock: n }, [`${i}-selection-search`]: { display: "inline-flex", position: "relative", maxWidth: "100%", marginInlineStart: e.calc(e.inputPaddingHorizontalBase).sub(c).equal(), "\n          &-input,\n          &-mirror\n        ": { height: o, fontFamily: e.fontFamily, lineHeight: a(o), transition: `all ${e.motionDurationSlow}` }, "&-input": { width: "100%", minWidth: 4.1 }, "&-mirror": { position: "absolute", top: 0, insetInlineStart: 0, insetInlineEnd: "auto", zIndex: 999, whiteSpace: "pre", visibility: "hidden" } }, [`${i}-selection-placeholder`]: { position: "absolute", top: "50%", insetInlineStart: e.calc(e.inputPaddingHorizontalBase).sub(r.basePadding).equal(), insetInlineEnd: e.inputPaddingHorizontalBase, transform: "translateY(-50%)", transition: `all ${e.motionDurationSlow}` } }) };
};
function u(e, t) {
  const { componentCls: i } = e, n = t ? `${i}-${t}` : "", l = { [`${i}-multiple${n}`]: { fontSize: e.fontSize, [`${i}-selector`]: { [`${i}-show-search&`]: { cursor: "text" } }, [`
        &${i}-show-arrow ${i}-selector,
        &${i}-allow-clear ${i}-selector
      `]: { paddingInlineEnd: e.calc(e.fontSizeIcon).add(e.controlPaddingHorizontal).equal() } } };
  return [$(e, t), l];
}
const _ = (e) => {
  const { componentCls: t } = e, i = g(e, { selectHeight: e.controlHeightSM, multipleSelectItemHeight: e.multipleItemHeightSM, borderRadius: e.borderRadiusSM, borderRadiusSM: e.borderRadiusXS }), n = g(e, { fontSize: e.fontSizeLG, selectHeight: e.controlHeightLG, multipleSelectItemHeight: e.multipleItemHeightLG, borderRadius: e.borderRadiusLG, borderRadiusSM: e.borderRadius });
  return [u(e), u(i, "sm"), { [`${t}-multiple${t}-sm`]: { [`${t}-selection-placeholder`]: { insetInline: e.calc(e.controlPaddingHorizontalSM).sub(e.lineWidth).equal() }, [`${t}-selection-search`]: { marginInlineStart: 2 } } }, u(n, "lg")];
};
export {
  _ as default,
  I as genOverflowStyle,
  S as getMultipleSelectorUnit
};
