import { gold as c } from "../../../../@ant-design/colors/es/presets.js";
import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as s } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { operationUnit as p } from "../../style/index.js";
const $ = (i) => {
  const e = {};
  return [1, 2, 3, 4, 5].forEach((o) => {
    e[`
      h${o}&,
      div&-h${o},
      div&-h${o} > textarea,
      h${o}
    `] = ((n, t, l, r) => {
      const { titleMarginBottom: a, fontWeightStrong: d } = r;
      return { marginBottom: a, color: l, fontWeight: d, fontSize: n, lineHeight: t };
    })(i[`fontSizeHeading${o}`], i[`lineHeightHeading${o}`], i.colorTextHeading, i);
  }), e;
}, C = (i) => {
  const { componentCls: e } = i;
  return { "a&, a": Object.assign(Object.assign({}, p(i)), { userSelect: "text", [`&[disabled], &${e}-disabled`]: { color: i.colorTextDisabled, cursor: "not-allowed", "&:active, &:hover": { color: i.colorTextDisabled }, "&:active": { pointerEvents: "none" } } }) };
}, T = (i) => ({ code: { margin: "0 0.2em", paddingInline: "0.4em", paddingBlock: "0.2em 0.1em", fontSize: "85%", fontFamily: i.fontFamilyCode, background: "rgba(150, 150, 150, 0.1)", border: "1px solid rgba(100, 100, 100, 0.2)", borderRadius: 3 }, kbd: { margin: "0 0.2em", paddingInline: "0.4em", paddingBlock: "0.15em 0.1em", fontSize: "90%", fontFamily: i.fontFamilyCode, background: "rgba(150, 150, 150, 0.06)", border: "1px solid rgba(100, 100, 100, 0.2)", borderBottomWidth: 2, borderRadius: 3 }, mark: { padding: 0, backgroundColor: c[2] }, "u, ins": { textDecoration: "underline", textDecorationSkipInk: "auto" }, "s, del": { textDecoration: "line-through" }, strong: { fontWeight: 600 }, "ul, ol": { marginInline: 0, marginBlock: "0 1em", padding: 0, li: { marginInline: "20px 0", marginBlock: 0, paddingInline: "4px 0", paddingBlock: 0 } }, ul: { listStyleType: "circle", ul: { listStyleType: "disc" } }, ol: { listStyleType: "decimal" }, "pre, blockquote": { margin: "1em 0" }, pre: { padding: "0.4em 0.6em", whiteSpace: "pre-wrap", wordWrap: "break-word", background: "rgba(150, 150, 150, 0.1)", border: "1px solid rgba(100, 100, 100, 0.2)", borderRadius: 3, fontFamily: i.fontFamilyCode, code: { display: "inline", margin: 0, padding: 0, fontSize: "inherit", fontFamily: "inherit", background: "transparent", border: 0 } }, blockquote: { paddingInline: "0.6em 0", paddingBlock: 0, borderInlineStart: "4px solid rgba(100, 100, 100, 0.2)", opacity: 0.85 } }), W = (i) => {
  const { componentCls: e, paddingSM: o } = i, n = o;
  return { "&-edit-content": { position: "relative", "div&": { insetInlineStart: i.calc(i.paddingSM).mul(-1).equal(), marginTop: i.calc(n).mul(-1).equal(), marginBottom: `calc(1em - ${s(n)})` }, [`${e}-edit-content-confirm`]: { position: "absolute", insetInlineEnd: i.calc(i.marginXS).add(2).equal(), insetBlockEnd: i.marginXS, color: i.colorTextDescription, fontWeight: "normal", fontSize: i.fontSize, fontStyle: "normal", pointerEvents: "none" }, textarea: { margin: "0!important", MozTransition: "none", height: "1em" } } };
}, z = (i) => ({ [`${i.componentCls}-copy-success`]: { "\n    &,\n    &:hover,\n    &:focus": { color: i.colorSuccess } }, [`${i.componentCls}-copy-icon-only`]: { marginInlineStart: 0 } }), E = () => ({ "\n  a&-ellipsis,\n  span&-ellipsis\n  ": { display: "inline-block", maxWidth: "100%" }, "&-ellipsis-single-line": { whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis", "a&, span&": { verticalAlign: "bottom" }, "> code": { paddingBlock: 0, maxWidth: "calc(100% - 1.2em)", display: "inline-block", overflow: "hidden", textOverflow: "ellipsis", verticalAlign: "bottom", boxSizing: "content-box" } }, "&-ellipsis-multiple-line": { display: "-webkit-box", overflow: "hidden", WebkitLineClamp: 3, WebkitBoxOrient: "vertical" } });
export {
  z as getCopyableStyles,
  W as getEditableStyles,
  E as getEllipsisStyles,
  C as getLinkStyles,
  T as getResetStyles,
  $ as getTitleStyles
};
