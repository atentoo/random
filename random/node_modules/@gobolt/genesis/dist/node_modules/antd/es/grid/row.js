import * as i from "react";
import R from "../../../../_virtual/index.js";
import { responsiveArray as v } from "../_util/responsiveObserver.js";
import "../config-provider/index.js";
import M from "./hooks/useBreakpoint.js";
import _ from "./hooks/useGutter.js";
import B from "./RowContext.js";
import { useRowStyle as k } from "./style/index.js";
import { ConfigContext as A } from "../config-provider/context.js";
var D = function(t, o) {
  var s = {};
  for (var e in t) Object.prototype.hasOwnProperty.call(t, e) && o.indexOf(e) < 0 && (s[e] = t[e]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function") {
    var r = 0;
    for (e = Object.getOwnPropertySymbols(t); r < e.length; r++) o.indexOf(e[r]) < 0 && Object.prototype.propertyIsEnumerable.call(t, e[r]) && (s[e[r]] = t[e[r]]);
  }
  return s;
};
function w(t, o) {
  const [s, e] = i.useState(typeof t == "string" ? t : "");
  return i.useEffect(() => {
    (() => {
      if (typeof t == "string" && e(t), typeof t == "object") for (let r = 0; r < v.length; r++) {
        const a = v[r];
        if (!o || !o[a]) continue;
        const f = t[a];
        if (f !== void 0) return void e(f);
      }
    })();
  }, [JSON.stringify(t), o]), s;
}
const G = i.forwardRef((t, o) => {
  const { prefixCls: s, justify: e, align: r, className: a, style: f, children: b, gutter: j = 0, wrap: c } = t, x = D(t, ["prefixCls", "justify", "align", "className", "style", "children", "gutter", "wrap"]), { getPrefixCls: N, direction: h } = i.useContext(A), m = M(!0, null), g = w(r, m), d = w(e, m), n = N("row", s), [C, E, P] = k(n), l = _(j, m), S = R(n, { [`${n}-no-wrap`]: c === !1, [`${n}-${d}`]: d, [`${n}-${g}`]: g, [`${n}-rtl`]: h === "rtl" }, a, E, P), p = {}, u = l[0] != null && l[0] > 0 ? l[0] / -2 : void 0;
  u && (p.marginLeft = u, p.marginRight = u);
  const [O, y] = l;
  p.rowGap = y;
  const $ = i.useMemo(() => ({ gutter: [O, y], wrap: c }), [O, y, c]);
  return C(i.createElement(B.Provider, { value: $ }, i.createElement("div", Object.assign({}, x, { className: S, style: Object.assign(Object.assign({}, p), f), ref: o }), b)));
});
process.env.NODE_ENV !== "production" && (G.displayName = "Row");
export {
  G as default
};
