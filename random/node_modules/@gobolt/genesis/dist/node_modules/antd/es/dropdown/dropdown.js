import * as o from "react";
import oe from "../../../@ant-design/icons/es/icons/LeftOutlined.js";
import re from "../../../@ant-design/icons/es/icons/RightOutlined.js";
import h from "../../../../_virtual/index.js";
import te from "../../../rc-dropdown/es/Dropdown.js";
import ne from "../../../rc-util/es/hooks/useEvent.js";
import ie from "../../../rc-util/es/hooks/useMergedState.js";
import le from "../../../rc-util/es/omit.js";
import { useZIndex as se } from "../_util/hooks/useZIndex.js";
import ae from "../_util/isPrimitive.js";
import me from "../_util/placements.js";
import pe from "../_util/PurePanel.js";
import { cloneElement as de } from "../_util/reactNode.js";
import { devUseWarning as ue } from "../_util/warning.js";
import ce from "../_util/zindexContext.js";
import "../config-provider/index.js";
import fe from "../config-provider/hooks/useCSSVarCls.js";
import ve from "../menu/index.js";
import { OverrideProvider as ge } from "../menu/OverrideContext.js";
import "../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../rc-util/es/warning.js";
import "../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../rc-util/es/ref.js";
import "../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import Ce from "../theme/useToken.js";
import be from "./style/index.js";
import { ConfigContext as Ee } from "../config-provider/context.js";
const D = (i) => {
  var c;
  const { menu: t, arrow: p, prefixCls: I, children: f, trigger: M, disabled: x, dropdownRender: $, getPopupContainer: R, overlayClassName: z, rootClassName: L, overlayStyle: v, open: P, onOpenChange: d, visible: S, onVisibleChange: j, mouseEnterDelay: W = 0.15, mouseLeaveDelay: k = 0.1, autoAdjustOverflow: U = !0, placement: r = "", overlay: g, transitionName: C } = i, { getPopupContainer: X, getPrefixCls: b, direction: a, dropdown: u } = o.useContext(Ee), m = ue("Dropdown");
  process.env.NODE_ENV !== "production" && ([["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach((e) => {
    let [l, s] = e;
    m.deprecated(!(l in i), l, s);
  }), m.deprecated(!("overlay" in i), "overlay", "menu"));
  const Y = o.useMemo(() => {
    const e = b();
    return C !== void 0 ? C : r.includes("top") ? `${e}-slide-down` : `${e}-slide-up`;
  }, [b, r, C]), B = o.useMemo(() => r ? r.includes("Center") ? r.slice(0, r.indexOf("Center")) : r : a === "rtl" ? "bottomRight" : "bottomLeft", [r, a]);
  if (process.env.NODE_ENV !== "production") {
    if (r.includes("Center")) {
      const e = r.slice(0, r.indexOf("Center"));
      process.env.NODE_ENV !== "production" && m(!r.includes("Center"), "deprecated", `You are using '${r}' placement in Dropdown, which is deprecated. Try to use '${e}' instead.`);
    }
    [["visible", "open"], ["onVisibleChange", "onOpenChange"]].forEach((e) => {
      let [l, s] = e;
      m.deprecated(!(l in i), l, s);
    });
  }
  const n = b("dropdown", I), E = fe(n), [F, T, V] = be(n, E), [, N] = Ce(), w = o.Children.only(ae(f) ? o.createElement("span", null, f) : f), Z = de(w, { className: h(`${n}-trigger`, { [`${n}-rtl`]: a === "rtl" }, w.props.className), disabled: (c = w.props.disabled) !== null && c !== void 0 ? c : x }), y = x ? [] : M, q = !!(y != null && y.includes("contextMenu")), [G, _] = ie(!1, { value: P ?? S }), H = ne((e) => {
    d == null || d(e, { source: "trigger" }), j == null || j(e), _(e);
  }), J = h(z, L, T, V, E, u == null ? void 0 : u.className, { [`${n}-rtl`]: a === "rtl" }), K = me({ arrowPointAtCenter: typeof p == "object" && p.pointAtCenter, autoAdjustOverflow: U, offset: N.marginXXS, arrowWidth: p ? N.sizePopupArrow : 0, borderRadius: N.borderRadius }), Q = o.useCallback(() => {
    t != null && t.selectable && (t != null && t.multiple) || (d == null || d(!1, { source: "menu" }), _(!1));
  }, [t == null ? void 0 : t.selectable, t == null ? void 0 : t.multiple]), [A, ee] = se("Dropdown", v == null ? void 0 : v.zIndex);
  let O = o.createElement(te, Object.assign({ alignPoint: q }, le(i, ["rootClassName"]), { mouseEnterDelay: W, mouseLeaveDelay: k, visible: G, builtinPlacements: K, arrow: !!p, overlayClassName: J, prefixCls: n, getPopupContainer: R || X, transitionName: Y, trigger: y, overlay: () => {
    let e;
    return e = t != null && t.items ? o.createElement(ve, Object.assign({}, t)) : typeof g == "function" ? g() : g, $ && (e = $(e)), e = o.Children.only(typeof e == "string" ? o.createElement("span", null, e) : e), o.createElement(ge, { prefixCls: `${n}-menu`, rootClassName: h(V, E), expandIcon: o.createElement("span", { className: `${n}-menu-submenu-arrow` }, a === "rtl" ? o.createElement(oe, { className: `${n}-menu-submenu-arrow-icon` }) : o.createElement(re, { className: `${n}-menu-submenu-arrow-icon` })), mode: "vertical", selectable: !1, onClick: Q, validator: (l) => {
      let { mode: s } = l;
      process.env.NODE_ENV !== "production" && m(!s || s === "vertical", "usage", `mode="${s}" is not supported for Dropdown's Menu.`);
    } }, e);
  }, placement: B, onVisibleChange: H, overlayStyle: Object.assign(Object.assign(Object.assign({}, u == null ? void 0 : u.style), v), { zIndex: A }) }), Z);
  return A && (O = o.createElement(ce.Provider, { value: ee }, O)), F(O);
}, Ne = pe(D, "align", void 0, "dropdown", (i) => i);
D._InternalPanelDoNotUseOrYouWillBeFired = (i) => o.createElement(Ne, Object.assign({}, i), o.createElement("span", null)), process.env.NODE_ENV !== "production" && (D.displayName = "Dropdown");
export {
  D as default
};
