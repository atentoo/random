import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as i } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as l, clearFix as S } from "../../style/index.js";
import { genCompactItemStyle as x } from "../../style/compact-item.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as s } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as c } from "../../theme/util/genStyleUtils.js";
import { initInputToken as p, initComponentToken as u } from "./token.js";
import { genOutlinedGroupStyle as R, genFilledGroupStyle as w, genOutlinedStyle as I, genFilledStyle as E, genBorderlessStyle as y, genUnderlinedStyle as v } from "./variants.js";
const z = (t) => ({ "&::-moz-placeholder": { opacity: 1 }, "&::placeholder": { color: t, userSelect: "none" }, "&:placeholder-shown": { textOverflow: "ellipsis" } }), g = (t) => {
  const { paddingBlockLG: r, lineHeightLG: e, borderRadiusLG: n, paddingInlineLG: o } = t;
  return { padding: `${i(r)} ${i(o)}`, fontSize: t.inputFontSizeLG, lineHeight: e, borderRadius: n };
}, $ = (t) => ({ padding: `${i(t.paddingBlockSM)} ${i(t.paddingInlineSM)}`, fontSize: t.inputFontSizeSM, borderRadius: t.borderRadiusSM }), b = (t) => Object.assign(Object.assign({ position: "relative", display: "inline-block", width: "100%", minWidth: 0, padding: `${i(t.paddingBlock)} ${i(t.paddingInline)}`, color: t.colorText, fontSize: t.inputFontSize, lineHeight: t.lineHeight, borderRadius: t.borderRadius, transition: `all ${t.motionDurationMid}` }, z(t.colorTextPlaceholder)), { "textarea&": { maxWidth: "100%", height: "auto", minHeight: t.controlHeight, lineHeight: t.lineHeight, verticalAlign: "bottom", transition: `all ${t.motionDurationSlow}, height 0s`, resize: "vertical" }, "&-lg": Object.assign({}, g(t)), "&-sm": Object.assign({}, $(t)), "&-rtl, &-textarea-rtl": { direction: "rtl" } }), k = (t) => {
  const { componentCls: r, antCls: e } = t;
  return { position: "relative", display: "table", width: "100%", borderCollapse: "separate", borderSpacing: 0, "&[class*='col-']": { paddingInlineEnd: t.paddingXS, "&:last-child": { paddingInlineEnd: 0 } }, [`&-lg ${r}, &-lg > ${r}-group-addon`]: Object.assign({}, g(t)), [`&-sm ${r}, &-sm > ${r}-group-addon`]: Object.assign({}, $(t)), [`&-lg ${e}-select-single ${e}-select-selector`]: { height: t.controlHeightLG }, [`&-sm ${e}-select-single ${e}-select-selector`]: { height: t.controlHeightSM }, [`> ${r}`]: { display: "table-cell", "&:not(:first-child):not(:last-child)": { borderRadius: 0 } }, [`${r}-group`]: { "&-addon, &-wrap": { display: "table-cell", width: 1, whiteSpace: "nowrap", verticalAlign: "middle", "&:not(:first-child):not(:last-child)": { borderRadius: 0 } }, "&-wrap > *": { display: "block !important" }, "&-addon": { position: "relative", padding: `0 ${i(t.paddingInline)}`, color: t.colorText, fontWeight: "normal", fontSize: t.inputFontSize, textAlign: "center", borderRadius: t.borderRadius, transition: `all ${t.motionDurationSlow}`, lineHeight: 1, [`${e}-select`]: { margin: `${i(t.calc(t.paddingBlock).add(1).mul(-1).equal())} ${i(t.calc(t.paddingInline).mul(-1).equal())}`, [`&${e}-select-single:not(${e}-select-customize-input):not(${e}-pagination-size-changer)`]: { [`${e}-select-selector`]: { backgroundColor: "inherit", border: `${i(t.lineWidth)} ${t.lineType} transparent`, boxShadow: "none" } } }, [`${e}-cascader-picker`]: { margin: `-9px ${i(t.calc(t.paddingInline).mul(-1).equal())}`, backgroundColor: "transparent", [`${e}-cascader-input`]: { textAlign: "start", border: 0, boxShadow: "none" } } } }, [r]: { width: "100%", marginBottom: 0, textAlign: "inherit", "&:focus": { zIndex: 1, borderInlineEndWidth: 1 }, "&:hover": { zIndex: 1, borderInlineEndWidth: 1, [`${r}-search-with-button &`]: { zIndex: 0 } } }, [`> ${r}:first-child, ${r}-group-addon:first-child`]: { borderStartEndRadius: 0, borderEndEndRadius: 0, [`${e}-select ${e}-select-selector`]: { borderStartEndRadius: 0, borderEndEndRadius: 0 } }, [`> ${r}-affix-wrapper`]: { [`&:not(:first-child) ${r}`]: { borderStartStartRadius: 0, borderEndStartRadius: 0 }, [`&:not(:last-child) ${r}`]: { borderStartEndRadius: 0, borderEndEndRadius: 0 } }, [`> ${r}:last-child, ${r}-group-addon:last-child`]: { borderStartStartRadius: 0, borderEndStartRadius: 0, [`${e}-select ${e}-select-selector`]: { borderStartStartRadius: 0, borderEndStartRadius: 0 } }, [`${r}-affix-wrapper`]: { "&:not(:last-child)": { borderStartEndRadius: 0, borderEndEndRadius: 0, [`${r}-search &`]: { borderStartStartRadius: t.borderRadius, borderEndStartRadius: t.borderRadius } }, [`&:not(:first-child), ${r}-search &:not(:first-child)`]: { borderStartStartRadius: 0, borderEndStartRadius: 0 } }, [`&${r}-group-compact`]: Object.assign(Object.assign({ display: "block" }, S()), { [`${r}-group-addon, ${r}-group-wrap, > ${r}`]: { "&:not(:first-child):not(:last-child)": { borderInlineEndWidth: t.lineWidth, "&:hover, &:focus": { zIndex: 1 } } }, "& > *": { display: "inline-flex", float: "none", verticalAlign: "top", borderRadius: 0 }, [`
        & > ${r}-affix-wrapper,
        & > ${r}-number-affix-wrapper,
        & > ${e}-picker-range
      `]: { display: "inline-flex" }, "& > *:not(:last-child)": { marginInlineEnd: t.calc(t.lineWidth).mul(-1).equal(), borderInlineEndWidth: t.lineWidth }, [r]: { float: "none" }, [`& > ${e}-select > ${e}-select-selector,
      & > ${e}-select-auto-complete ${r},
      & > ${e}-cascader-picker ${r},
      & > ${r}-group-wrapper ${r}`]: { borderInlineEndWidth: t.lineWidth, borderRadius: 0, "&:hover, &:focus": { zIndex: 1 } }, [`& > ${e}-select-focused`]: { zIndex: 1 }, [`& > ${e}-select > ${e}-select-arrow`]: { zIndex: 1 }, [`& > *:first-child,
      & > ${e}-select:first-child > ${e}-select-selector,
      & > ${e}-select-auto-complete:first-child ${r},
      & > ${e}-cascader-picker:first-child ${r}`]: { borderStartStartRadius: t.borderRadius, borderEndStartRadius: t.borderRadius }, [`& > *:last-child,
      & > ${e}-select:last-child > ${e}-select-selector,
      & > ${e}-cascader-picker:last-child ${r},
      & > ${e}-cascader-picker-focused:last-child ${r}`]: { borderInlineEndWidth: t.lineWidth, borderStartEndRadius: t.borderRadius, borderEndEndRadius: t.borderRadius }, [`& > ${e}-select-auto-complete ${r}`]: { verticalAlign: "top" }, [`${r}-group-wrapper + ${r}-group-wrapper`]: { marginInlineStart: t.calc(t.lineWidth).mul(-1).equal(), [`${r}-affix-wrapper`]: { borderRadius: 0 } }, [`${r}-group-wrapper:not(:last-child)`]: { [`&${r}-search > ${r}-group`]: { [`& > ${r}-group-addon > ${r}-search-button`]: { borderRadius: 0 }, [`& > ${r}`]: { borderStartStartRadius: t.borderRadius, borderStartEndRadius: 0, borderEndEndRadius: 0, borderEndStartRadius: t.borderRadius } } } }) };
}, O = (t) => {
  const { componentCls: r, controlHeightSM: e, lineWidth: n, calc: o } = t, a = o(e).sub(o(n).mul(2)).sub(16).div(2).equal();
  return { [r]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, l(t)), b(t)), I(t)), E(t)), y(t)), v(t)), { '&[type="color"]': { height: t.controlHeight, [`&${r}-lg`]: { height: t.controlHeightLG }, [`&${r}-sm`]: { height: e, paddingTop: a, paddingBottom: a } }, '&[type="search"]::-webkit-search-cancel-button, &[type="search"]::-webkit-search-decoration': { "-webkit-appearance": "none" } }) };
}, j = (t) => {
  const { componentCls: r } = t;
  return { [`${r}-clear-icon`]: { margin: 0, padding: 0, lineHeight: 0, color: t.colorTextQuaternary, fontSize: t.fontSizeIcon, verticalAlign: -1, cursor: "pointer", transition: `color ${t.motionDurationSlow}`, border: "none", outline: "none", backgroundColor: "transparent", "&:hover": { color: t.colorTextTertiary }, "&:active": { color: t.colorText }, "&-hidden": { visibility: "hidden" }, "&-has-suffix": { margin: `0 ${i(t.inputAffixPadding)}` } } };
}, H = (t) => {
  const { componentCls: r, inputAffixPadding: e, colorTextDescription: n, motionDurationSlow: o, colorIcon: a, colorIconHover: h, iconCls: d } = t, m = `${r}-affix-wrapper`, f = `${r}-affix-wrapper-disabled`;
  return { [m]: Object.assign(Object.assign(Object.assign(Object.assign({}, b(t)), { display: "inline-flex", [`&:not(${r}-disabled):hover`]: { zIndex: 1, [`${r}-search-with-button &`]: { zIndex: 0 } }, "&-focused, &:focus": { zIndex: 1 }, [`> input${r}`]: { padding: 0 }, [`> input${r}, > textarea${r}`]: { fontSize: "inherit", border: "none", borderRadius: 0, outline: "none", background: "transparent", color: "inherit", "&::-ms-reveal": { display: "none" }, "&:focus": { boxShadow: "none !important" } }, "&::before": { display: "inline-block", width: 0, visibility: "hidden", content: '"\\a0"' }, [r]: { "&-prefix, &-suffix": { display: "flex", flex: "none", alignItems: "center", "> *:not(:last-child)": { marginInlineEnd: t.paddingXS } }, "&-show-count-suffix": { color: n }, "&-show-count-has-suffix": { marginInlineEnd: t.paddingXXS }, "&-prefix": { marginInlineEnd: e }, "&-suffix": { marginInlineStart: e } } }), j(t)), { [`${d}${r}-password-icon`]: { color: a, cursor: "pointer", transition: `all ${o}`, "&:hover": { color: h } } }), [`${r}-underlined`]: { borderRadius: 0 }, [f]: { [`${d}${r}-password-icon`]: { color: a, cursor: "not-allowed", "&:hover": { color: a } } } };
}, C = (t) => {
  const { componentCls: r, borderRadiusLG: e, borderRadiusSM: n } = t;
  return { [`${r}-group`]: Object.assign(Object.assign(Object.assign({}, l(t)), k(t)), { "&-rtl": { direction: "rtl" }, "&-wrapper": Object.assign(Object.assign(Object.assign({ display: "inline-block", width: "100%", textAlign: "start", verticalAlign: "top", "&-rtl": { direction: "rtl" }, "&-lg": { [`${r}-group-addon`]: { borderRadius: e, fontSize: t.inputFontSizeLG } }, "&-sm": { [`${r}-group-addon`]: { borderRadius: n } } }, R(t)), w(t)), { [`&:not(${r}-compact-first-item):not(${r}-compact-last-item)${r}-compact-item`]: { [`${r}, ${r}-group-addon`]: { borderRadius: 0 } }, [`&:not(${r}-compact-last-item)${r}-compact-first-item`]: { [`${r}, ${r}-group-addon`]: { borderStartEndRadius: 0, borderEndEndRadius: 0 } }, [`&:not(${r}-compact-first-item)${r}-compact-last-item`]: { [`${r}, ${r}-group-addon`]: { borderStartStartRadius: 0, borderEndStartRadius: 0 } }, [`&:not(${r}-compact-last-item)${r}-compact-item`]: { [`${r}-affix-wrapper`]: { borderStartEndRadius: 0, borderEndEndRadius: 0 } }, [`&:not(${r}-compact-first-item)${r}-compact-item`]: { [`${r}-affix-wrapper`]: { borderStartStartRadius: 0, borderEndStartRadius: 0 } } }) }) };
}, W = (t) => {
  const { componentCls: r, antCls: e } = t, n = `${r}-search`;
  return { [n]: { [r]: { "&:hover, &:focus": { [`+ ${r}-group-addon ${n}-button:not(${e}-btn-primary)`]: { borderInlineStartColor: t.colorPrimaryHover } } }, [`${r}-affix-wrapper`]: { height: t.controlHeight, borderRadius: 0 }, [`${r}-lg`]: { lineHeight: t.calc(t.lineHeightLG).sub(2e-4).equal() }, [`> ${r}-group`]: { [`> ${r}-group-addon:last-child`]: { insetInlineStart: -1, padding: 0, border: 0, [`${n}-button`]: { marginInlineEnd: -1, borderStartStartRadius: 0, borderEndStartRadius: 0, boxShadow: "none" }, [`${n}-button:not(${e}-btn-primary)`]: { color: t.colorTextDescription, "&:hover": { color: t.colorPrimaryHover }, "&:active": { color: t.colorPrimaryActive }, [`&${e}-btn-loading::before`]: { insetInlineStart: 0, insetInlineEnd: 0, insetBlockStart: 0, insetBlockEnd: 0 } } } }, [`${n}-button`]: { height: t.controlHeight, "&:hover, &:focus": { zIndex: 1 } }, "&-large": { [`${r}-affix-wrapper, ${n}-button`]: { height: t.controlHeightLG } }, "&-small": { [`${r}-affix-wrapper, ${n}-button`]: { height: t.controlHeightSM } }, "&-rtl": { direction: "rtl" }, [`&${r}-compact-item`]: { [`&:not(${r}-compact-last-item)`]: { [`${r}-group-addon`]: { [`${r}-search-button`]: { marginInlineEnd: t.calc(t.lineWidth).mul(-1).equal(), borderRadius: 0 } } }, [`&:not(${r}-compact-first-item)`]: { [`${r},${r}-affix-wrapper`]: { borderRadius: 0 } }, [`> ${r}-group-addon ${r}-search-button,
        > ${r},
        ${r}-affix-wrapper`]: { "&:hover, &:focus, &:active": { zIndex: 2 } }, [`> ${r}-affix-wrapper-focused`]: { zIndex: 2 } } } };
}, A = (t) => {
  const { componentCls: r } = t;
  return { [`${r}-out-of-range`]: { [`&, & input, & textarea, ${r}-show-count-suffix, ${r}-data-count`]: { color: t.colorError } } };
}, er = c(["Input", "Shared"], (t) => {
  const r = s(t, p(t));
  return [O(r), H(r)];
}, u, { resetFont: !1 }), nr = c(["Input", "Component"], (t) => {
  const r = s(t, p(t));
  return [C(r), W(r), A(r), x(r)];
}, u, { resetFont: !1 });
export {
  nr as default,
  H as genAffixStyle,
  b as genBasicInputStyle,
  k as genInputGroupStyle,
  $ as genInputSmallStyle,
  O as genInputStyle,
  z as genPlaceholderStyle,
  u as initComponentToken,
  p as initInputToken,
  er as useSharedStyle
};
