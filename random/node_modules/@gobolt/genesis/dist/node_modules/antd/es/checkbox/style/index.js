import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as n } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as i, genFocusOutline as a } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as t } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as l } from "../../theme/util/genStyleUtils.js";
const c = (o) => {
  const { checkboxCls: r } = o, e = `${r}-wrapper`;
  return [{ [`${r}-group`]: Object.assign(Object.assign({}, i(o)), { display: "inline-flex", flexWrap: "wrap", columnGap: o.marginXS, [`> ${o.antCls}-row`]: { flex: 1 } }), [e]: Object.assign(Object.assign({}, i(o)), { display: "inline-flex", alignItems: "baseline", cursor: "pointer", "&:after": { display: "inline-block", width: 0, overflow: "hidden", content: "'\\a0'" }, [`& + ${e}`]: { marginInlineStart: 0 }, [`&${e}-in-form-item`]: { 'input[type="checkbox"]': { width: 14, height: 14 } } }), [r]: Object.assign(Object.assign({}, i(o)), { position: "relative", whiteSpace: "nowrap", lineHeight: 1, cursor: "pointer", borderRadius: o.borderRadiusSM, alignSelf: "center", [`${r}-input`]: { position: "absolute", inset: 0, zIndex: 1, cursor: "pointer", opacity: 0, margin: 0, [`&:focus-visible + ${r}-inner`]: Object.assign({}, a(o)) }, [`${r}-inner`]: { boxSizing: "border-box", display: "block", width: o.checkboxSize, height: o.checkboxSize, direction: "ltr", backgroundColor: o.colorBgContainer, border: `${n(o.lineWidth)} ${o.lineType} ${o.colorBorder}`, borderRadius: o.borderRadiusSM, borderCollapse: "separate", transition: `all ${o.motionDurationSlow}`, "&:after": { boxSizing: "border-box", position: "absolute", top: "50%", insetInlineStart: "25%", display: "table", width: o.calc(o.checkboxSize).div(14).mul(5).equal(), height: o.calc(o.checkboxSize).div(14).mul(8).equal(), border: `${n(o.lineWidthBold)} solid ${o.colorWhite}`, borderTop: 0, borderInlineStart: 0, transform: "rotate(45deg) scale(0) translate(-50%,-50%)", opacity: 0, content: '""', transition: `all ${o.motionDurationFast} ${o.motionEaseInBack}, opacity ${o.motionDurationFast}` } }, "& + span": { paddingInlineStart: o.paddingXS, paddingInlineEnd: o.paddingXS } }) }, { [`
        ${e}:not(${e}-disabled),
        ${r}:not(${r}-disabled)
      `]: { [`&:hover ${r}-inner`]: { borderColor: o.colorPrimary } }, [`${e}:not(${e}-disabled)`]: { [`&:hover ${r}-checked:not(${r}-disabled) ${r}-inner`]: { backgroundColor: o.colorPrimaryHover, borderColor: "transparent" }, [`&:hover ${r}-checked:not(${r}-disabled):after`]: { borderColor: o.colorPrimaryHover } } }, { [`${r}-checked`]: { [`${r}-inner`]: { backgroundColor: o.colorPrimary, borderColor: o.colorPrimary, "&:after": { opacity: 1, transform: "rotate(45deg) scale(1) translate(-50%,-50%)", transition: `all ${o.motionDurationMid} ${o.motionEaseOutBack} ${o.motionDurationFast}` } } }, [`
        ${e}-checked:not(${e}-disabled),
        ${r}-checked:not(${r}-disabled)
      `]: { [`&:hover ${r}-inner`]: { backgroundColor: o.colorPrimaryHover, borderColor: "transparent" } } }, { [r]: { "&-indeterminate": { [`${r}-inner`]: { backgroundColor: `${o.colorBgContainer} !important`, borderColor: `${o.colorBorder} !important`, "&:after": { top: "50%", insetInlineStart: "50%", width: o.calc(o.fontSizeLG).div(2).equal(), height: o.calc(o.fontSizeLG).div(2).equal(), backgroundColor: o.colorPrimary, border: 0, transform: "translate(-50%, -50%) scale(1)", opacity: 1, content: '""' } }, [`&:hover ${r}-inner`]: { backgroundColor: `${o.colorBgContainer} !important`, borderColor: `${o.colorPrimary} !important` } } } }, { [`${e}-disabled`]: { cursor: "not-allowed" }, [`${r}-disabled`]: { [`&, ${r}-input`]: { cursor: "not-allowed", pointerEvents: "none" }, [`${r}-inner`]: { background: o.colorBgContainerDisabled, borderColor: o.colorBorder, "&:after": { borderColor: o.colorTextDisabled } }, "&:after": { display: "none" }, "& + span": { color: o.colorTextDisabled }, [`&${r}-indeterminate ${r}-inner::after`]: { background: o.colorTextDisabled } } }];
};
function d(o, r) {
  const e = t(r, { checkboxCls: `.${o}`, checkboxSize: r.controlInteractiveSize });
  return [c(e)];
}
const I = l("Checkbox", (o, r) => {
  let { prefixCls: e } = r;
  return [d(e, o)];
});
export {
  I as default,
  c as genCheckboxStyle,
  d as getStyle
};
