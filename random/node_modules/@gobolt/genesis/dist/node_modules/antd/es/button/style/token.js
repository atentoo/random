import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as s } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { AggregationColor as B } from "../../color-picker/color.js";
import { isBright as v } from "../../color-picker/components/ColorPresets.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as H } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { getLineHeight as g } from "../../theme/themes/shared/genFontSizes.js";
import x from "../../theme/util/getAlphaColor.js";
import { PresetColors as L } from "../../theme/interface/presetColors.js";
const K = (o) => {
  const { paddingInline: t, onlyIconSize: r } = o;
  return H(o, { buttonPaddingHorizontal: t, buttonPaddingVertical: 0, buttonIconOnlyFontSize: r });
}, N = (o) => {
  var t, r, e, i, l, n;
  const a = (t = o.contentFontSize) !== null && t !== void 0 ? t : o.fontSize, d = (r = o.contentFontSizeSM) !== null && r !== void 0 ? r : o.fontSize, c = (e = o.contentFontSizeLG) !== null && e !== void 0 ? e : o.fontSizeLG, p = (i = o.contentLineHeight) !== null && i !== void 0 ? i : g(a), m = (l = o.contentLineHeightSM) !== null && l !== void 0 ? l : g(d), h = (n = o.contentLineHeightLG) !== null && n !== void 0 ? n : g(c), f = v(new B(o.colorBgSolid), "#fff") ? "#000" : "#fff", C = L.reduce((S, u) => Object.assign(Object.assign({}, S), { [`${u}ShadowColor`]: `0 ${s(o.controlOutlineWidth)} 0 ${x(o[`${u}1`], o.colorBgContainer)}` }), {});
  return Object.assign(Object.assign({}, C), { fontWeight: 400, defaultShadow: `0 ${o.controlOutlineWidth}px 0 ${o.controlTmpOutline}`, primaryShadow: `0 ${o.controlOutlineWidth}px 0 ${o.controlOutline}`, dangerShadow: `0 ${o.controlOutlineWidth}px 0 ${o.colorErrorOutline}`, primaryColor: o.colorTextLightSolid, dangerColor: o.colorTextLightSolid, borderColorDisabled: o.colorBorder, defaultGhostColor: o.colorBgContainer, ghostBg: "transparent", defaultGhostBorderColor: o.colorBgContainer, paddingInline: o.paddingContentHorizontal - o.lineWidth, paddingInlineLG: o.paddingContentHorizontal - o.lineWidth, paddingInlineSM: 8 - o.lineWidth, onlyIconSize: "inherit", onlyIconSizeSM: "inherit", onlyIconSizeLG: "inherit", groupBorderColor: o.colorPrimaryHover, linkHoverBg: "transparent", textTextColor: o.colorText, textTextHoverColor: o.colorText, textTextActiveColor: o.colorText, textHoverBg: o.colorFillTertiary, defaultColor: o.colorText, defaultBg: o.colorBgContainer, defaultBorderColor: o.colorBorder, defaultBorderColorDisabled: o.colorBorder, defaultHoverBg: o.colorBgContainer, defaultHoverColor: o.colorPrimaryHover, defaultHoverBorderColor: o.colorPrimaryHover, defaultActiveBg: o.colorBgContainer, defaultActiveColor: o.colorPrimaryActive, defaultActiveBorderColor: o.colorPrimaryActive, solidTextColor: f, contentFontSize: a, contentFontSizeSM: d, contentFontSizeLG: c, contentLineHeight: p, contentLineHeightSM: m, contentLineHeightLG: h, paddingBlock: Math.max((o.controlHeight - a * p) / 2 - o.lineWidth, 0), paddingBlockSM: Math.max((o.controlHeightSM - d * m) / 2 - o.lineWidth, 0), paddingBlockLG: Math.max((o.controlHeightLG - c * h) / 2 - o.lineWidth, 0) });
};
export {
  N as prepareComponentToken,
  K as prepareToken
};
