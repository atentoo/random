import t from "react";
import D from "../../../@ant-design/icons/es/icons/HolderOutlined.js";
import M from "../../../../_virtual/index.js";
import P from "../../../rc-tree/es/Tree.js";
import "../../../rc-tree/es/TreeNode.js";
import R from "../_util/motion.js";
import "../config-provider/index.js";
import "../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../rc-util/es/warning.js";
import "../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../rc-util/es/ref.js";
import "../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import S from "../theme/useToken.js";
import T from "./style/index.js";
import _ from "./utils/dropIndicator.js";
import A from "./utils/iconUtil.js";
import { ConfigContext as B } from "../config-provider/context.js";
const U = t.forwardRef((a, h) => {
  var n;
  const { getPrefixCls: m, direction: p, virtual: u, tree: i } = t.useContext(B), { prefixCls: w, className: N, showIcon: d = !1, showLine: b, switcherIcon: j, switcherLoadingIcon: O, blockNode: f = !1, children: k, checkable: c = !1, selectable: s = !0, draggable: r, motion: g, style: v } = a, e = m("tree", w), x = m(), I = g ?? Object.assign(Object.assign({}, R(x)), { motionAppear: !1 }), C = Object.assign(Object.assign({}, a), { checkable: c, selectable: s, showIcon: d, motion: I, blockNode: f, showLine: !!b, dropIndicatorRender: _ }), [E, y, L] = T(e), [, l] = S(), $ = l.paddingXS / 2 + (((n = l.Tree) === null || n === void 0 ? void 0 : n.titleHeight) || l.controlHeightSM), H = t.useMemo(() => {
    if (!r) return !1;
    let o = {};
    switch (typeof r) {
      case "function":
        o.nodeDraggable = r;
        break;
      case "object":
        o = Object.assign({}, r);
    }
    return o.icon !== !1 && (o.icon = o.icon || t.createElement(D, null)), o;
  }, [r]);
  return E(t.createElement(P, Object.assign({ itemHeight: $, ref: h, virtual: u }, C, { style: Object.assign(Object.assign({}, i == null ? void 0 : i.style), v), prefixCls: e, className: M({ [`${e}-icon-hide`]: !d, [`${e}-block-node`]: f, [`${e}-unselectable`]: !s, [`${e}-rtl`]: p === "rtl" }, i == null ? void 0 : i.className, N, y, L), direction: p, checkable: c && t.createElement("span", { className: `${e}-checkbox-inner` }), selectable: s, switcherIcon: (o) => t.createElement(A, { prefixCls: e, switcherIcon: j, switcherLoadingIcon: O, treeNodeProps: o, showLine: b }), draggable: H }), k));
});
process.env.NODE_ENV !== "production" && (U.displayName = "Tree");
export {
  U as default
};
