import * as c from "react";
import Q from "../../../../_virtual/index.js";
import h from "../../../rc-util/es/Children/toArray.js";
import X from "../../../rc-util/es/pickAttrs.js";
import { cloneElement as Y } from "../_util/reactNode.js";
import { devUseWarning as Z } from "../_util/warning.js";
import "../config-provider/index.js";
import ee, { InternalBreadcrumbItem as re } from "./BreadcrumbItem.js";
import P from "./BreadcrumbSeparator.js";
import te from "./style/index.js";
import ae from "./useItemRender.js";
import oe from "./useItems.js";
import { ConfigContext as ne } from "../config-provider/context.js";
var se = function(t, p) {
  var s = {};
  for (var e in t) Object.prototype.hasOwnProperty.call(t, e) && p.indexOf(e) < 0 && (s[e] = t[e]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function") {
    var o = 0;
    for (e = Object.getOwnPropertySymbols(t); o < e.length; o++) p.indexOf(e[o]) < 0 && Object.prototype.propertyIsEnumerable.call(t, e[o]) && (s[e[o]] = t[e[o]]);
  }
  return s;
};
const v = (t) => {
  const { prefixCls: p, separator: s = "/", style: e, className: o, rootClassName: A, routes: u, items: N, children: i, itemRender: S, params: C = {} } = t, w = se(t, ["prefixCls", "separator", "style", "className", "rootClassName", "routes", "items", "children", "itemRender", "params"]), { getPrefixCls: D, direction: T, breadcrumb: d } = c.useContext(ne);
  let f;
  const l = D("breadcrumb", p), [M, U, V] = te(l), m = oe(N, u);
  if (process.env.NODE_ENV !== "production") {
    const a = Z("Breadcrumb");
    if (a.deprecated(!u, "routes", "items"), !m || m.length === 0) {
      const n = h(i);
      a.deprecated(n.length === 0, "Breadcrumb.Item and Breadcrumb.Separator", "items"), n.forEach((r) => {
        r && process.env.NODE_ENV !== "production" && a(r.type && (r.type.__ANT_BREADCRUMB_ITEM === !0 || r.type.__ANT_BREADCRUMB_SEPARATOR === !0), "usage", "Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children");
      });
    }
  }
  const $ = ae(l, S);
  if (m && m.length > 0) {
    const a = [], n = N || u;
    f = m.map((r, _) => {
      const { path: z, key: B, type: F, menu: j, overlay: x, onClick: G, className: H, separator: J, dropdownProps: K } = r, y = ((k, E) => {
        if (E === void 0) return E;
        let g = (E || "").replace(/^\//, "");
        return Object.keys(k).forEach((I) => {
          g = g.replace(`:${I}`, k[I]);
        }), g;
      })(C, z);
      y !== void 0 && a.push(y);
      const R = B ?? _;
      if (F === "separator") return c.createElement(P, { key: R }, J);
      const b = {}, L = _ === m.length - 1;
      j ? b.menu = j : x && (b.overlay = x);
      let { href: O } = r;
      return a.length && y !== void 0 && (O = `#/${a.join("/")}`), c.createElement(re, Object.assign({ key: R }, b, X(r, { data: !0, aria: !0 }), { className: H, dropdownProps: K, href: O, separator: L ? "" : s, onClick: G, prefixCls: l }), $(r, C, n, a, O));
    });
  } else if (i) {
    const a = h(i).length;
    f = h(i).map((n, r) => n && Y(n, { separator: r === a - 1 ? "" : s, key: r }));
  }
  const W = Q(l, d == null ? void 0 : d.className, { [`${l}-rtl`]: T === "rtl" }, o, A, U, V), q = Object.assign(Object.assign({}, d == null ? void 0 : d.style), e);
  return M(c.createElement("nav", Object.assign({ className: W, style: q }, w), c.createElement("ol", null, f)));
};
v.Item = ee, v.Separator = P, process.env.NODE_ENV !== "production" && (v.displayName = "Breadcrumb");
export {
  v as default
};
