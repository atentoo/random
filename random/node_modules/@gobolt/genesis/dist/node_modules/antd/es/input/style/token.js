import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as P } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
function K(i) {
  return P(i, { inputAffixPadding: i.paddingXXS });
}
const N = (i) => {
  const { controlHeight: l, fontSize: d, lineHeight: r, lineWidth: o, controlHeightSM: c, controlHeightLG: g, fontSizeLG: m, lineHeightLG: S, paddingSM: h, controlPaddingHorizontalSM: u, controlPaddingHorizontal: M, colorFillAlter: z, colorPrimaryHover: B, colorPrimary: v, controlOutlineWidth: t, controlOutline: x, colorErrorOutline: H, colorWarningOutline: F, colorBgContainer: e, inputFontSize: L, inputFontSizeLG: f, inputFontSizeSM: G } = i, n = L || d, p = G || n, a = f || m, k = Math.round((l - n * r) / 2 * 10) / 10 - o, $ = Math.round((c - p * r) / 2 * 10) / 10 - o, C = Math.ceil((g - a * S) / 2 * 10) / 10 - o;
  return { paddingBlock: Math.max(k, 0), paddingBlockSM: Math.max($, 0), paddingBlockLG: Math.max(C, 0), paddingInline: h - o, paddingInlineSM: u - o, paddingInlineLG: M - o, addonBg: z, activeBorderColor: v, hoverBorderColor: B, activeShadow: `0 0 0 ${t}px ${x}`, errorActiveShadow: `0 0 0 ${t}px ${H}`, warningActiveShadow: `0 0 0 ${t}px ${F}`, hoverBg: e, activeBg: e, inputFontSize: n, inputFontSizeLG: a, inputFontSizeSM: p };
};
export {
  N as initComponentToken,
  K as initInputToken
};
