import * as i from "react";
import x from "../../../rc-util/es/hooks/useState.js";
import E from "../button/button.js";
import { convertLegacyProps as P } from "../button/buttonHelpers.js";
function s(o) {
  return !!(o != null && o.then);
}
const O = (o) => {
  const { type: p, children: v, prefixCls: d, buttonProps: h, close: l, autoFocus: g, emitEvent: b, isSilent: f, quitOnNullishReturnValue: y, actionFn: n } = o, t = i.useRef(!1), a = i.useRef(null), [C, c] = x(!1), u = function() {
    l == null || l.apply(void 0, arguments);
  };
  return i.useEffect(() => {
    let r = null;
    return g && (r = setTimeout(() => {
      var e;
      (e = a.current) === null || e === void 0 || e.focus({ preventScroll: !0 });
    })), () => {
      r && clearTimeout(r);
    };
  }, []), i.createElement(E, Object.assign({}, P(p), { onClick: (r) => {
    if (t.current) return;
    if (t.current = !0, !n) return void u();
    let e;
    if (b) {
      if (e = n(r), y && !s(e)) return t.current = !1, void u(r);
    } else if (n.length) e = n(l), t.current = !1;
    else if (e = n(), !s(e)) return void u();
    ((m) => {
      s(m) && (c(!0), m.then(function() {
        c(!1, !0), u.apply(void 0, arguments), t.current = !1;
      }, (T) => {
        if (c(!1, !0), t.current = !1, !(f != null && f())) return Promise.reject(T);
      }));
    })(e);
  }, loading: C, prefixCls: d }, h, { ref: a }), v);
};
export {
  O as default
};
