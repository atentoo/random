import * as t from "react";
import H from "../../../../_virtual/index.js";
import I from "../../../rc-util/es/hooks/useMergedState.js";
import J from "../../../rc-util/es/pickAttrs.js";
import "../config-provider/index.js";
import K from "../config-provider/hooks/useCSSVarCls.js";
import Q from "../config-provider/hooks/useSize.js";
import { RadioGroupContextProvider as _ } from "./context.js";
import g from "./radio.js";
import U from "./style/index.js";
import W from "../../../rc-util/es/hooks/useId.js";
import { ConfigContext as X } from "../config-provider/context.js";
const Y = t.forwardRef((i, y) => {
  const { getPrefixCls: k, direction: x } = t.useContext(X), $ = W(), { prefixCls: h, className: E, rootClassName: M, options: n, buttonStyle: N = "outline", disabled: a, children: q, size: B, style: F, id: L, optionType: m, name: d = $, defaultValue: P, value: R, block: s = !1, onChange: u, onMouseEnter: S, onMouseLeave: T, onFocus: j, onBlur: w } = i, [o, p] = I(P, { value: R }), c = t.useCallback((e) => {
    const D = o, C = e.target.value;
    "value" in i || p(C), C !== D && (u == null || u(e));
  }, [o, p, u]), r = k("radio", h), l = `${r}-group`, f = K(r), [z, G, O] = U(r, f);
  let v = q;
  n && n.length > 0 && (v = n.map((e) => typeof e == "string" || typeof e == "number" ? t.createElement(g, { key: e.toString(), prefixCls: r, disabled: a, value: e, checked: o === e }, e) : t.createElement(g, { key: `radio-group-value-options-${e.value}`, prefixCls: r, disabled: e.disabled || a, value: e.value, checked: o === e.value, title: e.title, style: e.style, id: e.id, required: e.required }, e.label)));
  const b = Q(B), V = H(l, `${l}-${N}`, { [`${l}-${b}`]: b, [`${l}-rtl`]: x === "rtl", [`${l}-block`]: s }, E, M, G, O, f), A = t.useMemo(() => ({ onChange: c, value: o, disabled: a, name: d, optionType: m, block: s }), [c, o, a, d, m, s]);
  return z(t.createElement("div", Object.assign({}, J(i, { aria: !0, data: !0 }), { className: V, style: F, onMouseEnter: S, onMouseLeave: T, onFocus: j, onBlur: w, id: L, ref: y }), t.createElement(_, { value: A }, v)));
}), me = t.memo(Y);
export {
  me as default
};
