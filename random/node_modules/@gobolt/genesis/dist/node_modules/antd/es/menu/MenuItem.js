import * as t from "react";
import m from "../../../../_virtual/index.js";
import "../../../rc-menu/es/index.js";
import y from "../../../rc-util/es/Children/toArray.js";
import b from "../../../rc-util/es/omit.js";
import { cloneElement as j } from "../_util/reactNode.js";
import { SiderContext as M } from "../layout/Sider.js";
import I from "../tooltip/index.js";
import O from "./MenuContext.js";
import T from "../../../rc-menu/es/MenuItem.js";
const D = (c) => {
  var n;
  const { className: v, children: e, icon: l, title: o, danger: x, extra: p } = c, { prefixCls: i, firstLevel: d, direction: E, disableMenuItemTitleTooltip: N, inlineCollapsed: f } = t.useContext(O), { siderCollapsed: $ } = t.useContext(M);
  let r = o;
  o === void 0 ? r = d ? e : "" : o === !1 && (r = "");
  const s = { title: r };
  $ || f || (s.title = null, s.open = !1);
  const u = y(e).length;
  let a = t.createElement(T, Object.assign({}, b(c, ["title", "icon", "danger"]), { className: m({ [`${i}-item-danger`]: x, [`${i}-item-only-child`]: (l ? u + 1 : u) === 1 }, v), title: typeof o == "string" ? o : void 0 }), j(l, { className: m(t.isValidElement(l) ? (n = l.props) === null || n === void 0 ? void 0 : n.className : "", `${i}-item-icon`) }), ((h) => {
    const g = e == null ? void 0 : e[0], C = t.createElement("span", { className: m(`${i}-title-content`, { [`${i}-title-content-with-extra`]: !!p || p === 0 }) }, e);
    return (!l || t.isValidElement(e) && e.type === "span") && e && h && d && typeof g == "string" ? t.createElement("div", { className: `${i}-inline-collapsed-noicon` }, g.charAt(0)) : C;
  })(f));
  return N || (a = t.createElement(I, Object.assign({}, s, { placement: E === "rtl" ? "left" : "right", classNames: { root: `${i}-inline-collapsed-tooltip` } }), a)), a;
};
export {
  D as default
};
