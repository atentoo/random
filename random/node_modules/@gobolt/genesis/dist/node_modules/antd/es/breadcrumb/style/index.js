import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as e } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as l, genFocusStyle as a } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as m } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as p } from "../../theme/util/genStyleUtils.js";
const c = (r) => ({ itemColor: r.colorTextDescription, lastItemColor: r.colorText, iconFontSize: r.fontSize, linkColor: r.colorTextDescription, linkHoverColor: r.colorText, separatorColor: r.colorTextDescription, separatorMargin: r.marginXS }), y = p("Breadcrumb", (r) => ((o) => {
  const { componentCls: i, iconCls: n, calc: t } = o;
  return { [i]: Object.assign(Object.assign({}, l(o)), { color: o.itemColor, fontSize: o.fontSize, [n]: { fontSize: o.iconFontSize }, ol: { display: "flex", flexWrap: "wrap", margin: 0, padding: 0, listStyle: "none" }, a: Object.assign({ color: o.linkColor, transition: `color ${o.motionDurationMid}`, padding: `0 ${e(o.paddingXXS)}`, borderRadius: o.borderRadiusSM, height: o.fontHeight, display: "inline-block", marginInline: t(o.marginXXS).mul(-1).equal(), "&:hover": { color: o.linkHoverColor, backgroundColor: o.colorBgTextHover } }, a(o)), "li:last-child": { color: o.lastItemColor }, [`${i}-separator`]: { marginInline: o.separatorMargin, color: o.separatorColor }, [`${i}-link`]: { [`
          > ${n} + span,
          > ${n} + a
        `]: { marginInlineStart: o.marginXXS } }, [`${i}-overlay-link`]: { borderRadius: o.borderRadiusSM, height: o.fontHeight, display: "inline-block", padding: `0 ${e(o.paddingXXS)}`, marginInline: t(o.marginXXS).mul(-1).equal(), [`> ${n}`]: { marginInlineStart: o.marginXXS, fontSize: o.fontSizeIcon }, "&:hover": { color: o.linkHoverColor, backgroundColor: o.colorBgTextHover, a: { color: o.linkHoverColor } }, a: { "&:hover": { backgroundColor: "transparent" } } }, [`&${o.componentCls}-rtl`]: { direction: "rtl" } }) };
})(m(r, {})), c);
export {
  y as default,
  c as prepareComponentToken
};
