import { useMemo as b } from "react";
var c = function(r, o) {
  var a = {};
  for (var e in r) Object.prototype.hasOwnProperty.call(r, e) && o.indexOf(e) < 0 && (a[e] = r[e]);
  if (r != null && typeof Object.getOwnPropertySymbols == "function") {
    var t = 0;
    for (e = Object.getOwnPropertySymbols(r); t < e.length; t++) o.indexOf(e[t]) < 0 && Object.prototype.propertyIsEnumerable.call(r, e[t]) && (a[e[t]] = r[e[t]]);
  }
  return a;
};
function i(r) {
  const { breadcrumbName: o, children: a } = r, e = c(r, ["breadcrumbName", "children"]), t = Object.assign({ title: o }, e);
  return a && (t.menu = { items: a.map((n) => {
    var { breadcrumbName: m } = n, u = c(n, ["breadcrumbName"]);
    return Object.assign(Object.assign({}, u), { title: m });
  }) }), t;
}
function l(r, o) {
  return b(() => r || (o ? o.map(i) : null), [r, o]);
}
export {
  l as default
};
