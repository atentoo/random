import * as a from "react";
import _ from "../../../../../_virtual/index.js";
import z from "../../../../rc-util/es/Dom/isVisible.js";
import A from "../../../../rc-util/es/hooks/useLayoutEffect.js";
import D from "../../../../rc-util/es/omit.js";
import H from "../../grid/row.js";
import { FormContext as K, NoStyleItemContext as L } from "../context.js";
import T from "../FormItemInput.js";
import U from "../FormItemLabel.js";
import O from "../hooks/useDebounce.js";
import { getStatus as W } from "../util.js";
import G from "./StatusProvider.js";
var J = function(e, l) {
  var m = {};
  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && l.indexOf(r) < 0 && (m[r] = e[r]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function") {
    var n = 0;
    for (r = Object.getOwnPropertySymbols(e); n < r.length; n++) l.indexOf(r[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[n]) && (m[r[n]] = e[r[n]]);
  }
  return m;
};
function se(e) {
  const { prefixCls: l, className: m, rootClassName: r, style: n, help: h, errors: b, warnings: v, validateStatus: S, meta: i, hasFeedback: d, hidden: $, children: E, fieldId: F, required: y, isRequired: I, onSubItemMetaChange: N, layout: c } = e, q = J(e, ["prefixCls", "className", "rootClassName", "style", "help", "errors", "warnings", "validateStatus", "meta", "hasFeedback", "hidden", "children", "fieldId", "required", "isRequired", "onSubItemMetaChange", "layout"]), t = `${l}-item`, { requiredMark: j, vertical: k } = a.useContext(K), P = k || c === "vertical", u = a.useRef(null), g = O(b), p = O(v), C = h != null, w = !!(C || b.length || v.length), M = !!u.current && z(u.current), [f, x] = a.useState(null);
  A(() => {
    if (w && u.current) {
      const o = getComputedStyle(u.current);
      x(parseInt(o.marginBottom, 10));
    }
  }, [w, M]);
  const s = function() {
    let o = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];
    const R = o ? g : i.errors, B = o ? p : i.warnings;
    return W(R, B, i, "", !!d, S);
  }(), V = _(t, m, r, { [`${t}-with-help`]: C || g.length || p.length, [`${t}-has-feedback`]: s && d, [`${t}-has-success`]: s === "success", [`${t}-has-warning`]: s === "warning", [`${t}-has-error`]: s === "error", [`${t}-is-validating`]: s === "validating", [`${t}-hidden`]: $, [`${t}-${c}`]: c });
  return a.createElement("div", { className: V, style: n, ref: u }, a.createElement(H, Object.assign({ className: `${t}-row` }, D(q, ["_internalItemRender", "colon", "dependencies", "extra", "fieldKey", "getValueFromEvent", "getValueProps", "htmlFor", "id", "initialValue", "isListField", "label", "labelAlign", "labelCol", "labelWrap", "messageVariables", "name", "normalize", "noStyle", "preserve", "requiredMark", "rules", "shouldUpdate", "trigger", "tooltip", "validateFirst", "validateTrigger", "valuePropName", "wrapperCol", "validateDebounce"])), a.createElement(U, Object.assign({ htmlFor: F }, e, { requiredMark: j, required: y ?? I, prefixCls: l, vertical: P })), a.createElement(T, Object.assign({}, e, i, { errors: g, warnings: p, prefixCls: l, status: s, help: h, marginBottom: f, onErrorVisibleChanged: (o) => {
    o || x(null);
  } }), a.createElement(L.Provider, { value: N }, a.createElement(G, { prefixCls: l, meta: i, errors: i.errors, warnings: i.warnings, hasFeedback: d, validateStatus: s }, E)))), !!f && a.createElement("div", { className: `${t}-margin-offset`, style: { marginBottom: -f } }));
}
export {
  se as default
};
