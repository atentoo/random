import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as e } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as p } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
const C = (o) => ({ borderColor: o.hoverBorderColor, backgroundColor: o.hoverBg }), t = (o) => ({ color: o.colorTextDisabled, backgroundColor: o.colorBgContainerDisabled, borderColor: o.colorBorder, boxShadow: "none", cursor: "not-allowed", opacity: 1, "input[disabled], textarea[disabled]": { cursor: "not-allowed" }, "&:hover:not([disabled])": Object.assign({}, C(p(o, { hoverBorderColor: o.colorBorder, hoverBg: o.colorBgContainerDisabled }))) }), c = (o, r) => ({ background: o.colorBgContainer, borderWidth: o.lineWidth, borderStyle: o.lineType, borderColor: r.borderColor, "&:hover": { borderColor: r.hoverBorderColor, backgroundColor: o.hoverBg }, "&:focus, &:focus-within": { borderColor: r.activeBorderColor, boxShadow: r.activeShadow, outline: 0, backgroundColor: o.activeBg } }), l = (o, r) => ({ [`&${o.componentCls}-status-${r.status}:not(${o.componentCls}-disabled)`]: Object.assign(Object.assign({}, c(o, r)), { [`${o.componentCls}-prefix, ${o.componentCls}-suffix`]: { color: r.affixColor } }), [`&${o.componentCls}-status-${r.status}${o.componentCls}-disabled`]: { borderColor: r.borderColor } }), k = (o, r) => ({ "&-outlined": Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, c(o, { borderColor: o.colorBorder, hoverBorderColor: o.hoverBorderColor, activeBorderColor: o.activeBorderColor, activeShadow: o.activeShadow })), { [`&${o.componentCls}-disabled, &[disabled]`]: Object.assign({}, t(o)) }), l(o, { status: "error", borderColor: o.colorError, hoverBorderColor: o.colorErrorBorderHover, activeBorderColor: o.colorError, activeShadow: o.errorActiveShadow, affixColor: o.colorError })), l(o, { status: "warning", borderColor: o.colorWarning, hoverBorderColor: o.colorWarningBorderHover, activeBorderColor: o.colorWarning, activeShadow: o.warningActiveShadow, affixColor: o.colorWarning })), r) }), a = (o, r) => ({ [`&${o.componentCls}-group-wrapper-status-${r.status}`]: { [`${o.componentCls}-group-addon`]: { borderColor: r.addonBorderColor, color: r.addonColor } } }), F = (o) => ({ "&-outlined": Object.assign(Object.assign(Object.assign({ [`${o.componentCls}-group`]: { "&-addon": { background: o.addonBg, border: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}` }, "&-addon:first-child": { borderInlineEnd: 0 }, "&-addon:last-child": { borderInlineStart: 0 } } }, a(o, { status: "error", addonBorderColor: o.colorError, addonColor: o.colorErrorText })), a(o, { status: "warning", addonBorderColor: o.colorWarning, addonColor: o.colorWarningText })), { [`&${o.componentCls}-group-wrapper-disabled`]: { [`${o.componentCls}-group-addon`]: Object.assign({}, t(o)) } }) }), D = (o, r) => {
  const { componentCls: n } = o;
  return { "&-borderless": Object.assign({ background: "transparent", border: "none", "&:focus, &:focus-within": { outline: "none" }, [`&${n}-disabled, &[disabled]`]: { color: o.colorTextDisabled, cursor: "not-allowed" }, [`&${n}-status-error`]: { "&, & input, & textarea": { color: o.colorError } }, [`&${n}-status-warning`]: { "&, & input, & textarea": { color: o.colorWarning } } }, r) };
}, g = (o, r) => ({ background: r.bg, borderWidth: o.lineWidth, borderStyle: o.lineType, borderColor: "transparent", "input&, & input, textarea&, & textarea": { color: r == null ? void 0 : r.inputColor }, "&:hover": { background: r.hoverBg }, "&:focus, &:focus-within": { outline: 0, borderColor: r.activeBorderColor, backgroundColor: o.activeBg } }), d = (o, r) => ({ [`&${o.componentCls}-status-${r.status}:not(${o.componentCls}-disabled)`]: Object.assign(Object.assign({}, g(o, r)), { [`${o.componentCls}-prefix, ${o.componentCls}-suffix`]: { color: r.affixColor } }) }), H = (o, r) => ({ "&-filled": Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, g(o, { bg: o.colorFillTertiary, hoverBg: o.colorFillSecondary, activeBorderColor: o.activeBorderColor })), { [`&${o.componentCls}-disabled, &[disabled]`]: Object.assign({}, t(o)) }), d(o, { status: "error", bg: o.colorErrorBg, hoverBg: o.colorErrorBgHover, activeBorderColor: o.colorError, inputColor: o.colorErrorText, affixColor: o.colorError })), d(o, { status: "warning", bg: o.colorWarningBg, hoverBg: o.colorWarningBgHover, activeBorderColor: o.colorWarning, inputColor: o.colorWarningText, affixColor: o.colorWarning })), r) }), i = (o, r) => ({ [`&${o.componentCls}-group-wrapper-status-${r.status}`]: { [`${o.componentCls}-group-addon`]: { background: r.addonBg, color: r.addonColor } } }), I = (o) => ({ "&-filled": Object.assign(Object.assign(Object.assign({ [`${o.componentCls}-group`]: { "&-addon": { background: o.colorFillTertiary }, [`${o.componentCls}-filled:not(:focus):not(:focus-within)`]: { "&:not(:first-child)": { borderInlineStart: `${e(o.lineWidth)} ${o.lineType} ${o.colorSplit}` }, "&:not(:last-child)": { borderInlineEnd: `${e(o.lineWidth)} ${o.lineType} ${o.colorSplit}` } } } }, i(o, { status: "error", addonBg: o.colorErrorBg, addonColor: o.colorErrorText })), i(o, { status: "warning", addonBg: o.colorWarningBg, addonColor: o.colorWarningText })), { [`&${o.componentCls}-group-wrapper-disabled`]: { [`${o.componentCls}-group`]: { "&-addon": { background: o.colorFillTertiary, color: o.colorTextDisabled }, "&-addon:first-child": { borderInlineStart: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}`, borderTop: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}`, borderBottom: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}` }, "&-addon:last-child": { borderInlineEnd: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}`, borderTop: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}`, borderBottom: `${e(o.lineWidth)} ${o.lineType} ${o.colorBorder}` } } } }) }), b = (o, r) => ({ background: o.colorBgContainer, borderWidth: `${e(o.lineWidth)} 0`, borderStyle: `${o.lineType} none`, borderColor: `transparent transparent ${r.borderColor} transparent`, borderRadius: 0, "&:hover": { borderColor: `transparent transparent ${r.borderColor} transparent`, backgroundColor: o.hoverBg }, "&:focus, &:focus-within": { borderColor: `transparent transparent ${r.borderColor} transparent`, outline: 0, backgroundColor: o.activeBg } }), s = (o, r) => ({ [`&${o.componentCls}-status-${r.status}:not(${o.componentCls}-disabled)`]: Object.assign(Object.assign({}, b(o, r)), { [`${o.componentCls}-prefix, ${o.componentCls}-suffix`]: { color: r.affixColor } }), [`&${o.componentCls}-status-${r.status}${o.componentCls}-disabled`]: { borderColor: `transparent transparent ${r.borderColor} transparent` } }), A = (o, r) => ({ "&-underlined": Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, b(o, { borderColor: o.colorBorder, hoverBorderColor: o.hoverBorderColor, activeBorderColor: o.activeBorderColor, activeShadow: o.activeShadow })), { [`&${o.componentCls}-disabled, &[disabled]`]: { color: o.colorTextDisabled, boxShadow: "none", cursor: "not-allowed", "&:hover": { borderColor: `transparent transparent ${o.colorBorder} transparent` } }, "input[disabled], textarea[disabled]": { cursor: "not-allowed" } }), s(o, { status: "error", borderColor: o.colorError, hoverBorderColor: o.colorErrorBorderHover, activeBorderColor: o.colorError, activeShadow: o.errorActiveShadow, affixColor: o.colorError })), s(o, { status: "warning", borderColor: o.colorWarning, hoverBorderColor: o.colorWarningBorderHover, activeBorderColor: o.colorWarning, activeShadow: o.warningActiveShadow, affixColor: o.colorWarning })), r) });
export {
  c as genBaseOutlinedStyle,
  b as genBaseUnderlinedStyle,
  D as genBorderlessStyle,
  t as genDisabledStyle,
  I as genFilledGroupStyle,
  H as genFilledStyle,
  C as genHoverStyle,
  F as genOutlinedGroupStyle,
  k as genOutlinedStyle,
  A as genUnderlinedStyle
};
