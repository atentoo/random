import * as l from "react";
import T from "../../../@ant-design/icons/es/icons/SearchOutlined.js";
import I from "../../../../_virtual/index.js";
import { composeRef as U } from "../../../rc-util/es/ref.js";
import { cloneElement as z } from "../_util/reactNode.js";
import V from "../button/button.js";
import "../config-provider/index.js";
import q from "../config-provider/hooks/useSize.js";
import { useCompactItemContext as F } from "../space/Compact.js";
import G from "./Input.js";
import { ConfigContext as H } from "../config-provider/context.js";
var J = function(n, m) {
  var u = {};
  for (var e in n) Object.prototype.hasOwnProperty.call(n, e) && m.indexOf(e) < 0 && (u[e] = n[e]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function") {
    var r = 0;
    for (e = Object.getOwnPropertySymbols(n); r < e.length; r++) m.indexOf(e[r]) < 0 && Object.prototype.propertyIsEnumerable.call(n, e[r]) && (u[e[r]] = n[e[r]]);
  }
  return u;
};
const K = l.forwardRef((n, m) => {
  const { prefixCls: u, inputPrefixCls: e, className: r, size: b, suffix: _, enterButton: c = !1, addonAfter: g, loading: x, disabled: O, onSearch: f, onChange: h, onCompositionStart: E, onCompositionEnd: N } = n, A = J(n, ["prefixCls", "inputPrefixCls", "className", "size", "suffix", "enterButton", "addonAfter", "loading", "disabled", "onSearch", "onChange", "onCompositionStart", "onCompositionEnd"]), { getPrefixCls: S, direction: j } = l.useContext(H), v = l.useRef(!1), s = S("input-search", u), B = S("input", e), { compactSize: D } = F(s, j), p = q((o) => {
    var t;
    return (t = b ?? D) !== null && t !== void 0 ? t : o;
  }), C = l.useRef(null), w = (o) => {
    var t;
    document.activeElement === ((t = C.current) === null || t === void 0 ? void 0 : t.input) && o.preventDefault();
  }, y = (o) => {
    var t, i;
    f && f((i = (t = C.current) === null || t === void 0 ? void 0 : t.input) === null || i === void 0 ? void 0 : i.value, o, { source: "input" });
  }, $ = typeof c == "boolean" ? l.createElement(T, null) : null, k = `${s}-button`;
  let d;
  const a = c || {}, P = a.type && a.type.__ANT_BUTTON === !0;
  d = P || a.type === "button" ? z(a, Object.assign({ onMouseDown: w, onClick: (o) => {
    var t, i;
    (i = (t = a == null ? void 0 : a.props) === null || t === void 0 ? void 0 : t.onClick) === null || i === void 0 || i.call(t, o), y(o);
  }, key: "enterButton" }, P ? { className: k, size: p } : {})) : l.createElement(V, { className: k, type: c ? "primary" : void 0, size: p, disabled: O, key: "enterButton", onMouseDown: w, onClick: y, loading: x, icon: $ }, c), g && (d = [d, z(g, { key: "addonAfter" })]);
  const R = I(s, { [`${s}-rtl`]: j === "rtl", [`${s}-${p}`]: !!p, [`${s}-with-button`]: !!c }, r), M = Object.assign(Object.assign({}, A), { className: R, prefixCls: B, type: "search" });
  return l.createElement(G, Object.assign({ ref: U(C, m), onPressEnter: (o) => {
    v.current || x || y(o);
  } }, M, { size: p, onCompositionStart: (o) => {
    v.current = !0, E == null || E(o);
  }, onCompositionEnd: (o) => {
    v.current = !1, N == null || N(o);
  }, addonAfter: d, suffix: _, onChange: (o) => {
    o != null && o.target && o.type === "click" && f && f(o.target.value, o, { source: "clear" }), h == null || h(o);
  }, disabled: O }));
});
process.env.NODE_ENV !== "production" && (K.displayName = "Search");
export {
  K as default
};
