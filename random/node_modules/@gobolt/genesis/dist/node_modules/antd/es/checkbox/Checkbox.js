import * as r from "react";
import h from "../../../../_virtual/index.js";
import { Checkbox as G } from "../../../rc-checkbox/es/index.js";
import { composeRef as S } from "../../../rc-util/es/ref.js";
import { devUseWarning as F } from "../_util/warning.js";
import A from "../_util/wave/index.js";
import { TARGET_CLS as T } from "../_util/wave/interface.js";
import "../config-provider/index.js";
import q from "../config-provider/DisabledContext.js";
import z from "../config-provider/hooks/useCSSVarCls.js";
import { FormItemInputContext as B } from "../form/context.js";
import H from "./GroupContext.js";
import J from "./style/index.js";
import K from "./useBubbleLock.js";
import { ConfigContext as Q } from "../config-provider/context.js";
var U = function(n, u) {
  var s = {};
  for (var t in n) Object.prototype.hasOwnProperty.call(n, t) && u.indexOf(t) < 0 && (s[t] = n[t]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function") {
    var l = 0;
    for (t = Object.getOwnPropertySymbols(n); l < t.length; l++) u.indexOf(t[l]) < 0 && Object.prototype.propertyIsEnumerable.call(n, t[l]) && (s[t[l]] = n[t[l]]);
  }
  return s;
};
const W = (n, u) => {
  var s;
  const { prefixCls: t, className: l, rootClassName: E, children: p, indeterminate: d = !1, style: O, onMouseEnter: k, onMouseLeave: y, skipGroup: C = !1, disabled: N } = n, o = U(n, ["prefixCls", "className", "rootClassName", "children", "indeterminate", "style", "onMouseEnter", "onMouseLeave", "skipGroup", "disabled"]), { getPrefixCls: j, direction: w, checkbox: m } = r.useContext(Q), e = r.useContext(H), { isFormItemInput: V } = r.useContext(B), $ = r.useContext(q), f = (s = (e == null ? void 0 : e.disabled) || N) !== null && s !== void 0 ? s : $, v = r.useRef(o.value), b = r.useRef(null), I = S(u, b);
  if (process.env.NODE_ENV !== "production") {
    const c = F("Checkbox");
    process.env.NODE_ENV !== "production" && c("checked" in o || !!e || !("value" in o), "usage", "`value` is not a valid prop, do you mean `checked`?");
  }
  r.useEffect(() => {
    e == null || e.registerValue(o.value);
  }, []), r.useEffect(() => {
    if (!C) return o.value !== v.current && (e == null || e.cancelValue(v.current), e == null || e.registerValue(o.value), v.current = o.value), () => e == null ? void 0 : e.cancelValue(o.value);
  }, [o.value]), r.useEffect(() => {
    var c;
    !((c = b.current) === null || c === void 0) && c.input && (b.current.input.indeterminate = d);
  }, [d]);
  const a = j("checkbox", t), g = z(a), [M, x, _] = J(a, g), i = Object.assign({}, o);
  e && !C && (i.onChange = function() {
    o.onChange && o.onChange.apply(o, arguments), e.toggleOption && e.toggleOption({ label: p, value: o.value });
  }, i.name = e.name, i.checked = e.value.includes(o.value));
  const R = h(`${a}-wrapper`, { [`${a}-rtl`]: w === "rtl", [`${a}-wrapper-checked`]: i.checked, [`${a}-wrapper-disabled`]: f, [`${a}-wrapper-in-form-item`]: V }, m == null ? void 0 : m.className, l, E, _, g, x), L = h({ [`${a}-indeterminate`]: d }, T, x), [P, D] = K(i.onClick);
  return M(r.createElement(A, { component: "Checkbox", disabled: f }, r.createElement("label", { className: R, style: Object.assign(Object.assign({}, m == null ? void 0 : m.style), O), onMouseEnter: k, onMouseLeave: y, onClick: P }, r.createElement(G, Object.assign({}, i, { onClick: D, prefixCls: a, className: L, disabled: f, ref: I })), p !== void 0 && r.createElement("span", { className: `${a}-label` }, p))));
}, X = r.forwardRef(W);
process.env.NODE_ENV !== "production" && (X.displayName = "Checkbox");
export {
  X as default
};
