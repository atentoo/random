import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as a } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { genPlaceholderStyle as G } from "../../input/style/index.js";
import { resetComponent as x, textEllipsis as N } from "../../style/index.js";
import { genCompactItemStyle as X } from "../../style/compact-item.js";
import { initMoveMotion as y } from "../../style/motion/move.js";
import { initSlideMotion as S, slideUpOut as Y, slideDownOut as _, slideUpIn as U, slideDownIn as F } from "../../style/motion/slide.js";
import { genRoundedArrow as J } from "../../style/roundedArrow.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as K } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as Q } from "../../theme/util/genStyleUtils.js";
import V from "./multiple.js";
import Z, { genPanelStyle as ee } from "./panel.js";
import { initPickerPanelToken as te, prepareComponentToken as ne } from "./token.js";
import { initPanelComponentToken as Ce } from "./token.js";
import ie from "./variants.js";
import { initInputToken as oe } from "../../input/style/token.js";
const g = (t, e, n, r) => {
  const i = t.calc(n).add(2).equal(), l = t.max(t.calc(e).sub(i).div(2).equal(), 0), c = t.max(t.calc(e).sub(i).sub(l).equal(), 0);
  return { padding: `${a(l)} ${a(r)} ${a(c)}` };
}, ae = (t) => {
  const { componentCls: e, colorError: n, colorWarning: r } = t;
  return { [`${e}:not(${e}-disabled):not([disabled])`]: { [`&${e}-status-error`]: { [`${e}-active-bar`]: { background: n } }, [`&${e}-status-warning`]: { [`${e}-active-bar`]: { background: r } } } };
}, re = (t) => {
  const { componentCls: e, antCls: n, controlHeight: r, paddingInline: i, lineWidth: l, lineType: c, colorBorder: k, borderRadius: I, motionDurationMid: o, colorTextDisabled: p, colorTextPlaceholder: $, controlHeightLG: H, fontSizeLG: m, controlHeightSM: b, paddingInlineSM: f, paddingXS: d, marginXS: h, colorTextDescription: v, lineWidthBold: P, colorPrimary: O, motionDurationSlow: s, zIndexPopup: j, paddingXXS: R, sizePopupArrow: E, colorBgElevated: w, borderRadiusLG: L, boxShadowSecondary: W, borderRadiusSM: z, colorSplit: T, cellHoverBg: q, presetsWidth: A, presetsMaxWidth: C, boxShadowPopoverArrow: M, fontHeight: u, fontHeightLG: D, lineHeightLG: B } = t;
  return [{ [e]: Object.assign(Object.assign(Object.assign({}, x(t)), g(t, r, u, i)), { position: "relative", display: "inline-flex", alignItems: "center", lineHeight: 1, borderRadius: I, transition: `border ${o}, box-shadow ${o}, background ${o}`, [`${e}-prefix`]: { flex: "0 0 auto", marginInlineEnd: t.inputAffixPadding }, [`${e}-input`]: { position: "relative", display: "inline-flex", alignItems: "center", width: "100%", "> input": Object.assign(Object.assign({ position: "relative", display: "inline-block", width: "100%", color: "inherit", fontSize: t.fontSize, lineHeight: t.lineHeight, transition: `all ${o}` }, G($)), { flex: "auto", minWidth: 1, height: "auto", padding: 0, background: "transparent", border: 0, fontFamily: "inherit", "&:focus": { boxShadow: "none", outline: 0 }, "&[disabled]": { background: "transparent", color: p, cursor: "not-allowed" } }), "&-placeholder": { "> input": { color: $ } } }, "&-large": Object.assign(Object.assign({}, g(t, H, D, i)), { [`${e}-input > input`]: { fontSize: m, lineHeight: B } }), "&-small": Object.assign({}, g(t, b, u, f)), [`${e}-suffix`]: { display: "flex", flex: "none", alignSelf: "center", marginInlineStart: t.calc(d).div(2).equal(), color: p, lineHeight: 1, pointerEvents: "none", transition: `opacity ${o}, color ${o}`, "> *": { verticalAlign: "top", "&:not(:last-child)": { marginInlineEnd: h } } }, [`${e}-clear`]: { position: "absolute", top: "50%", insetInlineEnd: 0, color: p, lineHeight: 1, transform: "translateY(-50%)", cursor: "pointer", opacity: 0, transition: `opacity ${o}, color ${o}`, "> *": { verticalAlign: "top" }, "&:hover": { color: v } }, "&:hover": { [`${e}-clear`]: { opacity: 1 }, [`${e}-suffix:not(:last-child)`]: { opacity: 0 } }, [`${e}-separator`]: { position: "relative", display: "inline-block", width: "1em", height: m, color: p, fontSize: m, verticalAlign: "top", cursor: "default", [`${e}-focused &`]: { color: v }, [`${e}-range-separator &`]: { [`${e}-disabled &`]: { cursor: "not-allowed" } } }, "&-range": { position: "relative", display: "inline-flex", [`${e}-active-bar`]: { bottom: t.calc(l).mul(-1).equal(), height: P, background: O, opacity: 0, transition: `all ${s} ease-out`, pointerEvents: "none" }, [`&${e}-focused`]: { [`${e}-active-bar`]: { opacity: 1 } }, [`${e}-range-separator`]: { alignItems: "center", padding: `0 ${a(d)}`, lineHeight: 1 } }, "&-range, &-multiple": { [`${e}-clear`]: { insetInlineEnd: i }, [`&${e}-small`]: { [`${e}-clear`]: { insetInlineEnd: f } } }, "&-dropdown": Object.assign(Object.assign(Object.assign({}, x(t)), ee(t)), { pointerEvents: "none", position: "absolute", top: -9999, left: { _skip_check_: !0, value: -9999 }, zIndex: j, [`&${e}-dropdown-hidden`]: { display: "none" }, "&-rtl": { direction: "rtl" }, [`&${e}-dropdown-placement-bottomLeft,
            &${e}-dropdown-placement-bottomRight`]: { [`${e}-range-arrow`]: { top: 0, display: "block", transform: "translateY(-100%)" } }, [`&${e}-dropdown-placement-topLeft,
            &${e}-dropdown-placement-topRight`]: { [`${e}-range-arrow`]: { bottom: 0, display: "block", transform: "translateY(100%) rotate(180deg)" } }, [`&${n}-slide-up-appear, &${n}-slide-up-enter`]: { [`${e}-range-arrow${e}-range-arrow`]: { transition: "none" } }, [`&${n}-slide-up-enter${n}-slide-up-enter-active${e}-dropdown-placement-topLeft,
          &${n}-slide-up-enter${n}-slide-up-enter-active${e}-dropdown-placement-topRight,
          &${n}-slide-up-appear${n}-slide-up-appear-active${e}-dropdown-placement-topLeft,
          &${n}-slide-up-appear${n}-slide-up-appear-active${e}-dropdown-placement-topRight`]: { animationName: F }, [`&${n}-slide-up-enter${n}-slide-up-enter-active${e}-dropdown-placement-bottomLeft,
          &${n}-slide-up-enter${n}-slide-up-enter-active${e}-dropdown-placement-bottomRight,
          &${n}-slide-up-appear${n}-slide-up-appear-active${e}-dropdown-placement-bottomLeft,
          &${n}-slide-up-appear${n}-slide-up-appear-active${e}-dropdown-placement-bottomRight`]: { animationName: U }, [`&${n}-slide-up-leave ${e}-panel-container`]: { pointerEvents: "none" }, [`&${n}-slide-up-leave${n}-slide-up-leave-active${e}-dropdown-placement-topLeft,
          &${n}-slide-up-leave${n}-slide-up-leave-active${e}-dropdown-placement-topRight`]: { animationName: _ }, [`&${n}-slide-up-leave${n}-slide-up-leave-active${e}-dropdown-placement-bottomLeft,
          &${n}-slide-up-leave${n}-slide-up-leave-active${e}-dropdown-placement-bottomRight`]: { animationName: Y }, [`${e}-panel > ${e}-time-panel`]: { paddingTop: R }, [`${e}-range-wrapper`]: { display: "flex", position: "relative" }, [`${e}-range-arrow`]: Object.assign(Object.assign({ position: "absolute", zIndex: 1, display: "none", paddingInline: t.calc(i).mul(1.5).equal(), boxSizing: "content-box", transition: `all ${s} ease-out` }, J(t, w, M)), { "&:before": { insetInlineStart: t.calc(i).mul(1.5).equal() } }), [`${e}-panel-container`]: { overflow: "hidden", verticalAlign: "top", background: w, borderRadius: L, boxShadow: W, transition: `margin ${s}`, display: "inline-block", pointerEvents: "auto", [`${e}-panel-layout`]: { display: "flex", flexWrap: "nowrap", alignItems: "stretch" }, [`${e}-presets`]: { display: "flex", flexDirection: "column", minWidth: A, maxWidth: C, ul: { height: 0, flex: "auto", listStyle: "none", overflow: "auto", margin: 0, padding: d, borderInlineEnd: `${a(l)} ${c} ${T}`, li: Object.assign(Object.assign({}, N), { borderRadius: z, paddingInline: d, paddingBlock: t.calc(b).sub(u).div(2).equal(), cursor: "pointer", transition: `all ${s}`, "+ li": { marginTop: h }, "&:hover": { background: q } }) } }, [`${e}-panels`]: { display: "inline-flex", flexWrap: "nowrap", "&:last-child": { [`${e}-panel`]: { borderWidth: 0 } } }, [`${e}-panel`]: { verticalAlign: "top", background: "transparent", borderRadius: 0, borderWidth: 0, [`${e}-content, table`]: { textAlign: "center" }, "&-focused": { borderColor: k } } } }), "&-dropdown-range": { padding: `${a(t.calc(E).mul(2).div(3).equal())} 0`, "&-hidden": { display: "none" } }, "&-rtl": { direction: "rtl", [`${e}-separator`]: { transform: "scale(-1, 1)" }, [`${e}-footer`]: { "&-extra": { direction: "rtl" } } } }) }, S(t, "slide-up"), S(t, "slide-down"), y(t, "move-up"), y(t, "move-down")];
}, Te = Q("DatePicker", (t) => {
  const e = K(oe(t), te(t), { inputPaddingHorizontalBase: t.calc(t.paddingSM).sub(1).equal(), multipleSelectItemHeight: t.multipleItemHeight, selectHeight: t.controlHeight });
  return [Z(e), re(e), ie(e), ae(e), V(e), X(t, { focusElCls: `${t.componentCls}-focused` })];
}, ne);
export {
  Te as default,
  ee as genPanelStyle,
  Ce as initPanelComponentToken,
  te as initPickerPanelToken
};
