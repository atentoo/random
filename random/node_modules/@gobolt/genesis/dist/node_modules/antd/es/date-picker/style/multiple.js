import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as s } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { genOverflowStyle as m, getMultipleSelectorUnit as p } from "../../select/style/multiple.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as a } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
const n = (t, i) => {
  const { componentCls: e, controlHeight: r } = t, l = i ? `${e}-${i}` : "", o = p(t);
  return [{ [`${e}-multiple${l}`]: { paddingBlock: o.containerPadding, paddingInlineStart: o.basePadding, minHeight: r, [`${e}-selection-item`]: { height: o.itemHeight, lineHeight: s(o.itemLineHeight) } } }];
}, z = (t) => {
  const { componentCls: i, calc: e, lineWidth: r } = t, l = a(t, { fontHeight: t.fontSize, selectHeight: t.controlHeightSM, multipleSelectItemHeight: t.multipleItemHeightSM, borderRadius: t.borderRadiusSM, borderRadiusSM: t.borderRadiusXS, controlHeight: t.controlHeightSM }), o = a(t, { fontHeight: e(t.multipleItemHeightLG).sub(e(r).mul(2).equal()).equal(), fontSize: t.fontSizeLG, selectHeight: t.controlHeightLG, multipleSelectItemHeight: t.multipleItemHeightLG, borderRadius: t.borderRadiusLG, borderRadiusSM: t.borderRadius, controlHeight: t.controlHeightLG });
  return [n(l, "small"), n(t), n(o, "large"), { [`${i}${i}-multiple`]: Object.assign(Object.assign({ width: "100%", cursor: "text", [`${i}-selector`]: { flex: "auto", padding: 0, position: "relative", "&:after": { margin: 0 }, [`${i}-selection-placeholder`]: { position: "absolute", top: "50%", insetInlineStart: t.inputPaddingHorizontalBase, insetInlineEnd: 0, transform: "translateY(-50%)", transition: `all ${t.motionDurationSlow}`, overflow: "hidden", whiteSpace: "nowrap", textOverflow: "ellipsis", flex: 1, color: t.colorTextPlaceholder, pointerEvents: "none" } } }, m(t)), { [`${i}-multiple-input`]: { width: 0, height: 0, border: 0, visibility: "hidden", position: "absolute", zIndex: -1 } }) }];
};
export {
  z as default
};
