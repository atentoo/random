import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as x } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as C } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as y } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as $ } from "../../theme/util/genStyleUtils.js";
const j = (o) => {
  const { antCls: t, componentCls: e, iconCls: r, avatarBg: i, avatarColor: n, containerSize: a, containerSizeLG: p, containerSizeSM: l, textFontSize: s, textFontSizeLG: g, textFontSizeSM: S, borderRadius: d, borderRadiusLG: u, borderRadiusSM: b, lineWidth: z, lineType: h } = o, c = (m, f, v) => ({ width: m, height: m, borderRadius: "50%", [`&${e}-square`]: { borderRadius: v }, [`&${e}-icon`]: { fontSize: f, [`> ${r}`]: { margin: 0 } } });
  return { [e]: Object.assign(Object.assign(Object.assign(Object.assign({}, C(o)), { position: "relative", display: "inline-flex", justifyContent: "center", alignItems: "center", overflow: "hidden", color: n, whiteSpace: "nowrap", textAlign: "center", verticalAlign: "middle", background: i, border: `${x(z)} ${h} transparent`, "&-image": { background: "transparent" }, [`${t}-image-img`]: { display: "block" } }), c(a, s, d)), { "&-lg": Object.assign({}, c(p, g, u)), "&-sm": Object.assign({}, c(l, S, b)), "> img": { display: "block", width: "100%", height: "100%", objectFit: "cover" } }) };
}, L = (o) => {
  const { componentCls: t, groupBorderColor: e, groupOverlapping: r, groupSpace: i } = o;
  return { [`${t}-group`]: { display: "inline-flex", [t]: { borderColor: e }, "> *:not(:first-child)": { marginInlineStart: r } }, [`${t}-group-popover`]: { [`${t} + ${t}`]: { marginInlineStart: i } } };
}, G = (o) => {
  const { controlHeight: t, controlHeightLG: e, controlHeightSM: r, fontSize: i, fontSizeLG: n, fontSizeXL: a, fontSizeHeading3: p, marginXS: l, marginXXS: s, colorBorderBg: g } = o;
  return { containerSize: t, containerSizeLG: e, containerSizeSM: r, textFontSize: Math.round((n + a) / 2), textFontSizeLG: p, textFontSizeSM: i, groupSpace: s, groupOverlapping: -l, groupBorderColor: g };
}, K = $("Avatar", (o) => {
  const { colorTextLightSolid: t, colorTextPlaceholder: e } = o, r = y(o, { avatarBg: e, avatarColor: t });
  return [j(r), L(r)];
}, G);
export {
  K as default,
  G as prepareComponentToken
};
