import * as r from "react";
import { useState as I, useRef as z } from "react";
import M from "../../../@ant-design/icons/es/icons/EyeInvisibleOutlined.js";
import V from "../../../@ant-design/icons/es/icons/EyeOutlined.js";
import S from "../../../../_virtual/index.js";
import T from "../../../rc-util/es/omit.js";
import { composeRef as _ } from "../../../rc-util/es/ref.js";
import "../config-provider/index.js";
import $ from "../config-provider/DisabledContext.js";
import U from "./hooks/useRemovePasswordTimeout.js";
import q from "./Input.js";
import { ConfigContext as A } from "../config-provider/context.js";
var B = function(t, i) {
  var s = {};
  for (var o in t) Object.prototype.hasOwnProperty.call(t, o) && i.indexOf(o) < 0 && (s[o] = t[o]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function") {
    var e = 0;
    for (o = Object.getOwnPropertySymbols(t); e < o.length; e++) i.indexOf(o[e]) < 0 && Object.prototype.propertyIsEnumerable.call(t, o[e]) && (s[o[e]] = t[o[e]]);
  }
  return s;
};
const F = (t) => t ? r.createElement(V, null) : r.createElement(M, null), G = { click: "onClick", hover: "onMouseOver" }, H = r.forwardRef((t, i) => {
  const { disabled: s, action: o = "click", visibilityToggle: e = !0, iconRender: x = F } = t, g = r.useContext($), O = s ?? g, f = typeof e == "object" && e.visible !== void 0, [l, b] = I(() => !!f && e.visible), d = z(null);
  r.useEffect(() => {
    f && b(e.visible);
  }, [f, e]);
  const C = U(d), E = () => {
    var n;
    if (O) return;
    l && C();
    const p = !l;
    b(p), typeof e == "object" && ((n = e.onVisibleChange) === null || n === void 0 || n.call(e, p));
  }, { className: j, prefixCls: w, inputPrefixCls: N, size: a } = t, P = B(t, ["className", "prefixCls", "inputPrefixCls", "size"]), { getPrefixCls: v } = r.useContext(A), R = v("input", N), c = v("input-password", w), h = e && ((n) => {
    const p = G[o] || "", m = x(l), D = { [p]: E, className: `${n}-icon`, key: "passwordIcon", onMouseDown: (u) => {
      u.preventDefault();
    }, onMouseUp: (u) => {
      u.preventDefault();
    } };
    return r.cloneElement(r.isValidElement(m) ? m : r.createElement("span", null, m), D);
  })(c), k = S(c, j, { [`${c}-${a}`]: !!a }), y = Object.assign(Object.assign({}, T(P, ["suffix", "iconRender", "visibilityToggle"])), { type: l ? "text" : "password", className: k, prefixCls: R, suffix: h });
  return a && (y.size = a), r.createElement(q, Object.assign({ ref: _(i, d) }, y));
});
process.env.NODE_ENV !== "production" && (H.displayName = "Input.Password");
export {
  H as default
};
