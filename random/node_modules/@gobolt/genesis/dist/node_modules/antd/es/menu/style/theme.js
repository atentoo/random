import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as m } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { genFocusOutline as A } from "../../style/index.js";
const v = (e) => Object.assign({}, A(e)), X = (e, r) => {
  const { componentCls: o, itemColor: c, itemSelectedColor: d, subMenuItemSelectedColor: C, groupTitleColor: B, itemBg: h, subMenuItemBg: I, itemSelectedBg: k, activeBarHeight: i, activeBarWidth: f, activeBarBorderWidth: n, motionDurationSlow: S, motionEaseInOut: l, motionEaseOut: s, itemPaddingInline: O, motionDurationMid: t, itemHoverColor: j, lineType: y, colorSplit: z, itemDisabledColor: E, dangerItemColor: H, dangerItemHoverColor: M, dangerItemSelectedColor: u, dangerItemActiveBg: T, dangerItemSelectedBg: W, popupBg: $, itemHoverBg: b, itemActiveBg: g, menuSubMenuBg: x, horizontalItemSelectedColor: a, horizontalItemSelectedBg: p, horizontalItemBorderRadius: D, horizontalItemHoverBg: R } = e;
  return { [`${o}-${r}, ${o}-${r} > ${o}`]: { color: c, background: h, [`&${o}-root:focus-visible`]: Object.assign({}, v(e)), [`${o}-item`]: { "&-group-title, &-extra": { color: B } }, [`${o}-submenu-selected > ${o}-submenu-title`]: { color: C }, [`${o}-item, ${o}-submenu-title`]: { color: c, [`&:not(${o}-item-disabled):focus-visible`]: Object.assign({}, v(e)) }, [`${o}-item-disabled, ${o}-submenu-disabled`]: { color: `${E} !important` }, [`${o}-item:not(${o}-item-selected):not(${o}-submenu-selected)`]: { [`&:hover, > ${o}-submenu-title:hover`]: { color: j } }, [`&:not(${o}-horizontal)`]: { [`${o}-item:not(${o}-item-selected)`]: { "&:hover": { backgroundColor: b }, "&:active": { backgroundColor: g } }, [`${o}-submenu-title`]: { "&:hover": { backgroundColor: b }, "&:active": { backgroundColor: g } } }, [`${o}-item-danger`]: { color: H, [`&${o}-item:hover`]: { [`&:not(${o}-item-selected):not(${o}-submenu-selected)`]: { color: M } }, [`&${o}-item:active`]: { background: T } }, [`${o}-item a`]: { "&, &:hover": { color: "inherit" } }, [`${o}-item-selected`]: { color: d, [`&${o}-item-danger`]: { color: u }, "a, a:hover": { color: "inherit" } }, [`& ${o}-item-selected`]: { backgroundColor: k, [`&${o}-item-danger`]: { backgroundColor: W } }, [`&${o}-submenu > ${o}`]: { backgroundColor: x }, [`&${o}-popup > ${o}`]: { backgroundColor: $ }, [`&${o}-submenu-popup > ${o}`]: { backgroundColor: $ }, [`&${o}-horizontal`]: Object.assign(Object.assign({}, r === "dark" ? { borderBottom: 0 } : {}), { [`> ${o}-item, > ${o}-submenu`]: { top: n, marginTop: e.calc(n).mul(-1).equal(), marginBottom: 0, borderRadius: D, "&::after": { position: "absolute", insetInline: O, bottom: 0, borderBottom: `${m(i)} solid transparent`, transition: `border-color ${S} ${l}`, content: '""' }, "&:hover, &-active, &-open": { background: R, "&::after": { borderBottomWidth: i, borderBottomColor: a } }, "&-selected": { color: a, backgroundColor: p, "&:hover": { backgroundColor: p }, "&::after": { borderBottomWidth: i, borderBottomColor: a } } } }), [`&${o}-root`]: { [`&${o}-inline, &${o}-vertical`]: { borderInlineEnd: `${m(n)} ${y} ${z}` } }, [`&${o}-inline`]: { [`${o}-sub${o}-inline`]: { background: I }, [`${o}-item`]: { position: "relative", "&::after": { position: "absolute", insetBlock: 0, insetInlineEnd: 0, borderInlineEnd: `${m(f)} solid ${d}`, transform: "scaleY(0.0001)", opacity: 0, transition: [`transform ${t} ${s}`, `opacity ${t} ${s}`].join(","), content: '""' }, [`&${o}-item-danger`]: { "&::after": { borderInlineEndColor: u } } }, [`${o}-selected, ${o}-item-selected`]: { "&::after": { transform: "scaleY(1)", opacity: 1, transition: [`transform ${t} ${l}`, `opacity ${t} ${l}`].join(",") } } } } };
};
export {
  X as default
};
