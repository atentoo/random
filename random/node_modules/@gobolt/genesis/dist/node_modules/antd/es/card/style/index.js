import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as r } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as g, clearFix as d, textEllipsis as c } from "../../style/index.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as p } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as $ } from "../../theme/util/genStyleUtils.js";
const h = (o) => {
  const { antCls: e, componentCls: t, headerHeight: i, headerPadding: n, tabsMarginBottom: a } = o;
  return Object.assign(Object.assign({ display: "flex", justifyContent: "center", flexDirection: "column", minHeight: i, marginBottom: -1, padding: `0 ${r(n)}`, color: o.colorTextHeading, fontWeight: o.fontWeightStrong, fontSize: o.headerFontSize, background: o.headerBg, borderBottom: `${r(o.lineWidth)} ${o.lineType} ${o.colorBorderSecondary}`, borderRadius: `${r(o.borderRadiusLG)} ${r(o.borderRadiusLG)} 0 0` }, d()), { "&-wrapper": { width: "100%", display: "flex", alignItems: "center" }, "&-title": Object.assign(Object.assign({ display: "inline-block", flex: 1 }, c), { [`
          > ${t}-typography,
          > ${t}-typography-edit-content
        `]: { insetInlineStart: 0, marginTop: 0, marginBottom: 0 } }), [`${e}-tabs-top`]: { clear: "both", marginBottom: a, color: o.colorText, fontWeight: "normal", fontSize: o.fontSize, "&-bar": { borderBottom: `${r(o.lineWidth)} ${o.lineType} ${o.colorBorderSecondary}` } } });
}, m = (o) => {
  const { cardPaddingBase: e, colorBorderSecondary: t, cardShadow: i, lineWidth: n } = o;
  return { width: "33.33%", padding: e, border: 0, borderRadius: 0, boxShadow: `
      ${r(n)} 0 0 0 ${t},
      0 ${r(n)} 0 0 ${t},
      ${r(n)} ${r(n)} 0 0 ${t},
      ${r(n)} 0 0 0 ${t} inset,
      0 ${r(n)} 0 0 ${t} inset;
    `, transition: `all ${o.motionDurationMid}`, "&-hoverable:hover": { position: "relative", zIndex: 1, boxShadow: i } };
}, b = (o) => {
  const { componentCls: e, iconCls: t, actionsLiMargin: i, cardActionsIconSize: n, colorBorderSecondary: a, actionsBg: l } = o;
  return Object.assign(Object.assign({ margin: 0, padding: 0, listStyle: "none", background: l, borderTop: `${r(o.lineWidth)} ${o.lineType} ${a}`, display: "flex", borderRadius: `0 0 ${r(o.borderRadiusLG)} ${r(o.borderRadiusLG)}` }, d()), { "& > li": { margin: i, color: o.colorTextDescription, textAlign: "center", "> span": { position: "relative", display: "block", minWidth: o.calc(o.cardActionsIconSize).mul(2).equal(), fontSize: o.fontSize, lineHeight: o.lineHeight, cursor: "pointer", "&:hover": { color: o.colorPrimary, transition: `color ${o.motionDurationMid}` }, [`a:not(${e}-btn), > ${t}`]: { display: "inline-block", width: "100%", color: o.colorTextDescription, lineHeight: r(o.fontHeight), transition: `color ${o.motionDurationMid}`, "&:hover": { color: o.colorPrimary } }, [`> ${t}`]: { fontSize: n, lineHeight: r(o.calc(n).mul(o.lineHeight).equal()) } }, "&:not(:last-child)": { borderInlineEnd: `${r(o.lineWidth)} ${o.lineType} ${a}` } } });
}, S = (o) => Object.assign(Object.assign({ margin: `${r(o.calc(o.marginXXS).mul(-1).equal())} 0`, display: "flex" }, d()), { "&-avatar": { paddingInlineEnd: o.padding }, "&-detail": { overflow: "hidden", flex: 1, "> div:not(:last-child)": { marginBottom: o.marginXS } }, "&-title": Object.assign({ color: o.colorTextHeading, fontWeight: o.fontWeightStrong, fontSize: o.fontSizeLG }, c), "&-description": { color: o.colorTextDescription } }), u = (o) => {
  const { componentCls: e, colorFillAlter: t, headerPadding: i, bodyPadding: n } = o;
  return { [`${e}-head`]: { padding: `0 ${r(i)}`, background: t, "&-title": { fontSize: o.fontSize } }, [`${e}-body`]: { padding: `${r(o.padding)} ${r(n)}` } };
}, y = (o) => {
  const { componentCls: e } = o;
  return { overflow: "hidden", [`${e}-body`]: { userSelect: "none" } };
}, f = (o) => {
  const { componentCls: e, cardShadow: t, cardHeadPadding: i, colorBorderSecondary: n, boxShadowTertiary: a, bodyPadding: l, extraColor: s } = o;
  return { [e]: Object.assign(Object.assign({}, g(o)), { position: "relative", background: o.colorBgContainer, borderRadius: o.borderRadiusLG, [`&:not(${e}-bordered)`]: { boxShadow: a }, [`${e}-head`]: h(o), [`${e}-extra`]: { marginInlineStart: "auto", color: s, fontWeight: "normal", fontSize: o.fontSize }, [`${e}-body`]: Object.assign({ padding: l, borderRadius: `0 0 ${r(o.borderRadiusLG)} ${r(o.borderRadiusLG)}` }, d()), [`${e}-grid`]: m(o), [`${e}-cover`]: { "> *": { display: "block", width: "100%", borderRadius: `${r(o.borderRadiusLG)} ${r(o.borderRadiusLG)} 0 0` } }, [`${e}-actions`]: b(o), [`${e}-meta`]: S(o) }), [`${e}-bordered`]: { border: `${r(o.lineWidth)} ${o.lineType} ${n}`, [`${e}-cover`]: { marginTop: -1, marginInlineStart: -1, marginInlineEnd: -1 } }, [`${e}-hoverable`]: { cursor: "pointer", transition: `box-shadow ${o.motionDurationMid}, border-color ${o.motionDurationMid}`, "&:hover": { borderColor: "transparent", boxShadow: t } }, [`${e}-contain-grid`]: { borderRadius: `${r(o.borderRadiusLG)} ${r(o.borderRadiusLG)} 0 0 `, [`${e}-body`]: { display: "flex", flexWrap: "wrap" }, [`&:not(${e}-loading) ${e}-body`]: { marginBlockStart: o.calc(o.lineWidth).mul(-1).equal(), marginInlineStart: o.calc(o.lineWidth).mul(-1).equal(), padding: 0 } }, [`${e}-contain-tabs`]: { [`> div${e}-head`]: { minHeight: 0, [`${e}-head-title, ${e}-extra`]: { paddingTop: i } } }, [`${e}-type-inner`]: u(o), [`${e}-loading`]: y(o), [`${e}-rtl`]: { direction: "rtl" } };
}, x = (o) => {
  const { componentCls: e, bodyPaddingSM: t, headerPaddingSM: i, headerHeightSM: n, headerFontSizeSM: a } = o;
  return { [`${e}-small`]: { [`> ${e}-head`]: { minHeight: n, padding: `0 ${r(i)}`, fontSize: a, [`> ${e}-head-wrapper`]: { [`> ${e}-extra`]: { fontSize: o.fontSize } } }, [`> ${e}-body`]: { padding: t } }, [`${e}-small${e}-contain-tabs`]: { [`> ${e}-head`]: { [`${e}-head-title, ${e}-extra`]: { paddingTop: 0, display: "flex", alignItems: "center" } } } };
}, z = (o) => {
  var e, t;
  return { headerBg: "transparent", headerFontSize: o.fontSizeLG, headerFontSizeSM: o.fontSize, headerHeight: o.fontSizeLG * o.lineHeightLG + 2 * o.padding, headerHeightSM: o.fontSize * o.lineHeight + 2 * o.paddingXS, actionsBg: o.colorBgContainer, actionsLiMargin: `${o.paddingSM}px 0`, tabsMarginBottom: -o.padding - o.lineWidth, extraColor: o.colorText, bodyPaddingSM: 12, headerPaddingSM: 12, bodyPadding: (e = o.bodyPadding) !== null && e !== void 0 ? e : o.paddingLG, headerPadding: (t = o.headerPadding) !== null && t !== void 0 ? t : o.paddingLG };
}, F = $("Card", (o) => {
  const e = p(o, { cardShadow: o.boxShadowCard, cardHeadPadding: o.padding, cardPaddingBase: o.paddingLG, cardActionsIconSize: o.fontSize });
  return [f(e), x(e)];
}, z);
export {
  F as default,
  z as prepareComponentToken
};
