import "../../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "react";
import "../../../../@ant-design/cssinjs/es/StyleContext.js";
import { unit as i } from "../../../../@ant-design/cssinjs/es/util/index.js";
import "../../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../../rc-util/es/warning.js";
import "../../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import { resetComponent as m } from "../../style/index.js";
import S from "../../style/motion/collapse.js";
import { zoomIn as s } from "../../style/motion/zoom.js";
import "../../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../../rc-util/es/ref.js";
import { merge as y } from "../../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import { genStyleHooks as w } from "../../theme/util/genStyleUtils.js";
import C from "./explain.js";
const M = (o) => ({ legend: { display: "block", width: "100%", marginBottom: o.marginLG, padding: 0, color: o.colorTextDescription, fontSize: o.fontSizeLG, lineHeight: "inherit", border: 0, borderBottom: `${i(o.lineWidth)} ${o.lineType} ${o.colorBorder}` }, 'input[type="search"]': { boxSizing: "border-box" }, 'input[type="radio"], input[type="checkbox"]': { lineHeight: "normal" }, 'input[type="file"]': { display: "block" }, 'input[type="range"]': { display: "block", width: "100%" }, "select[multiple], select[size]": { height: "auto" }, "input[type='file']:focus,\n  input[type='radio']:focus,\n  input[type='checkbox']:focus": { outline: 0, boxShadow: `0 0 0 ${i(o.controlOutlineWidth)} ${o.controlOutline}` }, output: { display: "block", paddingTop: 15, color: o.colorText, fontSize: o.fontSize, lineHeight: o.lineHeight } }), a = (o, n) => {
  const { formItemCls: t } = o;
  return { [t]: { [`${t}-label > label`]: { height: n }, [`${t}-control-input`]: { minHeight: n } } };
}, z = (o) => {
  const { componentCls: n } = o;
  return { [o.componentCls]: Object.assign(Object.assign(Object.assign({}, m(o)), M(o)), { [`${n}-text`]: { display: "inline-block", paddingInlineEnd: o.paddingSM }, "&-small": Object.assign({}, a(o, o.controlHeightSM)), "&-large": Object.assign({}, a(o, o.controlHeightLG)) }) };
}, I = (o) => {
  const { formItemCls: n, iconCls: t, componentCls: l, rootPrefixCls: r, antCls: d, labelRequiredMarkColor: g, labelColor: $, labelFontSize: h, labelHeight: b, labelColonMarginInlineStart: x, labelColonMarginInlineEnd: f, itemMarginBottom: u } = o;
  return { [n]: Object.assign(Object.assign({}, m(o)), { marginBottom: u, verticalAlign: "top", "&-with-help": { transition: "none" }, [`&-hidden,
        &-hidden${d}-row`]: { display: "none" }, "&-has-warning": { [`${n}-split`]: { color: o.colorError } }, "&-has-error": { [`${n}-split`]: { color: o.colorWarning } }, [`${n}-label`]: { flexGrow: 0, overflow: "hidden", whiteSpace: "nowrap", textAlign: "end", verticalAlign: "middle", "&-left": { textAlign: "start" }, "&-wrap": { overflow: "unset", lineHeight: o.lineHeight, whiteSpace: "unset" }, "> label": { position: "relative", display: "inline-flex", alignItems: "center", maxWidth: "100%", height: b, color: $, fontSize: h, [`> ${t}`]: { fontSize: o.fontSize, verticalAlign: "top" }, [`&${n}-required:not(${n}-required-mark-optional)::before`]: { display: "inline-block", marginInlineEnd: o.marginXXS, color: g, fontSize: o.fontSize, fontFamily: "SimSun, sans-serif", lineHeight: 1, content: '"*"', [`${l}-hide-required-mark &`]: { display: "none" } }, [`${n}-optional`]: { display: "inline-block", marginInlineStart: o.marginXXS, color: o.colorTextDescription, [`${l}-hide-required-mark &`]: { display: "none" } }, [`${n}-tooltip`]: { color: o.colorTextDescription, cursor: "help", writingMode: "horizontal-tb", marginInlineStart: o.marginXXS }, "&::after": { content: '":"', position: "relative", marginBlock: 0, marginInlineStart: x, marginInlineEnd: f }, [`&${n}-no-colon::after`]: { content: '"\\a0"' } } }, [`${n}-control`]: { "--ant-display": "flex", flexDirection: "column", flexGrow: 1, [`&:first-child:not([class^="'${r}-col-'"]):not([class*="' ${r}-col-'"])`]: { width: "100%" }, "&-input": { position: "relative", display: "flex", alignItems: "center", minHeight: o.controlHeight, "&-content": { flex: "auto", maxWidth: "100%" } } }, [n]: { "&-additional": { display: "flex", flexDirection: "column" }, "&-explain, &-extra": { clear: "both", color: o.colorTextDescription, fontSize: o.fontSize, lineHeight: o.lineHeight }, "&-explain-connected": { width: "100%" }, "&-extra": { minHeight: o.controlHeightSM, transition: `color ${o.motionDurationMid} ${o.motionEaseOut}` }, "&-explain": { "&-error": { color: o.colorError }, "&-warning": { color: o.colorWarning } } }, [`&-with-help ${n}-explain`]: { height: "auto", opacity: 1 }, [`${n}-feedback-icon`]: { fontSize: o.fontSize, textAlign: "center", visibility: "visible", animationName: s, animationDuration: o.motionDurationMid, animationTimingFunction: o.motionEaseOutBack, pointerEvents: "none", "&-success": { color: o.colorSuccess }, "&-error": { color: o.colorError }, "&-warning": { color: o.colorWarning }, "&-validating": { color: o.colorPrimary } } }) };
}, c = (o, n) => {
  const { formItemCls: t } = o;
  return { [`${n}-horizontal`]: { [`${t}-label`]: { flexGrow: 0 }, [`${t}-control`]: { flex: "1 1 0", minWidth: 0 }, [`${t}-label[class$='-24'], ${t}-label[class*='-24 ']`]: { [`& + ${t}-control`]: { minWidth: "unset" } } } };
}, k = (o) => {
  const { componentCls: n, formItemCls: t, inlineItemMarginBottom: l } = o;
  return { [`${n}-inline`]: { display: "flex", flexWrap: "wrap", [t]: { flex: "none", marginInlineEnd: o.margin, marginBottom: l, "&-row": { flexWrap: "nowrap" }, [`> ${t}-label,
        > ${t}-control`]: { display: "inline-block", verticalAlign: "top" }, [`> ${t}-label`]: { flex: "none" }, [`${n}-text`]: { display: "inline-block" }, [`${t}-has-feedback`]: { display: "inline-block" } } } };
}, e = (o) => ({ padding: o.verticalLabelPadding, margin: o.verticalLabelMargin, whiteSpace: "initial", textAlign: "start", "> label": { margin: 0, "&::after": { visibility: "hidden" } } }), p = (o) => {
  const { componentCls: n, formItemCls: t, rootPrefixCls: l } = o;
  return { [`${t} ${t}-label`]: e(o), [`${n}:not(${n}-inline)`]: { [t]: { flexWrap: "wrap", [`${t}-label, ${t}-control`]: { [`&:not([class*=" ${l}-col-xs"])`]: { flex: "0 0 100%", maxWidth: "100%" } } } } };
}, H = (o) => {
  const { componentCls: n, formItemCls: t, antCls: l } = o;
  return { [`${n}-vertical`]: { [`${t}:not(${t}-horizontal)`]: { [`${t}-row`]: { flexDirection: "column" }, [`${t}-label > label`]: { height: "auto" }, [`${t}-control`]: { width: "100%" }, [`${t}-label,
        ${l}-col-24${t}-label,
        ${l}-col-xl-24${t}-label`]: e(o) } }, [`@media (max-width: ${i(o.screenXSMax)})`]: [p(o), { [n]: { [`${t}:not(${t}-horizontal)`]: { [`${l}-col-xs-24${t}-label`]: e(o) } } }], [`@media (max-width: ${i(o.screenSMMax)})`]: { [n]: { [`${t}:not(${t}-horizontal)`]: { [`${l}-col-sm-24${t}-label`]: e(o) } } }, [`@media (max-width: ${i(o.screenMDMax)})`]: { [n]: { [`${t}:not(${t}-horizontal)`]: { [`${l}-col-md-24${t}-label`]: e(o) } } }, [`@media (max-width: ${i(o.screenLGMax)})`]: { [n]: { [`${t}:not(${t}-horizontal)`]: { [`${l}-col-lg-24${t}-label`]: e(o) } } } };
}, v = (o) => {
  const { formItemCls: n, antCls: t } = o;
  return { [`${n}-vertical`]: { [`${n}-row`]: { flexDirection: "column" }, [`${n}-label > label`]: { height: "auto" }, [`${n}-control`]: { width: "100%" } }, [`${n}-vertical ${n}-label,
      ${t}-col-24${n}-label,
      ${t}-col-xl-24${n}-label`]: e(o), [`@media (max-width: ${i(o.screenXSMax)})`]: [p(o), { [n]: { [`${t}-col-xs-24${n}-label`]: e(o) } }], [`@media (max-width: ${i(o.screenSMMax)})`]: { [n]: { [`${t}-col-sm-24${n}-label`]: e(o) } }, [`@media (max-width: ${i(o.screenMDMax)})`]: { [n]: { [`${t}-col-md-24${n}-label`]: e(o) } }, [`@media (max-width: ${i(o.screenLGMax)})`]: { [n]: { [`${t}-col-lg-24${n}-label`]: e(o) } } };
}, D = (o) => ({ labelRequiredMarkColor: o.colorError, labelColor: o.colorTextHeading, labelFontSize: o.fontSize, labelHeight: o.controlHeight, labelColonMarginInlineStart: o.marginXXS / 2, labelColonMarginInlineEnd: o.marginXS, itemMarginBottom: o.marginLG, verticalLabelPadding: `0 0 ${o.paddingXS}px`, verticalLabelMargin: 0, inlineItemMarginBottom: 0 }), E = (o, n) => y(o, { formItemCls: `${o.componentCls}-item`, rootPrefixCls: n }), _ = w("Form", (o, n) => {
  let { rootPrefixCls: t } = n;
  const l = E(o, t);
  return [z(l), I(l), C(l), c(l, l.componentCls), c(l, l.formItemCls), k(l), H(l), v(l), S(l), s];
}, D, { order: -1e3 });
export {
  _ as default,
  D as prepareComponentToken,
  E as prepareToken
};
