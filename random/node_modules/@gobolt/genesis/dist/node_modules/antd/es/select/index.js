import * as i from "react";
import R from "../../../../_virtual/index.js";
import Ee from "../../../rc-select/es/Select.js";
import _e from "../../../rc-select/es/Option.js";
import Me from "../../../rc-select/es/OptGroup.js";
import "../../../rc-select/es/BaseSelect/index.js";
import je from "../../../rc-util/es/omit.js";
import { useZIndex as Pe } from "../_util/hooks/useZIndex.js";
import { getTransitionName as De } from "../_util/motion.js";
import We from "../_util/PurePanel.js";
import { getStatusClassNames as Fe, getMergedStatus as $e } from "../_util/statusUtils.js";
import { devUseWarning as He } from "../_util/warning.js";
import "../config-provider/index.js";
import { ConfigContext as Re, useComponentConfig as ke } from "../config-provider/context.js";
import ze from "../config-provider/defaultRenderEmpty.js";
import Be from "../config-provider/DisabledContext.js";
import Te from "../config-provider/hooks/useCSSVarCls.js";
import Ve from "../config-provider/hooks/useSize.js";
import { FormItemInputContext as Ae } from "../form/context.js";
import Ue from "../form/hooks/useVariants.js";
import { useCompactItemContext as Le } from "../space/Compact.js";
import "../../../@ant-design/cssinjs/es/extractStyle.js";
import "../../../@ant-design/cssinjs/es/hooks/useCacheToken.js";
import "../../../@ant-design/cssinjs/es/StyleContext.js";
import "../../../@ant-design/cssinjs/es/theme/createTheme.js";
import "../../../rc-util/es/warning.js";
import "../../../@ant-design/cssinjs/es/theme/ThemeCache.js";
import "../../../@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js";
import "../../../@ant-design/cssinjs/es/hooks/useEffectCleanupRegister.js";
import "../../../@ant-design/cssinjs/es/hooks/useHMR.js";
import "../../../@ant-design/cssinjs/es/transformers/legacyLogicalProperties.js";
import "../../../rc-util/es/hooks/useLayoutEffect.js";
import "../../../rc-util/es/ref.js";
import "../../../@ant-design/cssinjs-utils/es/util/statistic.js";
import "../../../@ant-design/cssinjs-utils/es/_util/hooks/useUniqueMemo.js";
import Xe from "../theme/useToken.js";
import Ge from "./mergedBuiltinPlacements.js";
import Ye from "./style/index.js";
import Ze from "./useIcons.js";
import qe from "./useShowArrow.js";
var Je = function(e, p) {
  var a = {};
  for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && p.indexOf(t) < 0 && (a[t] = e[t]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function") {
    var n = 0;
    for (t = Object.getOwnPropertySymbols(e); n < t.length; n++) p.indexOf(t[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e, t[n]) && (a[t[n]] = e[t[n]]);
  }
  return a;
};
const k = "SECRET_COMBOBOX_MODE_DO_NOT_USE", z = (e, p) => {
  var a;
  const { prefixCls: t, bordered: n, className: B, rootClassName: b, getPopupContainer: T, popupClassName: V, dropdownClassName: g, listHeight: A = 256, placement: d, listItemHeight: O, size: w, disabled: N, notFoundContent: v, status: U, builtinPlacements: L, dropdownMatchSelectWidth: x, popupMatchSelectWidth: I, direction: S, style: X, allowClear: y, variant: G, dropdownStyle: u, transitionName: Y, tagRender: Z, maxCount: E, prefix: q } = e, _ = Je(e, ["prefixCls", "bordered", "className", "rootClassName", "getPopupContainer", "popupClassName", "dropdownClassName", "listHeight", "placement", "listItemHeight", "size", "disabled", "notFoundContent", "status", "builtinPlacements", "dropdownMatchSelectWidth", "popupMatchSelectWidth", "direction", "style", "allowClear", "variant", "dropdownStyle", "transitionName", "tagRender", "maxCount", "prefix"]), { getPopupContainer: J, getPrefixCls: M, renderEmpty: j, direction: K, virtual: Q, popupMatchSelectWidth: ee, popupOverflow: te } = i.useContext(Re), f = ke("select"), [, P] = Xe(), oe = O ?? (P == null ? void 0 : P.controlHeight), o = M("select", t), re = M(), l = S ?? K, { compactSize: ne, compactItemClassnames: ie } = Le(o, l), [ae, le] = Ue("select", G, n), C = Te(o), [me, D, W] = Ye(o, C), s = i.useMemo(() => {
    const { mode: r } = e;
    if (r !== "combobox") return r === k ? "combobox" : r;
  }, [e.mode]), c = s === "multiple" || s === "tags", pe = qe(e.suffixIcon, e.showArrow), se = (a = I ?? x) !== null && a !== void 0 ? a : ee, { status: ce, hasFeedback: F, isFormItemInput: de, feedbackIcon: ue } = i.useContext(Ae), fe = $e(ce, U);
  let $;
  $ = v !== void 0 ? v : s === "combobox" ? null : (j == null ? void 0 : j("Select")) || i.createElement(ze, { componentName: "Select" });
  const { suffixIcon: Ce, itemIcon: he, removeIcon: be, clearIcon: ge } = Ze(Object.assign(Object.assign({}, _), { multiple: c, hasFeedback: F, feedbackIcon: ue, showSuffixIcon: pe, prefixCls: o, componentName: "Select" })), Oe = y === !0 ? { clearIcon: ge } : y, we = je(_, ["suffixIcon", "itemIcon"]), Ne = R(V || g, { [`${o}-dropdown-${l}`]: l === "rtl" }, b, W, C, D), H = Ve((r) => {
    var h;
    return (h = w ?? ne) !== null && h !== void 0 ? h : r;
  }), ve = i.useContext(Be), xe = N ?? ve, Ie = R({ [`${o}-lg`]: H === "large", [`${o}-sm`]: H === "small", [`${o}-rtl`]: l === "rtl", [`${o}-${ae}`]: le, [`${o}-in-form-item`]: de }, Fe(o, fe, F), ie, f.className, B, b, W, C, D), Se = i.useMemo(() => d !== void 0 ? d : l === "rtl" ? "bottomRight" : "bottomLeft", [d, l]);
  if (process.env.NODE_ENV !== "production") {
    const r = He("Select");
    r.deprecated(!g, "dropdownClassName", "popupClassName"), r.deprecated(x === void 0, "dropdownMatchSelectWidth", "popupMatchSelectWidth"), process.env.NODE_ENV !== "production" && r(!("showArrow" in e), "deprecated", "`showArrow` is deprecated which will be removed in next major version. It will be a default behavior, you can hide it by setting `suffixIcon` to null."), r.deprecated(!("bordered" in e), "bordered", "variant"), process.env.NODE_ENV !== "production" && r(!(E !== void 0 && !c), "usage", "`maxCount` only works with mode `multiple` or `tags`");
  }
  const [ye] = Pe("SelectLike", u == null ? void 0 : u.zIndex);
  return me(i.createElement(Ee, Object.assign({ ref: p, virtual: Q, showSearch: f.showSearch }, we, { style: Object.assign(Object.assign({}, f.style), X), dropdownMatchSelectWidth: se, transitionName: De(re, "slide-up", Y), builtinPlacements: Ge(L, te), listHeight: A, listItemHeight: oe, mode: s, prefixCls: o, placement: Se, direction: l, prefix: q, suffixIcon: Ce, menuItemSelectedIcon: he, removeIcon: be, allowClear: Oe, notFoundContent: $, className: Ie, getPopupContainer: T || J, dropdownClassName: Ne, disabled: xe, dropdownStyle: Object.assign(Object.assign({}, u), { zIndex: ye }), maxCount: c ? E : void 0, tagRender: c ? Z : void 0 })));
};
process.env.NODE_ENV !== "production" && (z.displayName = "Select");
const m = i.forwardRef(z), Ke = We(m, "dropdownAlign");
m.SECRET_COMBOBOX_MODE_DO_NOT_USE = k, m.Option = _e, m.OptGroup = Me, m._InternalPanelDoNotUseOrYouWillBeFired = Ke, process.env.NODE_ENV !== "production" && (m.displayName = "Select");
export {
  m as default
};
