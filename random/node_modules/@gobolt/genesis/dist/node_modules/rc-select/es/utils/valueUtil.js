import g from "../../../@babel/runtime/helpers/esm/toConsumableArray.js";
import h from "../../../@babel/runtime/helpers/esm/toArray.js";
import y from "../../../@babel/runtime/helpers/esm/objectSpread2.js";
import { warningOnce as O } from "../../../rc-util/es/warning.js";
function m(r, n) {
  var t, a = r.key;
  return "value" in r && (t = r.value), a ?? (t !== void 0 ? t : "rc-index-key-".concat(n));
}
function j(r) {
  return r !== void 0 && !Number.isNaN(r);
}
function N(r, n) {
  var t = r || {}, a = t.label || (n ? "children" : "label");
  return { label: a, value: t.value || "value", options: t.options || "options", groupLabel: t.groupLabel || a };
}
function x(r) {
  var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, t = n.fieldNames, a = n.childrenAsData, i = [], o = N(t, !1), p = o.label, f = o.value, l = o.options, s = o.groupLabel;
  return function v(u, c) {
    Array.isArray(u) && u.forEach(function(e) {
      if (c || !(l in e)) {
        var b = e[f];
        i.push({ key: m(e, i.length), groupOption: c, data: e, label: e[p], value: b });
      } else {
        var d = e[s];
        d === void 0 && a && (d = e.label), i.push({ key: m(e, i.length), group: !0, data: e, label: d }), v(e[l], !0);
      }
    });
  }(r, !1), i;
}
function C(r) {
  var n = y({}, r);
  return "props" in n || Object.defineProperty(n, "props", { get: function() {
    return O(!1, "Return type is option instead of Option instance. Please read value directly instead of reading from `props`."), n;
  } }), n;
}
var w = function(r, n, t) {
  if (!n || !n.length) return null;
  var a = !1, i = function o(p, f) {
    var l = h(f), s = l[0], v = l.slice(1);
    if (!s) return [p];
    var u = p.split(s);
    return a = a || u.length > 1, u.reduce(function(c, e) {
      return [].concat(g(c), g(o(e, v)));
    }, []).filter(Boolean);
  }(r, n);
  return a ? t !== void 0 ? i.slice(0, t) : i : null;
};
export {
  N as fillFieldNames,
  x as flattenOptions,
  w as getSeparatedContent,
  C as injectPropsWithOption,
  j as isValidCount
};
