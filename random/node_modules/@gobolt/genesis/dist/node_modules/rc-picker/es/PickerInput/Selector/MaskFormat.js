import c from "../../../../@babel/runtime/helpers/esm/classCallCheck.js";
import k from "../../../../@babel/runtime/helpers/esm/createClass.js";
import o from "../../../../@babel/runtime/helpers/esm/defineProperty.js";
var u = ["YYYY", "MM", "DD", "HH", "mm", "ss", "SSS"], g = function() {
  function m(r) {
    c(this, m), o(this, "format", void 0), o(this, "maskFormat", void 0), o(this, "cells", void 0), o(this, "maskCells", void 0), this.format = r;
    var e = u.map(function(t) {
      return "(".concat(t, ")");
    }).join("|"), n = new RegExp(e, "g");
    this.maskFormat = r.replace(n, function(t) {
      return "顧".repeat(t.length);
    });
    var a = new RegExp("(".concat(u.join("|"), ")")), i = (r.split(a) || []).filter(function(t) {
      return t;
    }), s = 0;
    this.cells = i.map(function(t) {
      var l = u.includes(t), f = s, h = s + t.length;
      return s = h, { text: t, mask: l, start: f, end: h };
    }), this.maskCells = this.cells.filter(function(t) {
      return t.mask;
    });
  }
  return k(m, [{ key: "getSelection", value: function(r) {
    var e = this.maskCells[r] || {};
    return [e.start || 0, e.end || 0];
  } }, { key: "match", value: function(r) {
    for (var e = 0; e < this.maskFormat.length; e += 1) {
      var n = this.maskFormat[e], a = r[e];
      if (!a || n !== "顧" && n !== a) return !1;
    }
    return !0;
  } }, { key: "size", value: function() {
    return this.maskCells.length;
  } }, { key: "getMaskCellIndex", value: function(r) {
    for (var e = Number.MAX_SAFE_INTEGER, n = 0, a = 0; a < this.maskCells.length; a += 1) {
      var i = this.maskCells[a], s = i.start, t = i.end;
      if (r >= s && r <= t) return a;
      var l = Math.min(Math.abs(r - s), Math.abs(r - t));
      l < e && (e = l, n = a);
    }
    return n;
  } }]), m;
}();
export {
  g as default
};
