import J from "../../../@babel/runtime/helpers/esm/extends.js";
import m from "../../../@babel/runtime/helpers/esm/objectSpread2.js";
import x from "../../../@babel/runtime/helpers/esm/defineProperty.js";
import T from "../../../@babel/runtime/helpers/esm/objectWithoutProperties.js";
import { useContext as k } from "../../../@rc-component/context/es/context.js";
import "../../../rc-util/es/ref.js";
import * as r from "react";
import u from "../../../../_virtual/index.js";
import U from "../Cell/index.js";
import q, { responseImmutable as z } from "../context/TableContext.js";
import M from "../hooks/useRowInfo.js";
import Q from "./VirtualCell.js";
import { StaticContext as Y } from "./context.js";
import { computedExpandedClassName as Z } from "../utils/expandUtil.js";
var $ = ["data", "index", "className", "rowKey", "style", "extra", "getHeight"], A = z(r.forwardRef(function(e, w) {
  var v, s = e.data, l = e.index, K = e.className, y = e.rowKey, P = e.style, c = e.extra, S = e.getHeight, W = T(e, $), d = s.record, n = s.indent, X = s.index, a = k(q, ["prefixCls", "flattenColumns", "fixColumn", "componentWidth", "scrollX"]), B = a.scrollX, D = a.flattenColumns, o = a.prefixCls, C = a.fixColumn, L = a.componentWidth, N = k(Y, ["getComponent"]).getComponent, t = M(d, y, l, n), E = N(["body", "row"], "div"), g = N(["body", "cell"], "div"), p = t.rowSupportExpand, h = t.expanded, i = t.rowProps, O = t.expandedRowRender, V = t.expandedRowClassName;
  if (p && h) {
    var _ = O(d, l, n + 1, h), j = Z(V, d, l, n), b = {};
    C && (b = { style: x({}, "--virtual-width", "".concat(L, "px")) });
    var I = "".concat(o, "-expanded-row-cell");
    v = r.createElement(E, { className: u("".concat(o, "-expanded-row"), "".concat(o, "-expanded-row-level-").concat(n + 1), j) }, r.createElement(U, { component: g, prefixCls: o, className: u(I, x({}, "".concat(I, "-fixed"), C)), additionalProps: b }, _));
  }
  var f = m(m({}, P), {}, { width: B });
  c && (f.position = "absolute", f.pointerEvents = "none");
  var R = r.createElement(E, J({}, i, W, { "data-row-key": y, ref: p ? null : w, className: u(K, "".concat(o, "-row"), i == null ? void 0 : i.className, x({}, "".concat(o, "-row-extra"), c)), style: m(m({}, f), i == null ? void 0 : i.style) }), D.map(function(G, H) {
    return r.createElement(Q, { key: H, component: g, rowInfo: t, column: G, colIndex: H, indent: n, index: l, renderIndex: X, record: d, inverse: c, getHeight: S });
  }));
  return p ? r.createElement("div", { ref: w }, R, v) : R;
}));
process.env.NODE_ENV !== "production" && (A.displayName = "BodyLine");
export {
  A as default
};
