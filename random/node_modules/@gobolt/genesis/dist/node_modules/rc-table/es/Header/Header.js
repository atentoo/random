import { useContext as H } from "../../../@rc-component/context/es/context.js";
import "../../../rc-util/es/ref.js";
import * as f from "react";
import B, { responseImmutable as D } from "../context/TableContext.js";
import I from "../hooks/useRenderTimes.js";
import M from "./HeaderRow.js";
const A = D(function(t) {
  process.env.NODE_ENV !== "production" && I(t);
  var C = t.stickyOffsets, d = t.columns, S = t.flattenColumns, g = t.onHeaderRow, h = H(B, ["prefixCls", "getComponent"]), v = h.prefixCls, c = h.getComponent, E = f.useMemo(function() {
    return function(m) {
      var n = [];
      (function l(a, b) {
        var s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        n[s] = n[s] || [];
        var i = b;
        return a.filter(Boolean).map(function(e) {
          var r = { key: e.key, className: e.className || "", children: e.title, column: e, colStart: i }, o = 1, p = e.children;
          return p && p.length > 0 && (o = l(p, i, s + 1).reduce(function(O, R) {
            return O + R;
          }, 0), r.hasSubColumns = !0), "colSpan" in e && (o = e.colSpan), "rowSpan" in e && (r.rowSpan = e.rowSpan), r.colSpan = o, r.colEnd = r.colStart + o - 1, n[s].push(r), i += o, o;
        });
      })(m, 0);
      for (var w = n.length, N = function(l) {
        n[l].forEach(function(a) {
          "rowSpan" in a || a.hasSubColumns || (a.rowSpan = w - l);
        });
      }, u = 0; u < w; u += 1) N(u);
      return n;
    }(d);
  }, [d]), k = c(["header", "wrapper"], "thead"), x = c(["header", "row"], "tr"), y = c(["header", "cell"], "th");
  return f.createElement(k, { className: "".concat(v, "-thead") }, E.map(function(m, n) {
    return f.createElement(M, { key: n, flattenColumns: S, cells: m, stickyOffsets: C, rowComponent: x, cellComponent: y, onHeaderRow: g, index: n });
  }));
});
export {
  A as default
};
