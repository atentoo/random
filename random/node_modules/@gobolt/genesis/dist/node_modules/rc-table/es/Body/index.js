import { useContext as B } from "../../../@rc-component/context/es/context.js";
import "../../../rc-util/es/ref.js";
import * as o from "react";
import k from "../context/PerfContext.js";
import D, { responseImmutable as I } from "../context/TableContext.js";
import O from "../hooks/useFlattenRecords.js";
import P from "../hooks/useRenderTimes.js";
import { getColumnsKey as V } from "../utils/valueUtil.js";
import W from "./BodyRow.js";
import _ from "./ExpandedRow.js";
import j from "./MeasureRow.js";
function f(r) {
  process.env.NODE_ENV !== "production" && P(r);
  var l, p = r.data, y = r.measureColumnWidth, e = B(D, ["prefixCls", "getComponent", "onColumnResize", "flattenColumns", "getRowKey", "expandedKeys", "childrenColumnName", "emptyNode"]), n = e.prefixCls, t = e.getComponent, x = e.onColumnResize, a = e.flattenColumns, s = e.getRowKey, N = e.expandedKeys, E = e.childrenColumnName, h = e.emptyNode, b = O(p, E, N, s), g = o.useRef({ renderWithProps: !1 }), v = t(["body", "wrapper"], "tbody"), d = t(["body", "row"], "tr"), i = t(["body", "cell"], "td"), K = t(["body", "cell"], "th");
  l = p.length ? b.map(function(m, c) {
    var u = m.record, R = m.indent, z = m.index, C = s(u, c);
    return o.createElement(W, { key: C, rowKey: C, record: u, index: c, renderIndex: z, rowComponent: d, cellComponent: i, scopeCellComponent: K, indent: R });
  }) : o.createElement(_, { expanded: !0, className: "".concat(n, "-placeholder"), prefixCls: n, component: d, cellComponent: i, colSpan: a.length, isEmpty: !0 }, h);
  var w = V(a);
  return o.createElement(k.Provider, { value: g.current }, o.createElement(v, { className: "".concat(n, "-tbody") }, y && o.createElement(j, { prefixCls: n, columnsKey: w, onColumnResize: x }), l));
}
process.env.NODE_ENV !== "production" && (f.displayName = "Body");
const T = I(f);
export {
  T as default
};
