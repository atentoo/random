import { ServiceArea } from '@secondcloset/types/src/_common';
export declare enum JobStatus {
    CREATING_ROUTES = "creating_routes",
    CREATING_DISTANCE_ETAS = "creating_distance_etas",
    ACTIVE = "active",
    COMPLETED = "completed",
    COMPLETED_WITHOUT_STATISTICS = "completed_without_statistics",
    FAILED = "failed",
    CANCELLED = "cancelled"
}
export declare const OngoingJobStatus: JobStatus[];
export type AutomationJobStatisticsAppointment = {
    id: string;
    route_id?: string;
    stop_duration: number;
    timerange?: string;
    ets: string;
    etd: string;
    type: number;
    nextmv_arrival_eta: string;
    nextmv_departure_eta: string;
    google_arrival_eta: string;
    google_departure_eta: string;
    google_duration_in_seconds: number;
    google_travel_duration_in_seconds: number;
    google_travel_distance_in_meters: number;
    duration_in_seconds: number;
    travel_duration_in_seconds: number;
};
export type AutomationJobStatistics = {
    vehicle_id: string;
    route_id: string;
    job_id: string;
    appointments: AutomationJobStatisticsAppointment[];
    total_google_duration_in_seconds: number;
    total_google_travel_duration_in_seconds: number;
    total_google_travel_distance_in_meters?: number;
    total_duration_in_seconds: number;
    total_travel_duration_in_seconds: number;
    total_stop_time: number;
    aph: number;
    google_aph: number;
    total_items_count: number;
    total_weight: number;
};
export interface AutomateRoutingDtoConfiguration {
    vehicle_penalization: number;
    min_max_factor: number;
    max_stops: number;
    min_stops: number;
    morning_threshold: number;
    afternoon_threshold: number;
    evening_threshold: number;
    wrong_route_length: number;
    timeslot_threshold_penalization: number;
    time_on_road_penalization: number;
    speed_scaling_factor: number;
    dont_use_selector: boolean;
    unassigned_penalty: number;
    route_automation_runtime: number;
    timezone: string;
    limits: {
        [key: number]: number;
    };
}
export interface RouteAutomationJob {
    appointment_ids: string[];
    completed_at: string | null;
    created_at: string;
    date: string;
    id: string;
    output: string | null;
    input: {
        configuration: Partial<AutomateRoutingDtoConfiguration>;
        date?: string;
        speed?: number;
    };
    service_area: ServiceArea;
    status: JobStatus;
    updated_at: string;
    vehicle_ids: string[];
    user_id: string;
    user_name: string;
    version: string;
    queue?: {
        count?: number;
        state?: string;
    };
    statistics?: AutomationJobStatistics[];
    total_vehicles_count: number;
    total_assigned_count: number;
    total_unassigned_count: number;
    total_routes_count: number;
}
