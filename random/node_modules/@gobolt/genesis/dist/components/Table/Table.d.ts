import { ColumnType } from 'antd/es/table';
import * as React from "react";
export type ActionEvent = {
    event: string;
    payload: any;
};
export type Change = (actionEvent: ActionEvent) => void;
export type SelectionType = "checkbox" | "radio";
export interface TableProps<T extends Record<string, any>> {
    dataSource: T[];
    columns: ColumnType<T>[];
    rowKey?: keyof T | ((record: T) => React.Key);
    size?: "small" | "middle" | "large";
    rowSelection?: {
        type?: SelectionType;
        selectedRowKeys?: React.Key[];
        onChange?: (selectedRowKeys: React.Key[], selectedRows: T[]) => void;
        getCheckboxProps?: (record: T) => {
            disabled?: boolean;
            name?: string;
        };
    };
    onChange?: (pagination: TablePaginationType, filters: Record<string, React.Key[]>, sorter: SorterResult<T> | SorterResult<T>[]) => void;
    loading?: boolean;
    pagination?: TablePaginationType | false;
    scroll?: {
        x?: number | string;
        y?: number | string;
    };
    bordered?: boolean;
    locale?: {
        emptyText?: React.ReactNode;
    };
    [key: string]: any;
}
export type TablePaginationType = {
    pageSize?: number;
    current?: number;
    total?: number;
    onChange?: (page: number, pageSize: number) => void;
};
export type SorterResult<T> = {
    column?: ColumnType<T>;
    order?: "ascend" | "descend" | null;
    field?: keyof T | string | React.Key | readonly React.Key[];
    columnKey?: React.Key;
};
declare function Table<T extends Record<string, any>>({ columns, dataSource, rowKey, size, onChange, rowSelection, }: TableProps<T>): import("react/jsx-runtime").JSX.Element;
export default Table;
