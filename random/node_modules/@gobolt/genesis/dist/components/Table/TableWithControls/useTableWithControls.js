import { jsx as o } from "react/jsx-runtime";
import { useState as l } from "react";
import { useTable as T } from "../useTable.js";
import { mockColumns as v } from "../__mocks__/table-mocks.js";
const i = { primaryTableRowData: { sortOptions: [{ value: "status", label: o("span", { children: "Status" }) }, { value: "address", label: o("span", { children: "Address" }) }, { value: "job_subtype", label: o("span", { children: "Type" }) }], searchByPlaceholder: "Search by Address", isSortedAscending: !0 }, secondaryTableRowData: { groups: { orders: ["Cancelled", "Paused"], warehouse: ["D2C"], availability: ["Out of Stock"] }, totalRecords: 0 } }, w = { columns: v, filters: { order: "asc" }, fetchUrl: "/table/data", fetchOptions: { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ filters: { order: "asc", search: "", page: 1, per_page: 10, sort: null } }) } }, J = (C) => {
  const [p, r] = l(w), [n, f] = l(i.secondaryTableRowData.groups), [u, y] = l(i.primaryTableRowData), { secondaryTableRowData: h } = i, b = { ...h, groups: n }, { dataSource: c, columns: m, rowSelection: g } = T(p);
  return c ? { onChange: (a) => {
    if (a.event === "inputChange" && r((t) => ({ ...t, filters: { ...t.filters, search: a.payload }, fetchOptions: { ...t.fetchOptions, body: JSON.stringify({ filters: { ...t.filters, search: a.payload } }) } })), a.event === "primaryChange") {
      const { value: t } = a.payload;
      r((e) => ({ ...e, filters: { ...e.filters, sort: t }, fetchOptions: { ...e.fetchOptions, body: JSON.stringify({ filters: { ...e.filters, sort: t } }) } }));
    }
    if (a.event === "groupItemClick") {
      const { title: t, item: e } = a.payload;
      ((d, S) => {
        const s = { ...n };
        s[d] = s[d].filter((O) => O !== S), f(s);
      })(t, e);
    }
    if (a.event === "orderClick") {
      y((e) => ({ ...e, isSortedAscending: !e.isSortedAscending }));
      const t = a.payload.value;
      r((e) => ({ ...e, filters: { ...e.filters, order: t }, fetchOptions: { ...e.fetchOptions, body: JSON.stringify({ filters: { ...e.filters, order: t } }) } }));
    }
  }, primaryTableRowData: u, secondaryTableRowData: b, dataSource: c, columns: m, rowSelection: g } : null;
};
export {
  J as useTableWithControls
};
