import { GenesisTheme } from '../../styles/theme/genesis-theme.types';
interface StyledTooltipProps {
    theme?: GenesisTheme;
    type?: "primary" | "secondary";
    state?: "active" | "disabled";
}
export declare const getGenesisClass: ({ colors, borderRadius, sizing }: {
    colors: any;
    borderRadius: any;
    sizing: any;
}, type?: string, state?: string) => string;
export declare const Tooltip: import('styled-components/dist/types').IStyledComponentBase<"web", import('styled-components/dist/types').Substitute<(Omit<import('antd/es/tooltip').TooltipPropsWithTitle & import('react').RefAttributes<import('antd/es/tooltip').TooltipRef>, "ref"> & {
    ref?: import('react').Ref<import('antd/es/tooltip').TooltipRef>;
}) | (Omit<import('antd/es/tooltip').TooltipPropsWithOverlay & import('react').RefAttributes<import('antd/es/tooltip').TooltipRef>, "ref"> & {
    ref?: import('react').Ref<import('antd/es/tooltip').TooltipRef>;
}), StyledTooltipProps>> & string & Omit<import('react').ForwardRefExoticComponent<import('antd').TooltipProps & import('react').RefAttributes<import('antd/es/tooltip').TooltipRef>> & {
    _InternalPanelDoNotUseOrYouWillBeFired: import('react').FC<import('antd/es/tooltip/PurePanel').PurePanelProps>;
}, keyof import('react').Component<any, {}, any>>;
export {};
