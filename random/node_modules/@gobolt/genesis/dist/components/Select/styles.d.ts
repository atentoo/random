import { Select as AntSelect, SelectProps } from 'antd';
import { BaseSelectRef } from 'rc-select';
import { StyledComponent } from '../../utils/styled';
import { GenesisTheme, Breakpoint } from '../../styles/theme/genesis-theme.types';
import { TYPE } from '../../constants';
interface StyledSelectProps extends SelectProps {
    theme?: GenesisTheme;
}
interface SelectWrapperProps {
    theme?: GenesisTheme;
    $isFocused: boolean;
    type: keyof typeof TYPE;
    variant?: "simple" | "none";
}
export declare const SelectWrapper: import('styled-components/dist/types').IStyledComponentBase<"web", import('styled-components/dist/types').Substitute<import('react').DetailedHTMLProps<import('react').HTMLAttributes<HTMLDivElement>, HTMLDivElement>, SelectWrapperProps>> & string;
export declare const getGenesisClass: ({ colors, sizing, typography, borderRadius }: {
    colors: any;
    sizing: any;
    typography: any;
    borderRadius: any;
}, type: any, state: any, $variant: any) => string;
interface SelectMenuItemProps {
    theme: GenesisTheme;
    type?: keyof typeof TYPE;
    state?: keyof Breakpoint;
}
export declare const StyledMenuItem: import('styled-components/dist/types').IStyledComponentBase<"web", import('styled-components/dist/types').Substitute<import('react').DetailedHTMLProps<import('react').HTMLAttributes<HTMLDivElement>, HTMLDivElement>, SelectMenuItemProps>> & string;
interface SelectDropdownProps {
    theme: GenesisTheme;
    type?: keyof typeof TYPE;
    state?: keyof Breakpoint;
}
export declare const SelectDropdown: import('styled-components/dist/types').IStyledComponentBase<"web", import('styled-components/dist/types').Substitute<import('react').DetailedHTMLProps<import('react').HTMLAttributes<HTMLDivElement>, HTMLDivElement>, SelectDropdownProps>> & string;
type StyledSelectComponent = StyledComponent<typeof AntSelect, any, StyledSelectProps & {
    ref?: React.Ref<BaseSelectRef>;
}, never>;
export declare const Select: StyledSelectComponent;
export type { StyledSelectProps };
