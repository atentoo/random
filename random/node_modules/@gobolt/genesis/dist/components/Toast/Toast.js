import { jsxs as u, jsx as e } from "react/jsx-runtime";
import { SIZE as f, TYPOGRAPHY_VARIANT as c, STATE as r } from "../../constants/index.js";
import { ToastRow as z, ToastContent as h, ToastCloseButton as T } from "./styles.js";
import { useGenesis as S } from "../../providers/useGenesis.js";
import m from "../Typography/Typography.js";
import g from "../Button/Button.js";
import v from "../../node_modules/@ant-design/icons/es/icons/CloseOutlined.js";
import w from "../../node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js";
import x from "../../node_modules/@ant-design/icons/es/icons/MinusCircleOutlined.js";
import b from "../../node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js";
import C from "../../node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js";
import A from "../../node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js";
const I = (t, o) => {
  switch (t) {
    case r.warning:
      return e(A, { style: { color: o, fontSize: 22 } });
    case r.error:
      return e(C, { style: { color: o, fontSize: 22 } });
    case r.success:
      return e(b, { style: { color: o, fontSize: 22 } });
    case r.generic:
      return e(x, { style: { color: o, fontSize: 22 } });
    case r.info:
    default:
      return e(w, { style: { color: o, fontSize: 22 } });
  }
}, Z = ({ state: t = r.info, message: o, action: i, close: l, size: a = f.standard }) => {
  const { theme: n } = S(), d = ((y, s) => {
    switch (y) {
      case r.error:
        return s.colors.status.error.onsurface;
      case r.success:
        return s.colors.status.success.onsurface;
      case r.warning:
        return s.colors.status.warning.onsurface;
      case r.generic:
        return s.colors.status.generic.onsurface;
      case r.info:
      default:
        return s.colors.status.info.onsurface;
    }
  })(t, n);
  n.colors.interactive.utility.border, n.colors.interactive.utility.onsurface;
  const p = a === f.small ? c.body1 : c.body2;
  return u(z, { state: t, size: a, children: [u(h, { state: t, size: a, children: [I(t, d), e(m, { variant: p, color: n.colors.onsurface.copy, isText: !0, children: o })] }), i ? e(g, { themeType: "utility", size: "small", onClick: i.onClick, style: { position: "relative", zIndex: 1, pointerEvents: "all" }, children: e(m, { variant: c.body3, isText: !0, children: i.label }) }) : null, l ? e(T, { onClick: l, children: e(v, { style: { fontSize: 18 } }) }) : null] });
};
export {
  Z as default
};
