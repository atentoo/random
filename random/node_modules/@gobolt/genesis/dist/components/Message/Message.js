import { jsxs as m, jsx as r } from "react/jsx-runtime";
import { useState as h } from "react";
import { TYPOGRAPHY_VARIANT as v, SIZE as d, STATE as e } from "../../constants/index.js";
import { useTheme as T } from "../../utils/styled.js";
import { MessageRow as w, MessageContent as y, ActionButton as k } from "./styles.js";
import f from "../Typography/Typography.js";
import x from "../../node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js";
import A from "../../node_modules/@ant-design/icons/es/icons/MinusCircleOutlined.js";
import M from "../../node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js";
import j from "../../node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js";
import z from "../../node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js";
const C = (t, s) => {
  switch (t) {
    case e.warning:
      return r(z, { style: { color: s } });
    case e.error:
      return r(j, { style: { color: s } });
    case e.success:
      return r(M, { style: { color: s } });
    case e.generic:
      return r(A, { style: { color: s } });
    case e.info:
    default:
      return r(x, { style: { color: s } });
  }
}, N = ({ state: t = e.info, message: s, action: o, size: n = d.standard }) => {
  const c = T(), i = ((p, a) => {
    switch (p) {
      case e.error:
        return a.colors.status.error.onsurface;
      case e.success:
        return a.colors.status.success.onsurface;
      case e.warning:
        return a.colors.status.warning.onsurface;
      case e.generic:
        return a.colors.status.generic.onsurface;
      case e.info:
      default:
        return a.colors.status.info.onsurface;
    }
  })(t, c), l = v.message, [g, u] = h(c.colors.interactive.link.active);
  return m(w, { state: t, size: n, children: [m(y, { action: o, size: n, children: [C(t, i), r(f, { variant: l, color: i, isText: !0, children: s })] }), o ? r(k, { onClick: o == null ? void 0 : o.onClick, onMouseEnter: () => u(c.colors.interactive.link.hover), onMouseLeave: () => u(c.colors.interactive.link.active), children: r(f, { variant: l, color: g, isText: !0, children: o.label }) }) : null] });
};
export {
  N as default
};
